<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Z - Computer &amp; Programming Technology</title>
  
  <subtitle>Computer technology blog for PHP, Node.js, Golang etc.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://log.zvz.im/"/>
  <updated>2025-07-03T18:06:35.825Z</updated>
  <id>http://log.zvz.im/</id>
  
  <author>
    <name>darluc</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>AI, ML, NNs 和 DL 的关系</title>
    <link href="http://log.zvz.im/2024/05/12/ai-ml-nn-and-dl/"/>
    <id>http://log.zvz.im/2024/05/12/ai-ml-nn-and-dl/</id>
    <published>2024-05-12T02:12:36.000Z</published>
    <updated>2025-07-03T18:06:35.825Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://img.zvz.im/202405101711131.png" alt="AI,ML,NNs and DL - Relationship Diagram"></p><h2 id="不是所有的神经网络都是深度学习模型"><a href="#不是所有的神经网络都是深度学习模型" class="headerlink" title="不是所有的神经网络都是深度学习模型"></a>不是所有的神经网络都是深度学习模型</h2><p>你可能经常听到以下这些术语：人工智能（AI），机器学习（ML），神经网络（NNs）和深度学习（DL）。它们都在我的写作主题范围内。关于这些主题，我已经发布了超过一百篇文章。</p><p>今天，我们要讨论一下 AI，ML，NNs 和 DL 彼此之间的关系。</p><span id="more"></span><p>通过最上面的示意图，我们可以作出以下陈述：</p><ul><li>AI 是一个很宽泛的领域。ML，NNs 和 DL 都是 AI 的子集。</li><li>NNs 和 DL 是 ML 的特定领域。在学习 NNs 和 DL 之前你最好先熟悉一般的机器学习技术。</li><li>并不是所有的神经网络都是深度学习模型。</li></ul><p>让我接下来详细仔细解释每一个术语。</p><h2 id="人工智能（AI）"><a href="#人工智能（AI）" class="headerlink" title="人工智能（AI）"></a>人工智能（AI）</h2><p>AI 是一种先进技术可以让机器和系统获得智能和预言能力。AI 系统可以从过于的经验或者我们提供的数据中学习。机器学习（ML）和深度学习（DL）是 AI 研究的两个主要方向。今天，我们可以找到错综复杂的 AI 系统。但是，它们中的绝大多数都无法和人脑的自然智能相提并论。</p><h2 id="机器学习（ML）"><a href="#机器学习（ML）" class="headerlink" title="机器学习（ML）"></a>机器学习（ML）</h2><p>ML 是指在无显式编码下计算机从数据中学习的能力。它可用于区分机器学习和传统编程。</p><p>在传统编程中，程序员写入显式规则来定义程序应该如何在计算机或机器上工作。但是在机器学习中，模型是从数据中学习到规则的。我们不需要显式地写出这些规则。不过，我们还是需要写代码来构建这个机器学习模型。</p><p>在训练机器学习模型时，它应从数据中学习。它不应该记忆数据。从数据中学习时，机器学习模型能够发现数据中隐藏的模式，或对训练中未使用的新数据做出准确预测。如果机器学习模型记忆数据，而不是学习数据中的模式，那么它就无法泛化新的输入数据。在这种情况下，模型往往会出现过拟合–这是我们在训练过程中应该避免的问题。</p><p>机器学习可以分为三大类：</p><ul><li><strong>监督学习</strong>：在监督学习中，机器学习模型使用已打标数据进行训练。我们需要提供数据样本（称为 <strong>X</strong>）和标签（称为 <strong>y</strong>）作为输入。监督学习算法的目标是找到一个函数 <strong>f(θ)</strong>，使其能够能更准确地将 <strong>X</strong> 映射到 <strong>y</strong>。在训练期间从数据中学到的模型参数会以使目标函数最小化的方式更新。监督模型预测出的结果会与真实值（ground truth）进行比较。有类监督学习模型 — <strong>回归</strong>和<strong>分类</strong>。回归模型预测连续值，而分类模型预测离散值（类别或分类）。线性回归、逻辑回归、支持向量机、决策树、随机森林、XGBoost、CatBoost是一些常用的监督学习算法。</li><li><strong>无监督学习</strong>：在无监督学习中，机器学习模型使用未打标的数据进行训练。我们只提供数据样本（称为 <strong>X</strong>）作为输入。无监督学习的目标是发现数据中的隐藏模式、结构和关系。<strong>聚类</strong>和<strong>降维</strong>是无监督学习的两种主要类型。聚类在数据中找到分组，而降维减少了数据的维度（变量的数量）。</li><li><strong>强化学习</strong>：在强化学习中，算法与环境互动以学习解决问题的策略。只需要一个奖励系统，而没有像监督学习中的错误计算过程。它的目标是开发一个可以从环境互动中学习的系统。这种类型的学习通常用于游戏（例如国际象棋）、机器人技术和导航系统。</li></ul><h2 id="神经网络（NNs）和深度学习（DL）"><a href="#神经网络（NNs）和深度学习（DL）" class="headerlink" title="神经网络（NNs）和深度学习（DL）"></a>神经网络（NNs）和深度学习（DL）</h2><p>我们经常交替使用这俩个术语，因为神经网络（NNs）和深度学习（DL）之间只有很小的区别。神经网络（通常称为人工神经网络-ANNs）受到人脑的启发，它是通过将多个人工神经元（感知器）堆叠在一起形成的。</p><p>神经网络的深度由其隐藏层的数量定义。没有隐藏层或只有一个隐藏层的ANN被称为浅层神经网络。具有两个或更多隐藏层的ANN被称为深度神经网络。训练（学习）深度神经网络的过程被称为深度学习。深度学习中的“深度”一词指的是网络中隐藏层的数量（深度）。</p><p>深度学习是神经网络（NNs）的一个子集。这是因为我们不将训练浅层神经网络的过程视为深度学习。</p><p>我们经常训练具有两个以上隐藏层的神经网络。没有隐藏层或只有一个隐藏层的ANN没有足够的能力学习数据中的复杂关系。它们非常接近于一般的机器学习模型。例如，<a href="https://rukshanpramoditha.medium.com/logistic-regression-as-a-very-simple-neural-network-model-923d366d5a94">我们可以将逻辑回归视为一个没有隐藏层的非常简单的神经网络模型</a>。</p><p>深度神经网络有一些共同特征。由于这些特征，深度学习与机器学习不同。</p><ul><li>深度神经网络需要大量的数据才能实现高表现。在数据量较少的情况下，它们甚至无法击败一般的机器学习算法。</li><li>它们能够学习数据中的复杂关系。</li><li>它们需要大量的计算资源来训练。</li><li>准确度高。</li><li>它们是黑盒模型。深度学习算法不容易解释。</li><li>深度神经网络需要更多的时间来训练。</li><li>深度神经网络可以从大型数据集中自动提取特征。这是深度学习相较于机器学习的一个巨大优势。</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>人工智能被视为一种新型的“电力”，它将我们的生活转变为一个完全不同的模式。得益于AI，我们有了自动驾驶汽车、AI医疗保健系统、语音识别系统、图像处理系统、推荐系统等。它们定义了我们的生活方式和商业模式。</p><p>机器学习（ML）和深度学习（DL）是AI两个最重要的方面。由于智能设备的存在，每一秒都会产生惊人的数据量。与此同时，随着技术的进步，计算资源的成本在降低。这些因素共同为开发机器学习和深度学习系统提供了关键。</p><p>ML 和 DL 系统可以将数据转化为信息，将信息转化为知识。在人类的监督下，信息和知识可以被转化为可执行的洞察力，这些洞察力被实施于现实世界的商业问题中。</p><p>数据 → 信息 → 知识 → 可执行的洞察力</p><p>这就是今天文章的结尾。如果您对本文有任何疑问，请在评论区告诉我。</p><p>翻译自：<a href="https://medium.com/data-science-365/the-relationship-between-ai-ml-nns-and-dl-60bd40069908">The Relationship between AI, ML, NNs and DL</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://img.zvz.im/202405101711131.png&quot; alt=&quot;AI,ML,NNs and DL - Relationship Diagram&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;不是所有的神经网络都是深度学习模型&quot;&gt;&lt;a href=&quot;#不是所有的神经网络都是深度学习模型&quot; class=&quot;headerlink&quot; title=&quot;不是所有的神经网络都是深度学习模型&quot;&gt;&lt;/a&gt;不是所有的神经网络都是深度学习模型&lt;/h2&gt;&lt;p&gt;你可能经常听到以下这些术语：人工智能（AI），机器学习（ML），神经网络（NNs）和深度学习（DL）。它们都在我的写作主题范围内。关于这些主题，我已经发布了超过一百篇文章。&lt;/p&gt;
&lt;p&gt;今天，我们要讨论一下 AI，ML，NNs 和 DL 彼此之间的关系。&lt;/p&gt;
    
    </summary>
    
    
      <category term="AI" scheme="http://log.zvz.im/tags/AI/"/>
    
  </entry>
  
  <entry>
    <title>大型语言模型的历史、时间线和未来</title>
    <link href="http://log.zvz.im/2024/04/01/history-timeline-of-llm/"/>
    <id>http://log.zvz.im/2024/04/01/history-timeline-of-llm/</id>
    <published>2024-04-01T16:05:27.000Z</published>
    <updated>2025-07-03T18:06:35.826Z</updated>
    
    <content type="html"><![CDATA[<h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>人工智能的发展速度之快前所未有，尤其是ChatGPT频频成为头条新闻，大型语言模型（LLMs）的戏剧性演变也不断出现在媒体圈中。全球数百万人迅速采用了对话式人工智能工具作为他们日常生活的一部分。这些工具不仅因其惊人的能力、效率令人着迷，同时也因不加以良好监管则可能带来的潜在危险而令人恐惧。</p><p>那么，一切从何开始，又将走向何方？这是我们将尝试进一步深入探讨的百万美元问题。为了帮助您更好地理解这个快速发展的领域，在本文中，我们涵盖了以下主题：</p><ul><li><p>简要介绍LLMs的历史。</p></li><li><p>变换器和ChatGPT的崛起。</p></li><li><p>训练LLMs。</p></li><li><p>LLMs的类型和应用。</p></li><li><p>当前的限制、挑战和潜在危险。</p></li><li><p>这些模型的未来前景。从学习过程到人工反馈的强化学习，让我们更深入的探究语言模型的基础，它们是如何被训练的以及它们是如何工作的。</p></li></ul><span id="more"></span><h3 id="什么是大型语言模型？"><a href="#什么是大型语言模型？" class="headerlink" title="什么是大型语言模型？"></a>什么是大型语言模型？</h3><p>大型语言模型的核心是一种机器学习模型，它能够通过深度神经网络理解和生成人类语言。语言模型的主要任务是计算在给定输入后，一个词在句子中出现的概率：例如，“天空是<strong>__</strong>”，最可能的答案是“蓝色”。模型能够在给定大量文本数据集（或语料库）后预测句子中的下一个词。基本上，它在学习识别单词组合的各种不同模式。通过这个过程，你可以得到一个预训练的语言模型。</p><p>经过一些微调，这些模型可以产生多种实际用途，如翻译，或在特定知识领域（如法律或医学）建立专业知识。这个过程被称为迁移学习，它使得模型能够将从一个任务中获得的知识应用到另一个任务上。</p><p>语言模型的“大型”是指其架构的规模。这反过来基于神经网络的人工智能，这就像人类大脑中的神经元一起作用来进行学习和处理信息。此外，LLMs包含大量参数（例如，GPT有超过100亿个），通过自监督或半监督学习在大量未标记的文本数据上进行训练。通过前者，模型能够从未注释的文本中学习，考虑到依赖手动标记数据的成本高昂，这是一个巨大的优势。</p><p>此外，参数更多的大型网络相较与较小的网络在保留信息和识别模式方面表现出了更好的性能和更大的容量。模型越大，在训练过程中能够学习的相关信息就越多，这反过来又使其预测更加准确。虽然这在传统意义上可能是正确的，但有一个需要注意的问题：人工智能公司和开发者们都在寻找应对训练大型语言模型所需的过度计算成本和能源挑战的方法，通过引入更小、训练更优化的模型来实现这一点。</p><p>尽管大型语言模型主要被训练在简单任务上，比如预测句子中的下一个单词，但令人惊讶的是它们能够捕捉到语言结构和意义的多少，更不用说它们能够掌握的大量事实了。</p><h3 id="关键术语"><a href="#关键术语" class="headerlink" title="关键术语"></a>关键术语</h3><p>这是一个相对较新的领域，有很多术语需要你去熟悉。以下是可以帮助你更好地理解 LLM 世界的主要术语：</p><ul><li><strong>注意力</strong> — 评估每个通过LLM传递的标记影响的统计装置。</li><li><strong>嵌入</strong> — 捕捉单词含义及其在上下文中的关系的数值表示。</li><li><strong>变换器</strong> — 构成大多数LLMs基础的神经网络架构。</li><li><strong>提示</strong> — 用户提供给LLM以引出响应或执行任务的输入。</li><li><strong>指令调整</strong> — 训练语言模型回答不同的提示以学习如何回答新的提示。</li><li><strong>RLHF（人类反馈强化学习）</strong> — 根据人类偏好调整模型的技术。</li></ul><h3 id="大型语言模型的简史：最初是Eliza…"><a href="#大型语言模型的简史：最初是Eliza…" class="headerlink" title="大型语言模型的简史：最初是Eliza…"></a>大型语言模型的简史：最初是Eliza…</h3><p>当古人小心翼翼地将他们的知识记录在莎草纸上，并存放在传说中的亚历山大图书馆时，他们无法梦想到，千年后他们的后代能够在指尖上获得所有这些知识以及更多。这就是大型语言模型的力量和美丽。LLMs不仅能回答问题和解决复杂问题，还能总结大量作品，以及从各种语言中翻译和推导上下文。</p><p>大型语言模型的基础可以追溯到20世纪50年代进行的神经网络和神经信息处理系统的实验，这些实验允许计算机处理自然语言。IBM和乔治敦大学的研究人员合作创建了一个能够自动将短语从俄语翻译成英语的系统。作为机器翻译的一个显著示范，从此该领域的研究开始起步。</p><p>LLMs的想法首次出现在20世纪60年代的Eliza中：这是世界上第一个聊天机器人，由麻省理工学院的研究员Joseph Weizenbaum设计。Eliza标志着自然语言处理（NLP）研究的开始，为未来的更复杂的LLMs奠定了基础。</p><p>然后在约30年后的1997年，长短期记忆（LSTM）网络出现了。它们的出现导致了更深层次、更复杂的神经网络，能够处理更多的数据。斯坦福大学的CoreNLP套件在2010年推出，是发展的下一个阶段，它允许开发者进行情感分析和已命名实体的识别。</p><p>随后，在2011年，Google Brain的一个具有如词嵌入等高级特性的较小版本出现了，这使得NLP系统能够更清晰地理解上下文。2017年变换器模型的出现是一个重大的转折点。GPT代表生成预训练变换器，能够生成或“解码”新文本。另一个例子是BERT - 来自变换器的双向编码器表示。BERT可以根据编码器组件预测或分类输入文本。</p><p>从2018年开始，研究人员专注于构建越来越大的模型。正是在2019年，谷歌的研究人员推出了BERT，这是一个双向的、3.4亿参数的模型（同类中第三大的模型），能够确定上下文，使其能够适应各种任务。通过在大量未结构化数据上通过自监督学习预训练BERT，模型能够理解单词之间的关系。不久，BERT成为了自然语言处理任务的首选工具。事实上，正是BERT在Google搜索中处理了每一个基于英语的查询。</p><h3 id="变换器和ChatGPT的崛起"><a href="#变换器和ChatGPT的崛起" class="headerlink" title="变换器和ChatGPT的崛起"></a>变换器和ChatGPT的崛起</h3><p>在BERT变得更加精细的同时，OpenAI拥有15亿参数的GPT-2，成功地产生了令人信服的文本生成能力。然后，在2020年，他们发布了拥有1750亿参数的GPT-3，这为LLMs设定了标准，并成为了ChatGPT的基础。正是在2022年11月ChatGPT的发布，普通公众开始真正注意到LLMs的影响。即使是非技术用户也可以提示LLM，接收快速响应，并进行对话，引起了让人既兴奋又忧虑的轰动。</p><p>主要地，是带有编码器-解码器架构的变换器模型催生了更大更复杂的LLMs的创造，成为Open AI的GPT-3、ChatGPT等的催化剂。利用两个关键组件：词嵌入（使模型能够在上下文中理解单词）和注意力机制（使模型能够评估单词或短语的重要性），变换器在确定上下文方面特别有帮助。由于它们能够一次性处理大量数据，自那时起它们一直在推动该领域的变革。</p><p>最近，OpenAI推出了GPT-4，估计有一万万亿参数——是GPT-3的五倍，大约是BERT首次发布时的3000倍。我们将在后面更详细地介绍GPT系列的演变。</p><p>更加直观地，这是从Eliza到OpenAI的GPT的LLMs发展时间线的简单概述：<br><img src="https://pic.zvz.im/blogimg/20240403115340.png" alt="history of large language models"></p><h3 id="深入了解-GPT-LLMs-的演进历程"><a href="#深入了解-GPT-LLMs-的演进历程" class="headerlink" title="深入了解 GPT LLMs 的演进历程"></a>深入了解 GPT LLMs 的演进历程</h3><p>GPT-1通过执行简单任务（如回答问题）启动了LLMs的演变。当GPT-2发布时，模型已经显著增长，参数增加了10倍以上。GPT-2能产生类似人写的文本，并自动执行某些任务。随着GPT-3的引入，公众能够访问这项创新技术。GPT-3将问题解决引入了这个组合中。GPT-3.5扩大了系统的能力，变得更加流畅且成本更低。</p><p>到目前为止，最新的变体是GPT-4，它具有显著的增强功能，如使用计算机视觉解释视觉数据的能力（与使用GPT-3.5的ChatGPT不同）。GPT-4接受文本和图像作为输入。GPT-4能够通过多项标准化考试，这对于学生来说是个好消息，相反对于教育者来说却是个坏消息。不仅如此，它还在学习幽默。通过解释计算机视觉，这项新技术正在用学习和使用人类语言类似的方式来学习其它形式的幽默。准备好迎接AI生成的笑话吧！</p><p>更重要的是，“可操纵性”是最新的进步，它允许GPT用户定制其输出的结构以满足他们的特定需求。基本上，可操纵性指的是控制或修改语言模型行为的能力——这涉及到使LLM采用不同的角色，遵循用户指令，或以特定的语调说话。可操纵性允许用户随意改变LLM的行为，并命令它以不同的风格或声音写作。可能性是无限的！</p><h3 id="越大越好？"><a href="#越大越好？" class="headerlink" title="越大越好？"></a>越大越好？</h3><p>正如我们之前简要提到的，研究表明，具有更多参数的较大语言模型编程语言具有更好的性能，从而促使开发人员和AI研究人员之间展开了一场竞赛，以创建更大更好的LLMs——参数越多，越好！</p><p>最初的GPT只有几百万个参数，变成了像BERT和GPT-2这样的模型，包含数亿个参数。最近的示例包括GPT-3，它拥有1750亿个参数，而Megatron-Turing的语言模型已经超过了5000亿个参数（在最后四年的每三个半月中大约是两倍）！</p><p>然而，AI实验室DeepMind的RETRO（Retrieval-Enhanced Transformer）模型已经证明，它可以胜过其他比它大25倍的现有模型。这是对训练更大模型的显著缺点的一个优雅解决方案，因为它们通常需要更多的时间、资源、金钱和计算能量来训练。不仅如此，RETRO已经证明其大型模型有潜力通过增强的过滤能力减少有害和有毒信息。所以，更大并不总是更好！下一个巨大的LLM的训练过程可能需要所有可用的文本和训练数据，而更小模型和更优化训练方式可能是解决方案。</p><p>此外，在GPT-4发布后不久，OpenAI的首席执行官Sam Altman表示，他认为巨型模型的时代已经达到了不可逆转的点，因为数据中心和网上的信息数量有限。许多研究人员现在同意，通过定制，更小的LLMs可以和大型模型一样有效，甚至更有效。</p><h3 id="训练大型语言模型"><a href="#训练大型语言模型" class="headerlink" title="训练大型语言模型"></a>训练大型语言模型</h3><p>LLMs通过自监督学习在大量未结构化数据上进行训练。在这个过程中，模型接受长单词序列，其中有一个或多个单词缺失。用户向LLM提供提示（模型用其作为起点的文本片段）。最初，模型将提示中的每个标记转换为其嵌入。然后，它使用这些嵌入来评估所有可能的标记跟随的概率。下一个标记是基于部分随机性选择的，并且重复该过程，直到模型选择一个停止标记。</p><p>那么，你需要多少数据来训练一个LLM？一个好的经验法则是将参数和训练数据集翻倍。根据当前的研究，大多数LLM实际上是欠训练的。DeepMind进行了一项研究，以确定训练变换器语言模型的最佳模型、参数大小和所需标记数量。该团队在50亿到5000亿标记上训练了超过400个语言模型，从7000万到160亿参数。他们发现，对于计算最优的训练，模型大小和标记数量应该是相等的。</p><h3 id="训练计算最优的大型语言模型"><a href="#训练计算最优的大型语言模型" class="headerlink" title="训练计算最优的大型语言模型"></a>训练计算最优的大型语言模型</h3><p>你可能已经听说过著名的Chinchilla案例研究。我们在另一篇帖子中更详细地介绍了它<a href="https://toloka.ai/blog/training-large-language-models-101/">（大型语言模型训练101）</a>。文章主要介绍了该团队研究了三种确定模型大小和训练标记数量之间关系的方法。所有三种方法都指向了这样一个想法：相对平等地增加模型的大小和训练标记数量将实现更好的性能。</p><p>他们通过训练一个名为Chinchilla的模型来测试他们的假设，该模型与其更大的模型等效Gopher具有相同的计算预算，但参数更少，数据是其四倍。他们发现，更小、更优化训练的模型表现出更好的性能：他们的计算最优的70亿模型Chinchilla在1.4万亿标记上训练，性能超过了Gopher（一个280亿参数模型），同时显著降低了推理成本。</p><p>有趣的是，DeepMind团队发现，一个7.5亿参数的RETRO模型在16个数据集中的9个上胜过Gopher。</p><h3 id="大型语言模型的类型"><a href="#大型语言模型的类型" class="headerlink" title="大型语言模型的类型"></a>大型语言模型的类型</h3><p>LLMs可以分解为三种类型：预训练模型、微调模型和多模态模型。取决于各自的目标，每种类型都有其自己的优势：</p><ul><li><strong>预训练模型</strong> 在大量数据上进行训练，这有助于它们理解广泛的语言模式和结构。一个优点是，预训练模型往往在语法上是正确的！</li><li><strong>微调模型</strong> 在大型数据集上进行预训练，然后在较小的数据集上针对特定任务进行微调。它们特别适合情感分析、回答问题和分类文本。</li><li><strong>多模态模型</strong> 结合文本与其他模式，如图像或视频，以创建更高级的语言模型。它们可以生成图像的文本描述，反之亦然。</li></ul><h3 id="大型语言模型的应用"><a href="#大型语言模型的应用" class="headerlink" title="大型语言模型的应用"></a>大型语言模型的应用</h3><p>LLMs有多种应用，包括总结不同文本、构建更有效的数字搜索工具和作为聊天机器人。我们将更进一步地探究四个关键应用：</p><h3 id="1-进化的对话式AI"><a href="#1-进化的对话式AI" class="headerlink" title="1. 进化的对话式AI"></a>1. 进化的对话式AI</h3><p>LLMs已经证明能够在对话中生成相关和连贯的回应。想想聊天机器人和虚拟助手。类似地，LLMs正在帮助使语音识别系统更准确。请关注由于这一点而即将出现的所有新应用程序！</p><h3 id="2-理解文本中的情感"><a href="#2-理解文本中的情感" class="headerlink" title="2. 理解文本中的情感"></a>2. 理解文本中的情感</h3><p>LLMs擅长情感分析和提取主观信息，如情感和观点。应用包括客户反馈、社交媒体分析以及品牌监控。</p><h3 id="3-高效的机器翻译"><a href="#3-高效的机器翻译" class="headerlink" title="3. 高效的机器翻译"></a>3. 高效的机器翻译</h3><p>得益于LLMs，翻译系统变得更加高效和准确。通过打破语言障碍，LLMs正在使全球人类分享知识和相互沟通成为可能。</p><h3 id="4-文本内容创作"><a href="#4-文本内容创作" class="headerlink" title="4. 文本内容创作"></a>4. 文本内容创作</h3><p>更令人惊讶的是，LLMs可以生成各种形式的文本，如新闻文章和产品描述。它们甚至已经在创意写作方面取得了显著的成功——再次让许多学生在提交学期论文时感到高兴（以及许多老师感到头疼）！</p><h3 id="当前的限制和挑战"><a href="#当前的限制和挑战" class="headerlink" title="当前的限制和挑战"></a>当前的限制和挑战</h3><p>伴随着AI、机器学习模型以及整体LLMs的惊人进步，仍然有许多挑战需要克服。错误信息、恶意软件、歧视性内容、抄袭和不真实的信息可能导致意外或危险的后果；这些问题对这些模型提出了质疑。</p><p>更重要的是，当偏见不经意间被引入到基于LLM的产品（如GPT-4）中时，它们可能在某些主题上显得“确定但错误”。这有点像当你听到一个政治家谈论他们一无所知的事情时的情形。克服这些限制是建立公众对这项新技术信任的关键。这就是RLHF发挥作用的地方，以帮助控制或引导大规模AI系统。</p><p>以下是需要解决的一些主要问题：</p><h3 id="伦理和隐私问题"><a href="#伦理和隐私问题" class="headerlink" title="伦理和隐私问题"></a>伦理和隐私问题</h3><p>目前，没有多少法律或限制规定LLMs的使用，由于大型数据集包含大量机密或敏感数据（不仅限于个人数据盗窃、版权和知识产权侵权等），这引发了伦理、隐私甚至用户的心理问题（当他们在AI生成的论坛中寻求答案时）。</p><h3 id="偏见和成见"><a href="#偏见和成见" class="headerlink" title="偏见和成见"></a>偏见和成见</h3><p>由于LLMs的训练是基于不同的信息来源的，它们可能会无意中重复这些来源中的偏见。包括文化、种族、性别等在内的偏见都可能成为问题。这些偏见可能对现实生活中产生影响，如招聘决策、医疗护理或财务结果。</p><h3 id="环境影响和计算成本"><a href="#环境影响和计算成本" class="headerlink" title="环境影响和计算成本"></a>环境影响和计算成本</h3><p>训练大型语言模型需要大量的计算能力，这影响能源消耗和碳排放。不仅如此，它还很贵！许多公司，特别是较小的公司，根本负担不起。</p><p>为了对抗这些潜在的危害，研究人员正专注于围绕三个主要支柱设计LLMs：有用、真实和无害。如果一个LLM能够坚持所有三个原则，它就被认为是“一致的”——这是一个具有主观性的术语。RLHF在这种情况下提供了一个有用的解决方案。</p><h3 id="从人类反馈中进行强化学习"><a href="#从人类反馈中进行强化学习" class="headerlink" title="从人类反馈中进行强化学习"></a>从人类反馈中进行强化学习</h3><p>RLHF有能力解决上面列出的所有挑战，这引发了一个问题：机器能学习人类价值观吗？</p><p>在基本层面上，RLHF利用人类反馈来生成人类偏好数据集，以保证奖励函数能得到期望的结果。人类反馈可以通过多种方式获得：</p><ul><li><strong>优先级顺序</strong>：人们按偏好顺序对输出进行排名。</li><li><strong>示范操作</strong>：人类为提示编写首选答案。</li><li><strong>更正</strong>：人类编辑模型的输出以纠正负面行为。</li><li><strong>自然语言输入</strong>：人类用语言提供输出的描述或批评。一旦创建了奖励模型，它就用于使用强化学习训练基线模型，该模型利用奖励模型构建人类价值策略，然后语言模型使用该策略生成响应。该如何使用RLHF产生更好、更安全、更具吸引力的响应，ChatGPT给出了一个很好的示范。</li></ul><p>RLHF是语言模型领域的一项重大进步，提供了更受控和可靠的用户体验。但其中有一个代价：RLHF引入了用于训练奖励模型的偏好数据集中的贡献者的偏见。因此，尽管ChatGPT旨在提供有用、诚实和安全的答案，但它仍然受到标注者对这些答案的解释的影响。虽然RLHF提高了一致性（这对于LLMs在搜索引擎中的使用是很有益的），但它以牺牲创意和思想多样性为代价。在这个领域仍然有很多未知的东西。</p><h3 id="LLMs的未来展望"><a href="#LLMs的未来展望" class="headerlink" title="LLMs的未来展望"></a>LLMs的未来展望</h3><p>虽然ChatGPT是最新的闪亮事物，但它只是LLMs领域未来创新路径中的一个小步骤。虽然我们无法预测未来，但有一些技术趋势将的爱我们走向创新之路。我们来看看它们具体是什么：</p><h3 id="1-自我改进的自主模型"><a href="#1-自我改进的自主模型" class="headerlink" title="1. 自我改进的自主模型"></a>1. 自我改进的自主模型</h3><p>这些LLMs可能会有能力生成自己的训练数据以提高自己的表现。这在互联网上可用的大量信息被耗尽后可能特别有帮助。作为一个最近的例子，Google的LLM能够生成自己的问题和答案，然后相应地进行自我微调。</p><h3 id="2-能够验证自己输出的模型"><a href="#2-能够验证自己输出的模型" class="headerlink" title="2. 能够验证自己输出的模型"></a>2. 能够验证自己输出的模型</h3><p>能够为它们生成的信息提供来源的LLMs可以为整个技术增加更大的可信度。例如，OpenAI的WebGPT能够生成准确、详细的响应，并有来源作为支持。</p><h3 id="3-稀疏专家模型的发展"><a href="#3-稀疏专家模型的发展" class="headerlink" title="3. 稀疏专家模型的发展"></a>3. 稀疏专家模型的发展</h3><p>今天的最知名的LLMs有几个共同特点：它们是基于变换器架构的密集、自监督、预训练模型。然而，稀疏专家模型正在将技术引向另一个方向。有了这些模型，只需要激活相关的参数，使它们更大、更复杂。同时，它们需要更少的资源和能源消耗来进行模型训练。</p><h3 id="关键要点"><a href="#关键要点" class="headerlink" title="关键要点"></a>关键要点</h3><p>总之，LLMs是基础模型，它是一种大型神经网络，可以生成或嵌入文本。随着LLMs的扩展，它们可以解锁新的能力，例如翻译外语、编写代码等。它们只需在模型训练期间观察语言中的重复模式。这项技术确实令人惊叹！但随着这项创新，也带来了一些问题。例如，考虑到人类感知的主观性，RLHF在模型训练期间可能会无意中将偏见带入像GPT这样的AI产品中。</p><p>以下是一些关键总结：</p><ul><li>拥有从20世纪50年代和60年代开始的历史，LLMs直到最近才随着ChatGPT的引入而成为家喻户晓的名字。</li><li>LLMs有许多应用，包括情感分析、全文生成、分类、文本编辑、语言翻译、信息提取和摘要。</li><li>更大并不总是意味着更好：研究人员发现，最终更小、更优化训练的模型在性能上超过了它们的巨型对手，并且需要更少的能源和资源。</li><li>尽管LLMs有能力帮助我们解决许多现实世界的问题，但在使它们变得可靠、值得信赖和安全方面，我们还有很长的路要走。</li><li>基于LLM的GPT产品可以像人类一样学习和交流，但我们的学习和行为模式仍然要复杂得多。因此，尽管各行各业的专业人士可能对工作安全感到担忧，学术界对论文变得过时感到紧张，但在不确定性中，人们对无限潜力和无数机会感到兴奋不已。</li></ul><p>要了解更多关于LLMs的信息，请查看我们的博客，我们将涵盖AI、机器学习和这项创新技术不断发展的所有细节。</p><p>翻译自：<a href="https://toloka.ai/blog/history-of-llms/">The history, timeline, and future of LLMs</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h3&gt;&lt;p&gt;人工智能的发展速度之快前所未有，尤其是ChatGPT频频成为头条新闻，大型语言模型（LLMs）的戏剧性演变也不断出现在媒体圈中。全球数百万人迅速采用了对话式人工智能工具作为他们日常生活的一部分。这些工具不仅因其惊人的能力、效率令人着迷，同时也因不加以良好监管则可能带来的潜在危险而令人恐惧。&lt;/p&gt;
&lt;p&gt;那么，一切从何开始，又将走向何方？这是我们将尝试进一步深入探讨的百万美元问题。为了帮助您更好地理解这个快速发展的领域，在本文中，我们涵盖了以下主题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;简要介绍LLMs的历史。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;变换器和ChatGPT的崛起。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;训练LLMs。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;LLMs的类型和应用。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;当前的限制、挑战和潜在危险。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;这些模型的未来前景。从学习过程到人工反馈的强化学习，让我们更深入的探究语言模型的基础，它们是如何被训练的以及它们是如何工作的。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="ai" scheme="http://log.zvz.im/tags/ai/"/>
    
      <category term="llm" scheme="http://log.zvz.im/tags/llm/"/>
    
  </entry>
  
  <entry>
    <title>使用 Golang 和 OpenCV 侦测人脸</title>
    <link href="http://log.zvz.im/2021/06/05/go-detect-faces-using-opencv/"/>
    <id>http://log.zvz.im/2021/06/05/go-detect-faces-using-opencv/</id>
    <published>2021-06-05T22:55:29.000Z</published>
    <updated>2025-07-03T18:06:35.826Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img.zvz.im/imgs/2020/04/d055ce9a0a5c233c.png" alt=""></p><p>OpenCV 是一个用于计算机视觉处理的代码库，面世已有 20 多年了。大学时期，我曾在个人的 C++ 和 Python项目中使用过它，因为这些编程语言对它有很好的支持。不过随着我开始学习并使用 Go 语言，我开始好奇 Go 语言能否使用 OpenCV。网上有一些关于如何使用 Go 语言调用 OpenCV 的例子和教程，但我发现它们都太过黑科技和复杂了。还好我发现了一个名为 <a href="https://github.com/hybridgroup"><em>hybridgroup</em></a> 小组的伙计们写的封装库，它很容易使用，而且文档也很全。这里我要向你们展示如何使用 gocv ，并且创建一个简单的 Haar Cascades 面部探测器。</p><p><strong>准备工作</strong></p><ul><li>Go</li><li>OpenCV （下文附有安装链接）</li><li>一个网络摄像头<span id="more"></span></li></ul><p><strong>安装地址</strong></p><p>linux: <a href="https://gocv.io/getting-started/linux/">https://gocv.io/getting-started/linux/</a></p><p>macOS: <a href="https://gocv.io/getting-started/macos/">https://gocv.io/getting-started/macos/</a></p><p>windows: <a href="https://gocv.io/getting-started/windows/">https://gocv.io/getting-started/windows/</a></p><h2 id="实例一"><a href="#实例一" class="headerlink" title="实例一"></a>实例一</h2><p>在第一个例子中，让我们尝试打开一个窗口，并显示从你的摄像头获取到的视频流。</p><p>首先引入我们需要的库。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">   “log”</span><br><span class="line">   “gocv.io/x/gocv”</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>然后使用 <a href="https://github.com/hybridgroup/gocv/blob/master/videoio.go#L181">VideoCaptureDevice</a> 方法创建一个 <a href="https://github.com/hybridgroup/gocv/blob/master/videoio.go#L160">VideoCapture</a> 对象。<a href="https://github.com/hybridgroup/gocv/blob/master/videoio.go#L181">VideoCaptureDevice</a>  方法能让你从摄像头中获取一个视频流。该方法需要一个表示设备 ID 的整型参数。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">webcam, err := gocv.VideoCaptureDevice(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    log.Fatalf(“<span class="type">error</span> opening web cam: %v”, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> webcam.Close()</span><br></pre></td></tr></table></figure><p>我们需要创建一个窗口来展示视频流。可以使用 <a href="https://github.com/hybridgroup/gocv/blob/master/highgui.go#L33">NewWindow</a> 方法完成这个任务。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">window := gocv.NewWindow(“webcamwindow”)</span><br><span class="line"><span class="keyword">defer</span> window.Close()</span><br></pre></td></tr></table></figure><p>现在到了有趣的时候。</p><p>由于视频是一个持续不断的图像流，我们将不得不使用一个无限循环持续不断地从摄像头读取数据。为此我们将使用 VideoCapture 类型的 <a href="https://github.com/hybridgroup/gocv/blob/master/videoio.go#L217">Read</a> 方法。它需要一个 <a href="https://github.com/hybridgroup/gocv/blob/master/core.go#L105">Mat 类型</a> （我们在上文创建的矩阵）入参，同时返回一个布尔值表示 VideoCapture 是否成功读取到了帧数据。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">     <span class="keyword">if</span> ok := webcam.Read(&amp;img); !ok || img.Empty() &#123;</span><br><span class="line">        log.Println(“Unable to read from the webcam”)</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">     &#125;</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后我们把图像帧显示在创建的窗口中，等待 50ms 后再处理下一帧。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">window.IMShow(img)</span><br><span class="line">window.WaitKey(<span class="number">50</span>)</span><br></pre></td></tr></table></figure><p>当运行程序时，我们可以看到一个窗口会弹出，里面显示着你的摄像头中的视频流。</p><p><img src="https://img.zvz.im/imgs/2020/04/e5e8627147512749.png" alt=""></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;gocv.io/x/gocv&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">webcam, err := gocv.VideoCaptureDevice(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    log.Fatalf(<span class="string">&quot;error opening device: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> webcam.Close()</span><br><span class="line"></span><br><span class="line">img := gocv.NewMat()</span><br><span class="line"><span class="keyword">defer</span> img.Close()</span><br><span class="line"></span><br><span class="line">window := gocv.NewWindow(<span class="string">&quot;webcamwindow&quot;</span>)</span><br><span class="line"><span class="keyword">defer</span> window.Close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">if</span> ok := webcam.Read(&amp;img); !ok || img.Empty() &#123;</span><br><span class="line">log.Println(<span class="string">&quot;Unable to read from the webcam&quot;</span>)</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">window.IMShow(img)</span><br><span class="line">window.WaitKey(<span class="number">50</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实例二"><a href="#实例二" class="headerlink" title="实例二"></a>实例二</h2><p>此例中，我们将在上一个例子的基础上使用 Haar Cascades 进行人脸侦测。</p><p>不过首先。。什么是 Haar Cascades ？</p><p>简单来讲 Haar cascades 是基于哈尔小波（Haar Wavelet）技术训练得到的层叠分类器。它通过分析图片中的像素来侦测其中的特征。想要了解更多关于 Haar-Cascades 的知识你可以访问以下链接。</p><p><a href="https://www.cs.ubc.ca/~lowe/425/slides/13-ViolaJones.pdf">Viola-Jones object detection framework</a></p><p><a href="https://en.wikipedia.org/wiki/Cascading_classifiers">Cascading classifiers</a></p><p><a href="https://en.wikipedia.org/wiki/Haar-like_feature">Haar-like feature</a></p><p>你可以从 <a href="https://github.com/opencv/opencv/tree/master/data/haarcascades">opencv 的代码库</a>中下载预先训练好的 Haar-Cascades。此例中我们将使用 Haar-Cascade 帮助我们识别人的面部。</p><p>首先我们创建一个<a href="https://github.com/hybridgroup/gocv/blob/master/objdetect.go#L23">分类器</a>并且将预先训练好的 Haar-Cascade 文件给到它。这个例子中我已经下载了 opencv_haarcascade_frontalface_default.xml 文件放到了我们的程序所在的目录。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">harrcascade := “opencv_haarcascade_frontalface_default.xml”</span><br><span class="line">classifier := gocv.NewCascadeClassifier()</span><br><span class="line">classifier.Load(harrcascade)</span><br><span class="line"><span class="keyword">defer</span> classifier.Close()</span><br></pre></td></tr></table></figure><p>然后调用 <a href="https://github.com/hybridgroup/gocv/blob/master/objdetect.go#L51">DetectMultiScale</a> 方法来识别图片中的脸。这个函数会使用刚从摄像头读取到的帧（<a href="https://github.com/hybridgroup/gocv/blob/master/core.go#L105">Mat Type</a>）作为参数并且返回一组 <a href="https://golang.org/src/image/geom.go#L85">Rectangle</a> 类型数据。数组的大小代表了在图片中识别到的脸的个数。为了确认我们可以考到侦测的结果，让我们遍历这一组矩形并且将它们输出到终端在矩形周围显示边框。你可以通过调用 Rectangle 方法来实现。这个方法的入参有摄像头读取的 Mat，一个由 DetectMultiScale 方法返回的 Rectangle 对象，一个颜色和一个边框粗细。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> _, r := <span class="keyword">range</span> rects &#123;</span><br><span class="line">fmt.Println(“detected”, r)</span><br><span class="line">gocv.Rectangle(&amp;img, r, color, <span class="number">2</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后，让我们运行这个程序。</p><p><img src="https://img.zvz.im/imgs/2021/05/71175eb78a8f1ec4.png" alt=""></p><p><img src="https://img.zvz.im/imgs/2021/05/8c791ccc15c0ea43.png" alt=""></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;image/color&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;gocv.io/x/gocv&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">webcam, err := gocv.VideoCaptureDevice(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;error opening web cam: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> webcam.Close()</span><br><span class="line"></span><br><span class="line">img := gocv.NewMat()</span><br><span class="line"><span class="keyword">defer</span> img.Close()</span><br><span class="line"></span><br><span class="line">window := gocv.NewWindow(<span class="string">&quot;webcamwindow&quot;</span>)</span><br><span class="line"><span class="keyword">defer</span> window.Close()</span><br><span class="line"></span><br><span class="line">harrcascade := <span class="string">&quot;opencv_haarcascade_frontalface_default.xml&quot;</span></span><br><span class="line">classifier := gocv.NewCascadeClassifier()</span><br><span class="line">classifier.Load(harrcascade)</span><br><span class="line"><span class="keyword">defer</span> classifier.Close()</span><br><span class="line"></span><br><span class="line">color := color.RGBA&#123;<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>&#125;</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">if</span> ok := webcam.Read(&amp;img); !ok || img.Empty() &#123;</span><br><span class="line">log.Println(<span class="string">&quot;Unable to read from the device&quot;</span>)</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">rects := classifier.DetectMultiScale(img)</span><br><span class="line"><span class="keyword">for</span> _, r := <span class="keyword">range</span> rects &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;detected&quot;</span>, r)</span><br><span class="line">gocv.Rectangle(&amp;img, r, color, <span class="number">3</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">window.IMShow(img)</span><br><span class="line">window.WaitKey(<span class="number">50</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大功告成！我们有了一个 Go 编写的简单的面部探测器。我计划继续扩展这个系列并且使用 Go 和 OpenCV 构建更多的酷应用。请继续关注后续的文章。</p><p>翻译自：<a href="https://medium.com/@fonseka.live/detect-faces-using-golang-and-opencv-fbe7a48db055">Detect faces using Golang and OpenCV</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://img.zvz.im/imgs/2020/04/d055ce9a0a5c233c.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;OpenCV 是一个用于计算机视觉处理的代码库，面世已有 20 多年了。大学时期，我曾在个人的 C++ 和 Python项目中使用过它，因为这些编程语言对它有很好的支持。不过随着我开始学习并使用 Go 语言，我开始好奇 Go 语言能否使用 OpenCV。网上有一些关于如何使用 Go 语言调用 OpenCV 的例子和教程，但我发现它们都太过黑科技和复杂了。还好我发现了一个名为 &lt;a href=&quot;https://github.com/hybridgroup&quot;&gt;&lt;em&gt;hybridgroup&lt;/em&gt;&lt;/a&gt; 小组的伙计们写的封装库，它很容易使用，而且文档也很全。这里我要向你们展示如何使用 gocv ，并且创建一个简单的 Haar Cascades 面部探测器。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;准备工作&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Go&lt;/li&gt;
&lt;li&gt;OpenCV （下文附有安装链接）&lt;/li&gt;
&lt;li&gt;一个网络摄像头
    
    </summary>
    
    
      <category term="golang" scheme="http://log.zvz.im/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>日知其所无：修复 go get 私有仓库时返回的 410 错误</title>
    <link href="http://log.zvz.im/2021/01/30/go-get-private-repo-return-410/"/>
    <id>http://log.zvz.im/2021/01/30/go-get-private-repo-return-410/</id>
    <published>2021-01-30T22:17:59.000Z</published>
    <updated>2025-07-03T18:06:35.826Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img.zvz.im/imgs/2021/01/a36a3a4d605ce3a9.png" alt=""></p><p>今天原本应该是个好日子，令人兴致盎然的星期天，却被一件让我抓狂了一整个小时的事情毁掉了。其实，从前一晚开始（周六晚）我就被这件事难住了，不过我实在太累了，所以我决定暂停休息一下，周日才继续研究。</p><p>我一直投入时间在做 Marbar (<a href="https://mabar.id/">https://mabar.id</a>) 这个业余项目。目前它还处于 beta 版本状态，仍然缺少许多特性，你可以在 Android Play Store <a href="http://bit.ly/2mcWvv0">这里</a>下载体验一下。</p><p>我个人对与 Mabar 这个项目有很多的期待，它将会是在各种界面（手机，桌面，网页）上都能使用的一个平台。技术栈方面，我使用 Golang 作为后端语言，Kubernetes 作为基础设施，还有 Digital Ocean 提供的服务器。</p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>问题是这样的，我有一个私有模块（Golang 模块），是后端 API 引入的一个简单类库。但是无论如何，我都无法获取到这个依赖包，而且当我执行 <code>go get</code> 命令时总是会报错。<br><span id="more"></span><br>假设这个包的名称是 <code>lucifer</code>。它总是会在命令行中显示如下错误信息。太让我抓狂了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ go get -v bitbucket.org/compay/lucifer</span><br><span class="line">go: finding bitbucket.org/compay/lucifer latest</span><br><span class="line">go: downloading bitbucket.org/compay/lucifer v0.0.0-20190921175342-61a76c096369</span><br><span class="line">verifying bitbucket.org/compay/lucifer@v0.0.0-20190921175342-61a76c096369: bitbucket.org/compay/lucifer@v0.0.0-20190921175342-61a76c096369: reading https://sum.golang.org/lookup/bitbucket.org/compay/lucifer@v0.0.0-20190921175342-61a76c096369: 410 Gone</span><br></pre></td></tr></table></figure><p>如果你阅读一下这些信息，它在说这个包在 sum.golang.org 中已经不存在或者不可用了。</p><p>首先，我想到的是可能忘记对 bitbucket 强制使用 SSH 了，因为我之前有写过相关的问题：<a href="https://medium.com/easyread/today-i-learned-fix-go-get-private-repository-return-error-terminal-prompts-disabled-8c5549d89045">https://medium.com/easyread/today-i-learned-fix-go-get-private-repository-return-error-terminal-prompts-disabled-8c5549d89045</a></p><p>但是，它仍然无法工作。即使我强制它只许使用 SSH，当我使用 <code>go get</code> 命令它还是继续报错。</p><h2 id="根本原因"><a href="#根本原因" class="headerlink" title="根本原因"></a>根本原因</h2><p>然后我在互联网上搜索了这个问题后，我找到了真正的原因。这个问题只会出现在 Golang 版本 1.13 之后。在看过发布文档 <a href="https://golang.org/doc/go1.13#modules">https://golang.org/doc/go1.13#modules</a> 之后我更加确信了。</p><p>这个问题之所以会发生是因为这个版本的 Golang 有一个新的特性。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>实际上我们有几种可供选择的解决方案。</p><ul><li><p><strong>使用 GOPRIVATE</strong></p><p>如 Go 1.13 的发布文档所述：</p><blockquote><p><em>新的 GOPRIVATE 环境变量个用于指示非公开可见的模块路径。并且会作为底层 GONOPROXY 和 GONOSUMDB 变量的默认值，这两个变量则对于哪些模块通过代理获取并且校验 checksum 数据库提供更加细化的控制。</em></p></blockquote><p>也就是说，要解决上面的问题，我们只需在系统中设置 <code>GOPRIVATE</code> 变量。在 <code>~/.bashrc</code> 中加入这行指令。<em>请根据你的公司和组织名称调整命令内容</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> GOPRIVATE=<span class="string">&quot;gitlab.com/idmabar,bitbucket.org/idmabar,github.com/idmabar&quot;</span></span><br></pre></td></tr></table></figure><p>要确认它是否已经生效，你可以使用 <code>go env</code> 命令。命令回显如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">go <span class="built_in">env</span></span></span><br><span class="line">GO111MODULE=&quot;&quot;</span><br><span class="line">GOARCH=&quot;amd64&quot;</span><br><span class="line">GOBIN=&quot;&quot;</span><br><span class="line">GOCACHE=&quot;/Users/imantumorang/Library/Caches/go-build&quot;</span><br><span class="line">GOENV=&quot;/Users/imantumorang/Library/Application Support/go/env&quot;</span><br><span class="line">GOEXE=&quot;&quot;</span><br><span class="line">GOFLAGS=&quot;&quot;</span><br><span class="line">GOHOSTARCH=&quot;amd64&quot;</span><br><span class="line">GOHOSTOS=&quot;darwin&quot;</span><br><span class="line">GOOS=&quot;darwin&quot;</span><br><span class="line">GOPATH=&quot;/Users/imantumorang/go&quot;</span><br><span class="line">GOPRIVATE=&quot;gitlab.com/idmabar,bitbucket.org/idmabar,github.com/idmabar&quot;</span><br><span class="line">GOPROXY=&quot;https://proxy.golang.org,direct&quot;</span><br><span class="line">GOROOT=&quot;/usr/local/Cellar/go/1.13/libexec&quot;</span><br><span class="line">GOSUMDB=&quot;sum.golang.org&quot;</span><br><span class="line">GOTMPDIR=&quot;&quot;</span><br><span class="line">GOTOOLDIR=&quot;/usr/local/Cellar/go/1.13/libexec/pkg/tool/darwin_amd64&quot;</span><br><span class="line">GCCGO=&quot;gccgo&quot;</span><br><span class="line">AR=&quot;ar&quot;</span><br><span class="line">CC=&quot;clang&quot;</span><br><span class="line">CXX=&quot;clang++&quot;</span><br><span class="line">CGO_ENABLED=&quot;1&quot;</span><br><span class="line">GOMOD=&quot;&quot;</span><br><span class="line">CGO_CFLAGS=&quot;-g -O2&quot;</span><br><span class="line">CGO_CPPFLAGS=&quot;&quot;</span><br><span class="line">CGO_CXXFLAGS=&quot;-g -O2&quot;</span><br><span class="line">CGO_FFLAGS=&quot;-g -O2&quot;</span><br><span class="line">CGO_LDFLAGS=&quot;-g -O2&quot;</span><br></pre></td></tr></table></figure><p>现在我可以使用 <code>go get</code> 命令获取我的私有库了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">go get bitbucket.org/company/lucifer</span></span><br><span class="line">go: finding bitbucket.org/company/lucifer latest</span><br><span class="line">go: downloading bitbucket.org/company/lucifer v0.0.0-20190921175342-61a76c096369</span><br><span class="line">go: extracting bitbucket.org/company/lucifer v0.0.0-20190921175342-61a76c096369</span><br></pre></td></tr></table></figure><p>所以这个 <code>环境变量</code> 会告诉 <code>go get</code> 命令使用私有主机代理去获取代码包。</p></li><li><p>使用 GONOSUMDB</p><p>另一个解决方案是可以使用 <code>GONOSUMDB</code> 变量。我还没有试过，不过按这份提议所说应该是可行的 <a href="https://go.googlesource.com/proposal/+/master/design/25530-sumdb.md">https://go.googlesource.com/proposal/+/master/design/25530-sumdb.md</a></p><p>你可以这样设定你的环境变量：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export GONOSUMDB=&quot;gitlab.com/idmabar,bitbucket.org/idmabar,github.com/idmabar&quot;</span><br></pre></td></tr></table></figure><p>实际上这个问题只会发生在最新的 Golang 1.13 以及其后的版本。所以在升级你的 Golang 版本之前，请确认你设定了这个环境变量。</p><p>这里有一些与此问题相关的链接，多亏 <a href="https://stackoverflow.com/users/12052086/noveaustack">noveaustack</a> 发现这个问题并且发到了 Stackoverflow 上，我只是又发了一遍而已，因为我刚刚了解到这个问题并且使其成为了我的新知。</p></li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li>Stackoverflow 回答：<a href="https://stackoverflow.com/a/57887036/4075313">https://stackoverflow.com/a/57887036/4075313</a></li><li>go 模块的 Go Sum DB 提案：<a href="https://go.googlesource.com/proposal/+/master/design/25530-sumdb.md">https://go.googlesource.com/proposal/+/master/design/25530-sumdb.md</a></li><li>代理 Checksum DB：<a href="https://docs.gomods.io/configuration/sumdb/">https://docs.gomods.io/configuration/sumdb/</a></li><li>相关的 Github 事项：<a href="https://github.com/golang/go/issues/33985">#33985</a> 还有 <a href="https://github.com/golang/go/issues/32291">#32291</a></li></ul><p>翻译自：<a href="https://medium.com/mabar/today-i-learned-fix-go-get-private-repository-return-error-reading-sum-golang-org-lookup-93058a058dd8">Today I Learned — Fix: go get private repository return error reading sum.golang.org/lookup … 410 gone</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://img.zvz.im/imgs/2021/01/a36a3a4d605ce3a9.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;今天原本应该是个好日子，令人兴致盎然的星期天，却被一件让我抓狂了一整个小时的事情毁掉了。其实，从前一晚开始（周六晚）我就被这件事难住了，不过我实在太累了，所以我决定暂停休息一下，周日才继续研究。&lt;/p&gt;
&lt;p&gt;我一直投入时间在做 Marbar (&lt;a href=&quot;https://mabar.id/&quot;&gt;https://mabar.id&lt;/a&gt;) 这个业余项目。目前它还处于 beta 版本状态，仍然缺少许多特性，你可以在 Android Play Store &lt;a href=&quot;http://bit.ly/2mcWvv0&quot;&gt;这里&lt;/a&gt;下载体验一下。&lt;/p&gt;
&lt;p&gt;我个人对与 Mabar 这个项目有很多的期待，它将会是在各种界面（手机，桌面，网页）上都能使用的一个平台。技术栈方面，我使用 Golang 作为后端语言，Kubernetes 作为基础设施，还有 Digital Ocean 提供的服务器。&lt;/p&gt;
&lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;问题是这样的，我有一个私有模块（Golang 模块），是后端 API 引入的一个简单类库。但是无论如何，我都无法获取到这个依赖包，而且当我执行 &lt;code&gt;go get&lt;/code&gt; 命令时总是会报错。&lt;br&gt;
    
    </summary>
    
    
      <category term="golang" scheme="http://log.zvz.im/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>Go 语言中的 init 函数</title>
    <link href="http://log.zvz.im/2021/01/10/init-functions-in-go/"/>
    <id>http://log.zvz.im/2021/01/10/init-functions-in-go/</id>
    <published>2021-01-10T01:18:16.000Z</published>
    <updated>2025-07-03T18:06:35.827Z</updated>
    
    <content type="html"><![CDATA[<p>标识符 <code>main</code> 无所不在。每个 Go 程序的执行都是从 <code>main</code> 包中一个拥有相同名字的函数开始的。当这个 <code>main</code> 函数返回时，整个程序也退出了执行。<code>init</code> 函数也扮演着特定的角色，本文会描述它们的特性并介绍它们的使用方法。</p><p><code>init</code> 函数是定义在包级别的，它被用于：</p><ul><li>初始化无法使用表达式初始化的变量</li><li>检查和修复程序的状态</li><li>注册</li><li>执行一次性的运算</li><li>以及其它</li></ul><p>除了下面要介绍一些区别，你可以将任何在一般函数中有效的代码放在其中。</p><h2 id="包的初始化"><a href="#包的初始化" class="headerlink" title="包的初始化"></a>包的初始化</h2><p>要使用一个引入的包，首先它需要被初始化。这是由 Golang 的运行系统来完成的，由以下几步（顺序很重要）组成：</p><ol><li>初始化引入的包（递归释义）</li><li>计算并初始化赋值包级别的变量</li><li>执行包内的 <code>init</code> 方法</li></ol><blockquote><p><em>包的初始化过程只会被执行一次，即使它被多次引用</em><br><span id="more"></span></p></blockquote><h2 id="顺序"><a href="#顺序" class="headerlink" title="顺序"></a>顺序</h2><p>Go 语言的包可以包含许多文件。那么在这些包和文件中，变量的初始化和 <code>init</code> 函数的执行顺序是怎样的呢？首先，初始化依赖机制会起作用（详情可以查看<a href="https://medium.com/golangspec/initialization-dependencies-in-go-51ae7b53f24c">“Go 中的初始化依赖”</a>）。当依赖工作完成后，必须决定先初始化 <em>a.go</em> 文件中的变量还是 <em>z.go</em> 文件中的变量。这依赖于文件在编译器中出现的顺序。如果 <em>z.go</em> 先被提交给构建系统，那么它的变量就会先于 <em>a.go</em> 中的变量初始化。<code>init</code> 方法的调用也遵守相同的顺序。语言规格定义中建议总是采用相同的顺序，并且将包中的文件按单词拼写顺序传入：</p><blockquote><p>为了保证初始化行为可稳定复现，构建系统应该倾向于将同一个包中的多个文件按文件名的单词拼写顺序传递给编译器。</p></blockquote><p>不过对于移植性较差的程序来说也可以使用特别的顺序。我们用下面的例子看看这些是如何一起工作的：</p><p><strong>sandbox.go</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="keyword">var</span> _ <span class="type">int64</span> = s()</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;init in sandbox.go&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">s</span><span class="params">()</span></span> <span class="type">int64</span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;calling s() in sandbox.go&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;main&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>a.go</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="keyword">var</span> _ <span class="type">int64</span> = a()</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;init in a.go&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">a</span><span class="params">()</span></span> <span class="type">int64</span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;calling a() in a.go&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>z.go</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="keyword">var</span> _ <span class="type">int64</span> = z()</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;init in z.go&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">z</span><span class="params">()</span></span> <span class="type">int64</span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;calling z() in z.go&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序输出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">calling a() in a.go</span><br><span class="line">calling s() in sandbox.go</span><br><span class="line">calling z() in z.go</span><br><span class="line">init in a.go</span><br><span class="line">init in sandbox.go</span><br><span class="line">init in z.go</span><br><span class="line">main</span><br></pre></td></tr></table></figure><h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><p><code>init</code> 函数不接受任何参数，也没有返回值。于 <code>main</code> 相比，标识符 <code>init</code> 是没有被申明的，所以无法被引用：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;init&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    init()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译时它会输出 “undefined: init” 错误。</p><blockquote><p>正式地来讲，<em>init</em> 标识符不会引入任何绑定关系。与此相同的还有，下划线表示的空白标识符。</p></blockquote><p>同一个包或文件中可以定义许多的 <em>init</em> 函数：</p><p><strong>sandbox.go</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;init 1&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;init 2&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;main&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>utils.go</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;init 3&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">init 1</span><br><span class="line">init 2</span><br><span class="line">init 3</span><br><span class="line">main</span><br></pre></td></tr></table></figure><blockquote><p>init 函数在标准库中被频繁地使用，比如：在<a href="https://github.com/golang/go/blob/2878cf14f3bb4c097771e50a481fec43962d7401/src/math/pow10.go#L33">math</a>，<a href="https://github.com/golang/go/blob/2878cf14f3bb4c097771e50a481fec43962d7401/src/compress/bzip2/bzip2.go#L479">bzip2</a> 和 <a href="https://github.com/golang/go/blob/2d573eee8ae532a3720ef4efbff9c8f42b6e8217/src/image/gif/reader.go#L511">image</a> 这些包里。</p></blockquote><p><em>init</em> 函数最常见的使用场景就是赋值无法用初始化表达式计算得出的情况：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> precomputed = [<span class="number">20</span>]<span class="type">float64</span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> current <span class="type">float64</span> = <span class="number">1</span></span><br><span class="line">    precomputed[<span class="number">0</span>] = current</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">1</span>; i &lt; <span class="built_in">len</span>(precomputed); i++ &#123;</span><br><span class="line">        precomputed[i] = precomputed[i<span class="number">-1</span>] * <span class="number">1.2</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>for</em> 循环无法用作<a href="https://golang.org/ref/spec#Expression">表达式</a>，所以将其放入 <em>init</em> 函数中可以解决这个问题。</p><h2 id="为副作用而引入包"><a href="#为副作用而引入包" class="headerlink" title="为副作用而引入包"></a>为副作用而引入包</h2><p>Go 对于未使用的包引入非常严格。有时候程序员引入一个包可能只是为了执行其中的 <em>init</em> 函数进行初始化工作。空白标识符这时候就派上用场了：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> _ <span class="string">&quot;image/png&quot;</span></span><br></pre></td></tr></table></figure><p>这在 <a href="https://github.com/golang/go/blob/0104a31b8fbcbe52728a08867b26415d282c35d2/src/image/image.go#L10">image</a> 包的评论中都有被提到。</p><p>如果上面介绍的这些内容有帮助到你，请关注我的博客以获取最新的更新，同时也可以提升我的积极性。</p><p>翻译自：<a href="https://medium.com/golangspec/init-functions-in-go-eac191b3860a">init functions in Go</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;标识符 &lt;code&gt;main&lt;/code&gt; 无所不在。每个 Go 程序的执行都是从 &lt;code&gt;main&lt;/code&gt; 包中一个拥有相同名字的函数开始的。当这个 &lt;code&gt;main&lt;/code&gt; 函数返回时，整个程序也退出了执行。&lt;code&gt;init&lt;/code&gt; 函数也扮演着特定的角色，本文会描述它们的特性并介绍它们的使用方法。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;init&lt;/code&gt; 函数是定义在包级别的，它被用于：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;初始化无法使用表达式初始化的变量&lt;/li&gt;
&lt;li&gt;检查和修复程序的状态&lt;/li&gt;
&lt;li&gt;注册&lt;/li&gt;
&lt;li&gt;执行一次性的运算&lt;/li&gt;
&lt;li&gt;以及其它&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;除了下面要介绍一些区别，你可以将任何在一般函数中有效的代码放在其中。&lt;/p&gt;
&lt;h2 id=&quot;包的初始化&quot;&gt;&lt;a href=&quot;#包的初始化&quot; class=&quot;headerlink&quot; title=&quot;包的初始化&quot;&gt;&lt;/a&gt;包的初始化&lt;/h2&gt;&lt;p&gt;要使用一个引入的包，首先它需要被初始化。这是由 Golang 的运行系统来完成的，由以下几步（顺序很重要）组成：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;初始化引入的包（递归释义）&lt;/li&gt;
&lt;li&gt;计算并初始化赋值包级别的变量&lt;/li&gt;
&lt;li&gt;执行包内的 &lt;code&gt;init&lt;/code&gt; 方法&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;包的初始化过程只会被执行一次，即使它被多次引用&lt;/em&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="golang" scheme="http://log.zvz.im/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>Go:ent，基于图的 ORM 框架 - Facebook 出品</title>
    <link href="http://log.zvz.im/2020/06/21/go-ent-graph-based-orm/"/>
    <id>http://log.zvz.im/2020/06/21/go-ent-graph-based-orm/</id>
    <published>2020-06-21T23:57:22.000Z</published>
    <updated>2025-07-03T18:06:35.826Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img.zvz.im/imgs/2020/06/85d574b9bcb0a790.png" alt=""></p><p>:information_source: <em>本文基于处于开发中的项目的主分支</em></p><p><code>ent</code> 是由 <a href="https://connectivity.fb.com/">Facebook Connectivity</a> 团队创建的 ORM 框架。迫于 Go 社区中缺少能够像图一样查询数据的工具，同时也缺少 100% 类型安全的 ORM，<code>ent</code> <a href="https://entgo.io/blog/#the-motivation-for-writing-a-new-orm-in-go">就是被设计出来解决这些问题的</a>。<br><span id="more"></span></p><h2 id="图的概念"><a href="#图的概念" class="headerlink" title="图的概念"></a>图的概念</h2><p><code>ent</code> 用一组实体和边线来表达图的概念，并且没有任何限制。我们使用代码库中现成的例子进行说明：</p><p><img src="https://img.zvz.im/imgs/2020/06/0b1995b25318a023.png" alt=""></p><p>此例子中，有三个实体对象，<code>Group</code> ，<code>User</code> ，<code>Pet</code> ，它们相互关联在一起，可以用多种方式遍历。这个图可以利用项目中的 <code>entc</code> 工具来描述，使用命令 <code>entc describe</code> ：</p><p><img src="https://img.zvz.im/imgs/2020/06/aedee6eb2dbe9289.png" alt=""></p><p>实体之间的关系由边线表示，它们在内部被转换为字段，表和外键。这里是在 MySQL 中转换成的数据库图表：</p><p><img src="https://img.zvz.im/imgs/2020/06/1d8e45619c1eb5ef.png" alt=""></p><p>传统的 ORM 框架把每个关系显示地申明在实体上，与此不同，<code>ent</code> 只暴露了实体的属性和一个用于遍历这些实体边线的方法。</p><h2 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h2><p>这个项目提供了优秀的文档和各种不同 ORM 查询和使用的例子。让我们来看一个涉及所有实体的查询例子：</p><p><em>从<strong>管理员</strong>用户的朋友中，我们想要获得他们的宠物的朋友的主人</em>。</p><p>以下是这个查询的示意图：</p><p><img src="https://img.zvz.im/imgs/2020/06/e7be54884261b2e8.png" alt=""></p><p>例子中建议的查询是可自我描述的：</p><p><img src="https://img.zvz.im/imgs/2020/06/523d81b91c4b287e.png" alt=""></p><p>如上一段所示，每个实体都暴露了方法用来顺着它们的边线进行查询：<code>Group</code> 通过 <code>QueryAdmin()</code> 方法暴露了 <code>admin</code> 边线，它自己又通过 <code>QueryFriends()</code> 暴露了它的 <code>friends</code> 边线，等等。代码生成是用来创建这些方法的核心工具。</p><h2 id="代码生成"><a href="#代码生成" class="headerlink" title="代码生成"></a>代码生成</h2><p>通过 <code>entc</code> 命令可以进行代码生成，它是项目的核心部件而且它使这个项目更加强大。模板引擎是代码生成的基础，它允许开发者修改查询语句，并依照他们的需求暴露各种方法，使得 ORM 足够灵活能够任意地定制。</p><p>默认的实体模板会提供所有的文件和方法用于创建、更新、删除和遍历查询每个实体对象以及它们的关系边。无论如何，在代码生成中一切都是模板。你可以制定它与数据库的交流方式，数据迁移等等。</p><p>这个项目还提供了一个实现了 GraphQL <a href="https://facebook.github.io/relay/graphql/objectidentification.htm#sec-Node-Interface"> <code>Node</code> 接口</a>的模板示例。生成的代码使得我们的实体对象都能兼容这个接口：</p><p><img src="https://img.zvz.im/imgs/2020/06/5f78378a3b0e63a2.png" alt=""></p><p>模板系统能生成完美契合你的项目的代码。</p><h2 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h2><p>现在来到有趣的部分了，看看底层的查询是如何构建的。这里以 MySQL 为例，上例中生成的查询如下：</p><p><img src="https://img.zvz.im/imgs/2020/06/5ca7c6e0b64b64c4.png" alt=""></p><p>这个 ORM 使用嵌套查询来实现无限制地遍历查询。不过使用 join 查询也是可行的。这是与嵌套查询等效的使用 join 的查询：</p><p><img src="https://img.zvz.im/imgs/2020/06/cb0b33f8e0554d78.png" alt=""></p><p>虽然嵌套的查询更容易读，由于是一层层的 select 语句嵌套出来的，大多数情况下，<a href="https://dev.mysql.com/doc/refman/5.7/en/rewriting-subqueries.html">join 语句执行更快</a>。不过，在这个案例中，由于 ORM 遍历数据使用的边线是相关的索引，服务器生成的查询计划是一样的：</p><p><img src="https://img.zvz.im/imgs/2020/06/0b0b1ba8d0a653f6.png" alt="plan for the subqueries"></p><center><small>plan for the subqueries</small></center><p><img src="https://img.zvz.im/imgs/2020/06/e987261aedfa0a0a.png" alt="plan for the join"></p><center><small>plan for the join</small></center><p>这个 ORM 框架还支持更复杂的查询通过图来查询节点，比如：</p><p><em>我们想要获得所有的宠物，它们的朋友的主人是 <code>admin</code> 成员组的朋友</em>。</p><p>这个查询的 SQL 写起来非常难。使用常规的 ORM 框架几乎是个不可能完成的任务，不过用 <code>ent</code> 写起来却非常简单：</p><p><img src="https://img.zvz.im/imgs/2020/06/35c48fae4fe6da94.png" alt=""></p><p>而且， <code>ent</code> 不需要像传统 ORM 框架一样对多个领域的多个节点进行聚合，所以性能总会不错。对查询做一个快速的跑分，可以看出代码包增加了多少额外的工作：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">name        <span class="keyword">time</span>/op</span><br><span class="line">Traverse-8   179µs ± 5%</span><br><span class="line"></span><br><span class="line">name        alloc/op</span><br><span class="line">Traverse-8  21.4kB ± 0%</span><br><span class="line"></span><br><span class="line">name        allocs/op</span><br><span class="line">Traverse-8     414 ± 0%</span><br></pre></td></tr></table></figure><p>现在，我们不对数据库进行实际查询，再跑一遍：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name        <span class="keyword">time</span>/op</span><br><span class="line">Traverse-8  64.4µs ± 1%</span><br></pre></td></tr></table></figure><p> 数据库查询本身占用了前一个跑分的大部分时间。项目本身引入的延迟很低，这保证了它会有一个优秀的前景。想要知道更多的开发细节，此项目已经<a href="https://github.com/facebookincubator/ent/issues/46">在 Github 放出了线路图</a>。</p><blockquote><p>翻译自：<a href="https://medium.com/a-journey-with-go/go-ent-graph-based-orm-by-facebook-d9ba6d2290c6">Go: ent, Graph-Based ORM by Facebook</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://img.zvz.im/imgs/2020/06/85d574b9bcb0a790.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;:information_source: &lt;em&gt;本文基于处于开发中的项目的主分支&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ent&lt;/code&gt; 是由 &lt;a href=&quot;https://connectivity.fb.com/&quot;&gt;Facebook Connectivity&lt;/a&gt; 团队创建的 ORM 框架。迫于 Go 社区中缺少能够像图一样查询数据的工具，同时也缺少 100% 类型安全的 ORM，&lt;code&gt;ent&lt;/code&gt; &lt;a href=&quot;https://entgo.io/blog/#the-motivation-for-writing-a-new-orm-in-go&quot;&gt;就是被设计出来解决这些问题的&lt;/a&gt;。&lt;br&gt;
    
    </summary>
    
    
      <category term="golang" scheme="http://log.zvz.im/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>Go：Goroutine 的抢占机制</title>
    <link href="http://log.zvz.im/2020/03/11/go-goroutine-and-preemption/"/>
    <id>http://log.zvz.im/2020/03/11/go-goroutine-and-preemption/</id>
    <published>2020-03-11T01:16:02.000Z</published>
    <updated>2025-07-03T18:06:35.826Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img.zvz.im/imgs/2020/03/f1eb2d0c781c6429.png" alt=""></p><p>ℹ︎<em>本文内容基于 Go 1.13 版本。</em></p><p>Go 语言利用内部的调度器管理 goroutine。这个调度器致力于对 goroutine 进行切换，确保它们都能够获得执行时间。不过，调度器有时会抢占这些 goroutine 的运行时间以保证正确的轮换。</p><span id="more"></span><h2 id="调度器和抢占机制"><a href="#调度器和抢占机制" class="headerlink" title="调度器和抢占机制"></a>调度器和抢占机制</h2><p>让我们使用一个简单的例子来说明调度器是如何工作的：<em>为了便于阅读，这些例子不会使用原子操作</em>。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   <span class="keyword">var</span> total <span class="type">int</span></span><br><span class="line">   <span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line"></span><br><span class="line">   <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">      wg.Add(<span class="number">1</span>)</span><br><span class="line">      <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">         <span class="keyword">for</span> j := <span class="number">0</span>; j &lt; <span class="number">1000</span>; j++ &#123;</span><br><span class="line">            total += readNumber()</span><br><span class="line">         &#125;</span><br><span class="line">         wg.Done()</span><br><span class="line">      &#125;()</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   wg.Wait()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//go:noinline</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">readNumber</span><span class="params">()</span></span> <span class="type">int</span> &#123;</span><br><span class="line">   <span class="keyword">return</span> rand.Intn(<span class="number">10</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是追踪信息（tracing）：</p><p><img src="https://img.zvz.im/imgs/2020/03/c99454113005d9e4.png" alt=""></p><p>我们可以清楚地观察到调度器控制 goroutine 在处理器上进行轮换，对它们全部给予相应的执行时间。当 goroutine 由于系统调用，channel 阻塞，睡眠，等待互斥量等操作而停止时，Go 会对其进行调度。在上一个例子中，调度器利用了数字生成器中的互斥量，从而给所有 goroutine 执行时间。在追踪信息中也是可以看到的：</p><p><img src="https://img.zvz.im/imgs/2020/03/2642990de8ce33d0.png" alt=""></p><p>不过，如果 goroutine 自身没有任何的停滞，Go 还是需要有办法停止正在运行的 goroutine。这种行为被称作抢占（preemption），它允许调度器对 goroutine 的执行进行切换。任何执行时间超过 10 毫秒的 goroutine 会被标记为可抢占。而后，抢占行为会发生在函数调用的开始阶段，goroutine 调用栈增加的时候。</p><p>让我们来看一个例子，它与上个例子的区别在于去除了数字生成器中的锁：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   <span class="keyword">var</span> total <span class="type">int</span></span><br><span class="line">   <span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line"></span><br><span class="line">   <span class="keyword">for</span> i := gen(<span class="number">0</span>); i &lt; <span class="number">20</span>; i++ &#123;</span><br><span class="line">      wg.Add(<span class="number">1</span>)</span><br><span class="line">      <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(g gen)</span></span> &#123;</span><br><span class="line">         <span class="keyword">for</span> j := <span class="number">0</span>; j &lt; <span class="number">1e7</span>; j++ &#123;</span><br><span class="line">            total += g.readNumber()</span><br><span class="line">         &#125;</span><br><span class="line">         wg.Done()</span><br><span class="line">      &#125;(i)</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   wg.Wait()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> generators [<span class="number">20</span>]*rand.Rand</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">   <span class="keyword">for</span> i := <span class="type">int64</span>(<span class="number">0</span>); i &lt; <span class="number">20</span>; i++  &#123;</span><br><span class="line">      generators[i] = rand.New(rand.NewSource(i).(rand.Source64))</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> gen <span class="type">int</span></span><br><span class="line"><span class="comment">//go:noinline</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(g gen)</span></span> readNumber() <span class="type">int</span> &#123;</span><br><span class="line">   <span class="keyword">return</span> generators[<span class="type">int</span>(g)].Intn(<span class="number">10</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里是追踪信息：</p><p><img src="https://img.zvz.im/imgs/2020/03/99b3bfeed8081050.png" alt=""></p><p>而且，goroutine 是在函数调用开始阶段被抢占的：</p><p><img src="https://img.zvz.im/imgs/2020/03/07e3cba823a8e131.png" alt=""></p><p>这个检查过程是由编译器自动加入的；这里有一段上例生成的汇编代码：</p><p><img src="https://img.zvz.im/imgs/2020/03/eb10dd47a8eb65ed.png" alt=""></p><p>通过将指令插入在每个函数执行前，这个 runtime 调用确保栈可以增加。同时使得调度器在必要时可以运行。</p><p>绝大多数情况下，goroutine 都会给调度器对它们进行调度的能力。但是，一个没有函数调用的循环却可以阻塞调度。</p><h2 id="强制抢占"><a href="#强制抢占" class="headerlink" title="强制抢占"></a>强制抢占</h2><p>我们从一个简单的例子开始展示一个循环是如何阻塞调度过程的：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   <span class="keyword">var</span> total <span class="type">int</span></span><br><span class="line">   <span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line"></span><br><span class="line">   <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">20</span>; i++ &#123;</span><br><span class="line">      wg.Add(<span class="number">1</span>)</span><br><span class="line">      <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">         <span class="keyword">for</span> j := <span class="number">0</span>; j &lt; <span class="number">1e6</span>; j++ &#123;</span><br><span class="line">            total ++</span><br><span class="line">         &#125;</span><br><span class="line">         wg.Done()</span><br><span class="line">      &#125;()</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   wg.Wait()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于没有调用函数，所以这些 goroutine 永远不会被阻塞，调度器也无法进行抢占。我们在追踪信息中可以看到：</p><p><img src="https://img.zvz.im/imgs/2020/03/069ad543fdbb429e.png" alt=""></p><center><small>Goroutine 无法被抢占</small></center><p>不过，Go 语言提供了几种解决方案来修复此问题：</p><ul><li>使用 <code>runtime.Gosched()</code> 强制调度器执行</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> j := <span class="number">0</span>; j &lt; <span class="number">1e8</span>; j++ &#123;</span><br><span class="line">   <span class="keyword">if</span> j % <span class="number">1e7</span> == <span class="number">0</span> &#123;</span><br><span class="line">      runtime.Gosched()</span><br><span class="line">   &#125;</span><br><span class="line">   total ++</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新的追踪信息如下：</p><p><img src="https://img.zvz.im/imgs/2020/03/5da58bc015fec606.png" alt=""></p><ul><li>使用实验特性让循环可以被抢占。要启用这个特性，可以使用指令 <code>GOEXPERIMENT=preemptibleloops</code> 重新编译 Go 工具链，或者在 <code>go build</code> 时增加参数 <code>-gcflags -d=ssa/insert_resched_checks/on</code> 。这次就无需修改代码；以下是新的追踪信息：</li></ul><p><img src="https://img.zvz.im/imgs/2020/03/10c5c18af9634270.png" alt=""></p><p>当循环中的抢占被启用时，编译器会在生成 SSA 代码时加入一段过程。</p><p><img src="https://img.zvz.im/imgs/2020/03/ea0c3522f02f71c9.png" alt=""></p><p>这一段过程会添加一些指令时不时地调用一下调度器：</p><p><img src="https://img.zvz.im/imgs/2020/03/7e2c3bd1d9bead3c.png" alt=""></p><p><em>想要了解更多关于 Go 编译器的内容，我建议你阅读我的文章「Go: 编译器概览」。</em></p><p>然而，这种方式会降低一点代码的执行速度，因为它强制调用调度器的次数，可能比实际需要的更多。这里有两个版本的跑分比较：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name    old time/op  new time/op  delta</span><br><span class="line">Loop-8   2.18s ± 2%   2.05s ± 1%  -6.23%</span><br></pre></td></tr></table></figure><h2 id="即将到来的改进"><a href="#即将到来的改进" class="headerlink" title="即将到来的改进"></a>即将到来的改进</h2><p>到目前为止，调度器采用的是可以覆盖绝大多数情况的合作式抢占技术。不过，在某些特殊的场景下，它可能成为一个痛点。一个关于「非合作式抢占」的新提案已经提交，它着眼于解决文档中说明的此类问题：</p><blockquote><p>我提议将 Go 的实现切换为非合作式抢占，它应该允许 goroutine 大体上在任意执行点可以被抢占，而不需要显示地进行抢占检查。这种方式可以解决抢占延迟的问题而且不占用运行时开支。</p></blockquote><p>这份文档给出了几种建议的优缺点，并且可能会在下个版本的 Go 中落地。</p><p>翻译自：<a href="https://medium.com/a-journey-with-go/go-goroutine-and-preemption-d6bc2aa2f4b7">Go: Goroutine and Preemption</a></p><blockquote><p>译者注：Go 1.14 版本目前已经改变了 goroutine 的抢占方式。具体可参考 <a href="https://golang.org/doc/go1.14#runtime">Go 1.14 Release Notes</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://img.zvz.im/imgs/2020/03/f1eb2d0c781c6429.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;ℹ︎&lt;em&gt;本文内容基于 Go 1.13 版本。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Go 语言利用内部的调度器管理 goroutine。这个调度器致力于对 goroutine 进行切换，确保它们都能够获得执行时间。不过，调度器有时会抢占这些 goroutine 的运行时间以保证正确的轮换。&lt;/p&gt;
    
    </summary>
    
    
      <category term="golang" scheme="http://log.zvz.im/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>Go 项目最常见的 10 种错误</title>
    <link href="http://log.zvz.im/2019/11/09/top-10-golang-mistakes/"/>
    <id>http://log.zvz.im/2019/11/09/top-10-golang-mistakes/</id>
    <published>2019-11-09T16:59:25.000Z</published>
    <updated>2025-07-03T18:06:35.828Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img.zvz.im/imgs/2019/10/19578038f26ae531.jpg" alt=""></p><p>本文是我总结的 golang 项目中最常见的十种错误。排名不分先后。</p><h2 id="未知状态的枚举值"><a href="#未知状态的枚举值" class="headerlink" title="未知状态的枚举值"></a>未知状态的枚举值</h2><p>我们来看一个简单的例子：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Status <span class="type">uint32</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">StatusOpen Status = <span class="literal">iota</span></span><br><span class="line">StatusClosed</span><br><span class="line">StatusUnknown</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>在这里我们使用 <code>iota</code>  创建了一个枚举列表，结果状态如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">StatusOpen = <span class="number">0</span></span><br><span class="line">StatusClosed = <span class="number">1</span></span><br><span class="line">StatusUnknown = <span class="number">2</span></span><br></pre></td></tr></table></figure><p>现在，假设这个 <code>Status</code> 类型是 JSON 请求数据中的一部分，并且会被用于编码解码。我们可以设计一个结构，如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Request <span class="keyword">struct</span> &#123;</span><br><span class="line">ID        <span class="type">int</span>    <span class="string">`json:&quot;Id&quot;`</span></span><br><span class="line">Timestamp <span class="type">int</span>    <span class="string">`json:&quot;Timestamp&quot;`</span></span><br><span class="line">Status    Status <span class="string">`json:&quot;Status&quot;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><span id="more"></span><p>然后，接收到这样的请求数据：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;Id&quot;</span><span class="punctuation">:</span> <span class="number">1234</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;Timestamp&quot;</span><span class="punctuation">:</span> <span class="number">1563362390</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;Status&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>这儿没有什么特别的，状态字段会被解码为 <code>StatusOpen</code>，没错吧？但是，当我们使用另一个没有设置状态值的请求（无论是什么原因造成的）：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;Id&quot;</span><span class="punctuation">:</span> <span class="number">1235</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;Timestamp&quot;</span><span class="punctuation">:</span> <span class="number">1563362390</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>这种情况下，<code>Request</code> 结构体的 <code>Status</code> 字段会被初始化为<strong>零值</strong>（<code>uint32</code> 类型：0）。所以，它的值会是 <code>StatusOpen</code> 而不是 <code>StatusUnknown</code>。</p><p>最好的办法是将一个枚举的未知状态值设为 0：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Status <span class="type">uint32</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">StatusUnknown Status = <span class="literal">iota</span></span><br><span class="line">StatusOpen</span><br><span class="line">StatusClosed</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>这样一来，当 JSON 请求的缺少状态字段的时候，它就会像我们所预期地那样初始化为 <code>StatusUnknown</code> 。</p><h2 id="性能测试"><a href="#性能测试" class="headerlink" title="性能测试"></a>性能测试</h2><p>想要准确地进行性能测试是很困难的。有许多因素能影响到测试的结果。</p><p>一个常见的错误是你会被某些编译器优化所愚弄。我们看一个来自于 <a href="https://github.com/teivah/bitvector/"><em>teivah/bitvector</em></a> 库中的实际例子：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">clear</span><span class="params">(n <span class="type">uint64</span>, i, j <span class="type">uint8</span>)</span></span> <span class="type">uint64</span> &#123;</span><br><span class="line"><span class="keyword">return</span> (math.MaxUint64&lt;&lt;j | ((<span class="number">1</span> &lt;&lt; i) - <span class="number">1</span>)) &amp; n</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此方法将指定范围的二进制位进行清除。要测试它的性能，我们也许会这样做：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkWrong</span><span class="params">(b *testing.B)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; b.N; i++ &#123;</span><br><span class="line">clear(<span class="number">1221892080809121</span>, <span class="number">10</span>, <span class="number">63</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个测试中，编译器会注意到 <code>clear</code> 是一个叶子方法（没有调用任何其它的方法），所以会对它进行内联编译。它被内联编译后，编译器会注意到这段代码没有任何<strong>副作用</strong>（side-effects）。所以 <code>clear</code> 的调用过程会被简单地移除掉，最终导致结果不正确。</p><p>一个可行的方法是将计算结果赋值给一个全局变量：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result <span class="type">uint64</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkCorrect</span><span class="params">(b *testing.B)</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> r <span class="type">uint64</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; b.N; i++ &#123;</span><br><span class="line">r = clear(<span class="number">1221892080809121</span>, <span class="number">10</span>, <span class="number">63</span>)</span><br><span class="line">&#125;</span><br><span class="line">result = r</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样，编译器就无法知道该方法调用是否会产生副作用了。因此，这个基准测试就变得准确了。</p><h2 id="指针！到处乱用指针！"><a href="#指针！到处乱用指针！" class="headerlink" title="指针！到处乱用指针！"></a>指针！到处乱用指针！</h2><p>变量以值传递时会产生这个变量的拷贝，而通过指针传递时只会拷贝内存地址。</p><p>所以，指针传递总是<strong>更快</strong>一些，不是嘛？</p><p>如果你是这样认为的，那么请看一下<a href="https://gist.github.com/teivah/a32a8e9039314a48f03538f3f9535537">这个例子</a>。这是一个使用了 0.3KB 大小的数据结构，进行指针传递和值传递比较的性能测试。0.3KB 并不大，和我们（大多数人）日常见到的数据结构的大小差不多。</p><p>我在本地环境运行这些性能测试时，值传递竟然比指针传递<strong>快 4 倍</strong>。这真的有些反印象流，不是吗？</p><p>对这种结果的解释是，它与 Go 的内存管理相关。我没法像 <a href="https://www.ardanlabs.com/blog/2017/05/language-mechanics-on-stacks-and-pointers.html">William Kennedy</a> 解释得那样清楚，不过还是尽量总结一下。</p><p>一个变量可能被分配在<strong>堆</strong>上或者<strong>栈</strong>上。粗略的说明如下：</p><ul><li>栈内保存着 <strong>goroutine</strong> 中<strong>生存着</strong>的变量。一旦方法返回，这些变量就会被从栈中抛弃。</li><li>堆里保存着<strong>共享的</strong>变量（比如， 全局变量）</li></ul><p>我们来看一个简单的例子，它会返回一个值：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getFooValue</span><span class="params">()</span></span> foo &#123;</span><br><span class="line"><span class="keyword">var</span> result foo</span><br><span class="line"><span class="comment">// Do something</span></span><br><span class="line"><span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码中，一个 <code>result</code> 变量由当前的 goroutine 创建。这个变量被放入当前栈内。一旦方法返回，调用者会接收到这个变量的拷贝。而这个变量自身则会被从栈内抛出。它仍然存在于内存中，直到它被别的变量抹除，同时它是<strong>无法访问</strong>的。</p><p>然后，同样的例子返回一个指针：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getFooPointer</span><span class="params">()</span></span> *foo &#123;</span><br><span class="line"><span class="keyword">var</span> result foo</span><br><span class="line"><span class="comment">// Do something</span></span><br><span class="line"><span class="keyword">return</span> &amp;result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个 <code>result</code> 变量仍然由当前的 goroutine 创建，不过调用者会接收到一个指针（变量地址的拷贝）。假如 <code>result</code> 变量被从栈内抛出，那么方法调用者也将<strong>无法访问</strong>到它了。</p><p>在这种场景下，Go 编译器会让 <code>result</code> 变量<strong>逃逸（escape）</strong>到一个存放共享变量的地方：<strong>堆</strong>。</p><p>传递指针参数，则是另一个场景了。比如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>  &#123;</span><br><span class="line">p := &amp;foo&#123;&#125;</span><br><span class="line">f(p)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于我们在同一个 goroutine 中调用 <code>f</code> 方法，所以变量 <code>p</code> 不需要逃逸。只需简单地将它压入栈中，子方法就能够访问到。</p><p>比如，这直接导致 <code>io.Reader</code> 接口的 <code>Read</code> 方法被设计成接收一个 slice 参数而不是返回一个 slice。返回一个 slice（slice 是指针类型）会使它被转移到堆中去。</p><p>为什么栈的访问速度<strong>快</strong>呢？主要有两个原因：</p><ul><li>栈不需要<strong>垃圾回收器</strong>。正如之前所述，变量在创建时入栈，方法返回时出栈。没有必要实现一个复杂流程来回收未使用的变量等等。</li><li>每个 goroutine 都有一个栈，所以在栈内存放变量和堆内不同，不需要<strong>同步</strong>机制。这也会使得效率提升。</li></ul><p>总结一下，当我们构建方法时，我们应该默认使用<strong>使用值而不是指针</strong>。指针应当只在我们需要<strong>共享</strong>变量时使用。</p><p>所以，假如我们遇到了性能问题，一个可能的优化方案就是检查某些场景下是否该使用指针。如果想要知道编译器何时将变量转移到堆中，我们可以使用指令：<code>go build -gcflags &quot;-m -m&quot;</code> 。</p><p>再强调一下，对于日常使用的大多数场景，传值是最好的选择。</p><h2 id="跳出-for-switch-或-for-select-嵌套"><a href="#跳出-for-switch-或-for-select-嵌套" class="headerlink" title="跳出 for/switch 或 for/select 嵌套"></a>跳出 for/switch 或 for/select 嵌套</h2><p>下面例子中的 <code>f</code> 如果返回 true 会发生什么呢？</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">  <span class="keyword">switch</span> f() &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="literal">true</span>:</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">  <span class="keyword">case</span> <span class="literal">false</span>:</span><br><span class="line">    <span class="comment">// Do something</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们会调用 <code>break</code> 语句。不过，它会从 <code>switch</code>  语句中跳出，而<strong>不是 for 循环</strong>。</p><p>类似的情况：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">  <span class="keyword">select</span> &#123;</span><br><span class="line">  <span class="keyword">case</span> &lt;-ch:</span><br><span class="line">  <span class="comment">// Do something</span></span><br><span class="line">  <span class="keyword">case</span> &lt;-ctx.Done():</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>break</code> 语句与 <code>select</code> 控制相关，而不是 for 循环。</p><p>一种办法是使用<strong>带标签的 break</strong> 从 for/switch 或者 for/select 嵌套中跳出：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">loop:</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> &lt;-ch:</span><br><span class="line"><span class="comment">// Do something</span></span><br><span class="line"><span class="keyword">case</span> &lt;-ctx.Done():</span><br><span class="line"><span class="keyword">break</span> loop</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="错误管理"><a href="#错误管理" class="headerlink" title="错误管理"></a>错误管理</h2><p>Go 语言还在不断发展之中，目前对于错误的处理方式还稍显稚嫩。不出意外的话，错误管理会是 Go 2 版本中最受期待的特性。</p><p>当前版本（Go 1.13 之前）的标准库只提供了一些错误的创建方法，你可以看看 <a href="https://github.com/pkg/errors">_pkg/errors</a> 包。</p><p>遵守以下经验法则使用该库是一个比较好的方式，但并非总是如此：</p><blockquote><p>一个错误应当只进行<strong>一次</strong>处理。记录错误日志<strong>也是</strong>对错误的一种处理。所以一个错误<strong>只能</strong>被记录<strong>或者</strong>抛出。</p></blockquote><p>使用当前版本的标准库，很难遵守上面的准则，因为我们会想给一个错误增加一些上下文信息，从而形成某种形式的继承关系。</p><p>让我们举一个例子，在一次 REST 请求产生 DB 报错时，可能希望有如下返回：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">unable to serve HTTP POST request for customer 1234</span><br><span class="line"> |_ unable to insert customer contract abcd</span><br><span class="line">     |_ unable to commit transaction</span><br></pre></td></tr></table></figure><p>我们使用 <em>pkg/errors</em> 库时可能会这样做：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">postHandler</span><span class="params">(customer Customer)</span></span> Status &#123;</span><br><span class="line">err := insert(customer.Contract)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.WithError(err).Errorf(<span class="string">&quot;unable to serve HTTP POST request for customer %s&quot;</span>, customer.ID)</span><br><span class="line"><span class="keyword">return</span> Status&#123;ok: <span class="literal">false</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> Status&#123;ok: <span class="literal">true</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">insert</span><span class="params">(contract Contract)</span></span> <span class="type">error</span> &#123;</span><br><span class="line">err := dbQuery(contract)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> errors.Wrapf(err, <span class="string">&quot;unable to insert customer contract %s&quot;</span>, contract.ID)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">dbQuery</span><span class="params">(contract Contract)</span></span> <span class="type">error</span> &#123;</span><br><span class="line"><span class="comment">// Do something then fail</span></span><br><span class="line"><span class="keyword">return</span> errors.New(<span class="string">&quot;unable to commit transaction&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>初始的错误（如果不是由外部库返回的）可能是用 <code>errors.New</code> 创建的。中间一层，<code>insert</code> ，对这个错误加入了更多的上下文信息。随后，上一层处理了这个错误，并将其记录了下来。每个层级的逻辑都处理了这个错误或将其抛出。</p><p>我们可能还想检查一下错误的起因，比如用来实现重试机制。比如我们有一个外部的用于访问 数据库的 <code>db</code> 包。这个库可能会返回一个短暂的（临时的）错误叫作 <code>db.DBError</code>。为了判断我们是否需要进行重试，我们必须要确认错误的起因：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">postHandler</span><span class="params">(customer Customer)</span></span> Status &#123;</span><br><span class="line">err := insert(customer.Contract)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">switch</span> errors.Cause(err).(<span class="keyword">type</span>) &#123;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">log.WithError(err).Errorf(<span class="string">&quot;unable to serve HTTP POST request for customer %s&quot;</span>, customer.ID)</span><br><span class="line"><span class="keyword">return</span> Status&#123;ok: <span class="literal">false</span>&#125;</span><br><span class="line"><span class="keyword">case</span> *db.DBError:</span><br><span class="line"><span class="keyword">return</span> retry(customer)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> Status&#123;ok: <span class="literal">true</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">insert</span><span class="params">(contract Contract)</span></span> <span class="type">error</span> &#123;</span><br><span class="line">err := db.dbQuery(contract)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> errors.Wrapf(err, <span class="string">&quot;unable to insert customer contract %s&quot;</span>, contract.ID)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是通过 <em>pkg/errors</em> 包中的  <code>errors.Cause</code> 来实完成的：</p><p>我见过的一个常见错误是部分使用 <em>pkg/errors</em> 。检查错误时是这样做的：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> err.(<span class="keyword">type</span>) &#123;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">  log.WithError(err).Errorf(<span class="string">&quot;unable to serve HTTP POST request for customer %s&quot;</span>, customer.ID)</span><br><span class="line">  <span class="keyword">return</span> Status&#123;ok: <span class="literal">false</span>&#125;</span><br><span class="line"><span class="keyword">case</span> *db.DBError:</span><br><span class="line">  <span class="keyword">return</span> retry(customer)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个例子里，如果 <code>db.DBError</code> 被包裹后，就绝对无法触发重试机制了。</p><h2 id="Slice-初始化"><a href="#Slice-初始化" class="headerlink" title="Slice 初始化"></a>Slice 初始化</h2><p>有些时候，我们知道一个 slice 的最终长度。比如我们想将切片 <code>Foo</code> 转化为切片 <code>Bar</code> ，可知两个切片的长度相同。</p><p>我经常见到这样的初始化代码：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> bars []Bar</span><br><span class="line">bars := <span class="built_in">make</span>([]Bar, <span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>切片并不是什么神奇的结构。它在底层实现了一个<strong>扩容</strong>策略，用于应对空间不足的情况。空间不足时，它会自动创建出一个新的数组（<a href="https://www.darkcoding.net/software/go-how-slices-grow/">容量更大</a>）然后将现有的数据项拷贝进去。</p><p>现在，想象一下在 <code>[]Foo</code> 包含上万的元素时，我们如何多次重复这种扩容操作？虽然，对于一次插入分摊开的时间复杂度（平均）仍然是 O(1)，但实际上， 这样做会产生<strong>性能影响</strong>。</p><p>所以，如果我们知道切片的最终长度，就可以采用以下的手段：</p><ul><li><p>将它初始化为一个预定义的长度：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">convert</span><span class="params">(foos []Foo)</span></span> []Bar &#123;</span><br><span class="line">bars := <span class="built_in">make</span>([]Bar, <span class="built_in">len</span>(foos))</span><br><span class="line"><span class="keyword">for</span> i, foo := <span class="keyword">range</span> foos &#123;</span><br><span class="line">bars[i] = fooToBar(foo)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> bars</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>或者初始化为预定义的容量，但长度等于零：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">convert</span><span class="params">(foos []Foo)</span></span> []Bar &#123;</span><br><span class="line">bars := <span class="built_in">make</span>([]Bar, <span class="number">0</span>, <span class="built_in">len</span>(foos))</span><br><span class="line"><span class="keyword">for</span> _, foo := <span class="keyword">range</span> foos &#123;</span><br><span class="line">bars = <span class="built_in">append</span>(bars, fooToBar(foo))</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> bars</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>哪一种办法更好？第一种执行速度快一些。不过，你或许更喜欢第二种方式，因为它具有更好的一致性：无论我们是否知道初始的大小，都可以使用 <code>append</code> 在切片末尾加入新的元素。</p><h2 id="上下文管理"><a href="#上下文管理" class="headerlink" title="上下文管理"></a>上下文管理</h2><p><code>context.Context</code> 常常会被开发者误解。官方文档描述如下：</p><blockquote><p><em>一个 Context 包含一个生存期限，一个撤销信号，以及其它跨越 API 边界的数据</em>。</p></blockquote><p>这个描述足以使得一些人感到困惑，为什么以及如何使用它。</p><p>我们试着解释得更详细一些。一个上下文包含：</p><ul><li>一个<strong>生存期限</strong>。它可以是一个时间长度（比如，250 毫秒），或者一个时间点（比如，<code>2019-01-08 01:00:00</code>），当到达截止时间的时候，我们必须取消某个正在运行的活动（比如，一个正在等待 channel 输入的 I/O 请求）。</li><li>一个<strong>撤销信号</strong>（基本上就是一个 <code>&lt;-chan struct&#123;&#125;</code>）。这里的行为也是相似的。一旦我们接受到信号，我们必须终止一个正在运行的活动。举例来说，假设我们有两个请求。一个要插入一些数据，而另一个是撤销第一个请求（因为它没有意义或者其它别的原因）。这里可以使用第一个请求的可撤销上下文（ cancelable context ）来达成目的，一旦我们接收到第二个请求就执行撤销动作。</li><li>一组键值对（都是 <code>interface&#123;&#125;</code> 类型）。</li></ul><p>再补充两点。第一，上下文对象是可组装的。一个上下文可以带有一个生存期限和一组键值对。而且，多个 Go 协程可以<strong>共享</strong>同一个上下文，因此一个撤销信号有能力终止<strong>多个活动</strong>。</p><p>回到我们的主题上来，这里有一个我见过的真实错误案例。</p><p>有一个基于 <a href="https://github.com/urfave/cli"><em>urfave/cli</em></a> （以防你不知道，这是一个很好的用来创建命令行程序的 Go 代码库）的 Go 程序。程序一开始，研发人员就使用了库中一个类似程序上下文的东西。 程序终止时，会用这个上下文会发送一个撤销信号。</p><p>我遇到的情况是这个上下文被直接传入到对另一个服务端的 gRPC 调用中。而我们并<strong>不想</strong>这样做。</p><p>相反地，我们想告诉 gRPC 库：<em>请在应用程序终止或者请求超过 100 毫秒后，取消请求</em>。</p><p>为了实现这种效果，我们只要创建一个合成的上下文。如果 <code>parent</code> 是那个应用上下文（由 <code>urfave/cli</code> 创建），那么我们只要这样做：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ctx, cancel := context.WithTimeout(parent, <span class="number">100</span> * time.Millisecond)</span><br><span class="line">response, err := grpcClient.Send(ctx, request)</span><br></pre></td></tr></table></figure><p>上下文并没有复杂到无法理解的程度，而且我认为它是 Go 语言最好的特性之一。</p><h2 id="不使用-race-参数"><a href="#不使用-race-参数" class="headerlink" title="不使用 -race 参数"></a>不使用 -race 参数</h2><p>我确实经常见到的一个错误是，测试 Go 应用时不使用 <code>-race</code> 参数。</p><p>就如这份<a href="https://log.zvz.im/2019/07/25/real-world-concurrency-bugs-in-golang/">报告</a>中描述的，尽管 Go 的设计初衷是“让并发编程变得简单可靠”，我们仍然会遇到许多并发问题。</p><p>当然 Go 的竞争探测器（ race detector ）不可能帮你解决所有的并发问题。不过，它仍然是很<strong>有价值的</strong>工具，当进行程序测试时我们总是应该启用它。</p><h2 id="使用文件名作为入参"><a href="#使用文件名作为入参" class="headerlink" title="使用文件名作为入参"></a>使用文件名作为入参</h2><p>另一个普遍的问题是将文件名作为方法的入参。</p><p>假设我们要实现一个功能对文件中的空行进行计数。最自然的实现方式大概是这样的：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">count</span><span class="params">(filename <span class="type">string</span>)</span></span> (<span class="type">int</span>, <span class="type">error</span>) &#123;</span><br><span class="line">file, err := os.Open(filename)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>, errors.Wrapf(err, <span class="string">&quot;unable to open %s&quot;</span>, filename)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> file.Close()</span><br><span class="line"></span><br><span class="line">scanner := bufio.NewScanner(file)</span><br><span class="line">count := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> scanner.Scan() &#123;</span><br><span class="line"><span class="keyword">if</span> scanner.Text() == <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">count++</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> count, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>文件名 <code>filename</code> 作为参数，然后我们打开这个文件执行逻辑，没错吧？</p><p>现在，假设我们要对这个函数进行<strong>单元测试</strong>，使用一个正常的文件，一个空文件，一个采用不同编码的文件，等等。它会很快就变得难以管理。</p><p>而且，如果想对一个 HTTP 的请求体执行相同的逻辑，我们就不得不另外写一个函数了。</p><p>Go 自带两个很棒的接口抽象：<code>io.Reader</code> 和 <code>io.Writer</code> 。我们可以简单地使用一个 <code>io.Reader</code>   <strong>抽象</strong>数据源代替文件名作为入参。</p><p>它是一个文件？一个 HTTP 请求体？或是一个字节缓冲区？这都不重要，因为我们会使用相同的 <code>Read</code> 方法。</p><p>在这个案例中，我们甚至可以将输入缓冲起来逐行读入。这样，我们就可以使用 <code>bufio.Reader</code> 和它的 <code>ReadLine</code> 方法。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">count</span><span class="params">(reader *bufio.Reader)</span></span> (<span class="type">int</span>, <span class="type">error</span>) &#123;</span><br><span class="line">count := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">line, _, err := reader.ReadLine()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">switch</span> err &#123;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>, errors.Wrapf(err, <span class="string">&quot;unable to read&quot;</span>)</span><br><span class="line"><span class="keyword">case</span> io.EOF:</span><br><span class="line"><span class="keyword">return</span> count, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(line) == <span class="number">0</span> &#123;</span><br><span class="line">count++</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打开文件的任务就交给 <code>count</code> 函数的使用者了。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">file, err := os.Open(filename)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> errors.Wrapf(err, <span class="string">&quot;unable to open %s&quot;</span>, filename)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> file.Close()</span><br><span class="line">count, err := count(bufio.NewReader(file))</span><br></pre></td></tr></table></figure><p>采用第二种实现方式，函数可以<strong>无视</strong>数据源的真实载体进行调用。同时，这也便于我们实现单元测试，因为我们只需使用一个 <code>string</code> 字符串创建一个 <code>bufio.Reader</code> 就可以了。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">count, err := count(bufio.NewReader(strings.NewReader(<span class="string">&quot;input&quot;</span>)))</span><br></pre></td></tr></table></figure><h2 id="Go-协程和循环中的变量"><a href="#Go-协程和循环中的变量" class="headerlink" title="Go 协程和循环中的变量"></a>Go 协程和循环中的变量</h2><p>最后一个常见错误是在协程中使用循环内的变量。</p><p>下面这个例子的输出会是什么？</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ints := []<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line"><span class="keyword">for</span> _, i := <span class="keyword">range</span> ints &#123;</span><br><span class="line">  <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;%v\n&quot;</span>, i)</span><br><span class="line">  &#125;()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>1 2 3</code> 以任意顺序出现？不对。</p><p>在这个例子中，所有的协程<strong>共用</strong>了同一个变量实例，所以它会打印出 <code>3 3 3</code>（最可能）。</p><p>这个问题有两种解决方案。第一种是将变量 <code>i</code> 的值传递到闭包中（内嵌函数）：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ints := []<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line"><span class="keyword">for</span> _, i := <span class="keyword">range</span> ints &#123;</span><br><span class="line">  <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(i <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;%v\n&quot;</span>, i)</span><br><span class="line">  &#125;(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二种方法是在 for 循环中创建另一个变量：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ints := []<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line"><span class="keyword">for</span> _, i := <span class="keyword">range</span> ints &#123;</span><br><span class="line">  i := i</span><br><span class="line">  <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;%v\n&quot;</span>, i)</span><br><span class="line">  &#125;()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>采用 <code>i := i</code> 的方式看起可能有些奇怪，却是完全有效的。在循环体内就意味着在另一个作用域中。所以 <code>i := i</code> 创建了另一个名为 <code>i</code> 的变量实例。当然，我们可以为了提高可读性而采用另一个名字。</p><blockquote><p>翻译自：<a href="top-10-most-common-mistakes-ive-seen-in-go-projects-4b79d4f6cd65">The Top 10 Most Common Mistakes I’ve Seen in Go Projects</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://img.zvz.im/imgs/2019/10/19578038f26ae531.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;本文是我总结的 golang 项目中最常见的十种错误。排名不分先后。&lt;/p&gt;
&lt;h2 id=&quot;未知状态的枚举值&quot;&gt;&lt;a href=&quot;#未知状态的枚举值&quot; class=&quot;headerlink&quot; title=&quot;未知状态的枚举值&quot;&gt;&lt;/a&gt;未知状态的枚举值&lt;/h2&gt;&lt;p&gt;我们来看一个简单的例子：&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; Status &lt;span class=&quot;type&quot;&gt;uint32&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	StatusOpen Status = &lt;span class=&quot;literal&quot;&gt;iota&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	StatusClosed&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	StatusUnknown&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在这里我们使用 &lt;code&gt;iota&lt;/code&gt;  创建了一个枚举列表，结果状态如下：&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;StatusOpen = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;StatusClosed = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;StatusUnknown = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;现在，假设这个 &lt;code&gt;Status&lt;/code&gt; 类型是 JSON 请求数据中的一部分，并且会被用于编码解码。我们可以设计一个结构，如下：&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; Request &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	ID        &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;    &lt;span class=&quot;string&quot;&gt;`json:&amp;quot;Id&amp;quot;`&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Timestamp &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;    &lt;span class=&quot;string&quot;&gt;`json:&amp;quot;Timestamp&amp;quot;`&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Status    Status &lt;span class=&quot;string&quot;&gt;`json:&amp;quot;Status&amp;quot;`&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="golang" scheme="http://log.zvz.im/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>理解现实中 Go 语言的并发漏洞</title>
    <link href="http://log.zvz.im/2019/07/25/real-world-concurrency-bugs-in-golang/"/>
    <id>http://log.zvz.im/2019/07/25/real-world-concurrency-bugs-in-golang/</id>
    <published>2019-07-25T17:12:12.000Z</published>
    <updated>2025-07-03T18:06:35.828Z</updated>
    
    <content type="html"><![CDATA[<p>对于编程（数据）模型的设计不仅会使得一些问题变得易于（或更难）解决，也会导致某些类型的漏洞更容易（或更难）产生、侦测和修复。本文的研究对象就是 Go 语言的并发机制。在深入研究之前先思考一下会更有意思，你现在对 Go 语言可能会有以下几点认识：</p><ul><li>Go 语言明显是被设计为服务于并发编程的，想要使其变得更简单且不易出错</li><li>Go 语言确实让并发编程变更简单且不易出错了</li><li>Go 程序大量使用 channel 的消息传递机制，相较于共享内存的同步机制，它更不容易出错</li><li>Go 程序的并发漏洞更少</li><li>Go 语言内置的对于死锁和数据竞争的侦测能捕获所有（绝大多数）的代码漏洞</li></ul><p>这些陈述中的第一点是毋庸置疑的。至于其它几点，你可以先参考本文的研究数据，再重新评估一下你还会有多坚决地继续持有这些观点…</p><span id="more"></span><blockquote><p>我们使用真实的 Go 程序应用来进行对于并发漏洞的第一个系统性研究。我们研究了六个 Go 的软件（项目），包括：Docker，Kubernetes 和 gRPC。我们一共分析了 171 个并发相关的漏洞，其中超过一半是非传统的、Go 语言特有的问题。除了造成这些漏洞的根本原因外，我们还研究了它们的修复方式，通过实验重现这些漏洞，并使用两个公开的 Go 漏洞侦测工具进行了漏洞扫描。</p></blockquote><p>这六个用于研究的应用是：Docker，Kubernetes，etcd，CockroachDB，gRPC 以及 BoltDB，显然这些都是现实世界中重量级的 Go 代码。</p><p><img src="https://img.zvz.im/imgs/2019/07/3a426b45e4c1fe06.jpg" alt=""></p><p>在继续研究它们的并发漏洞之前，我们先从研究这些应用实际是如何使用 Go 的并发原语开始。这些漏洞可以从两个主要的维度进行分类：表现行为（阻塞或非阻塞），以及造成问题的并发原语的机制（共享内存或消息传递）。我们先快速回顾一下 Go 语言的主要并发机制。</p><h2 id="Go-的并发机制"><a href="#Go-的并发机制" class="headerlink" title="Go 的并发机制"></a>Go 的并发机制</h2><blockquote><p>Go 语言的一个主要设计目的，就是改进传统的多线程编程方式，简化并发编程使其不易出错。为了达到这个目的，Go 语言将它的多线程设计汇聚在了两点原则上：1）使线程（称之为 goroutines，go 协程）变得轻量且易于创建；2）使用显式的消息传送（通过 channels 实现）进行线程通信。</p></blockquote><p>Go 协程是轻量的用户态线程（「绿色」线程）。在函数调用（包括匿名函数）前面加上 <strong>go</strong> 关键字，就能创建一个协程。匿名函数可以访问到在其之前申明的本地变量，而且它们是被共享使用的。Channels 用于在协程之间传送数据和状态，而且可以使用缓冲或不使用缓冲。当使用无缓冲 channel 的时候，一个协程在发送（或者接收）时会被阻塞，直到其它的协程进行了数据接收（或者发送）。<strong>select</strong> 语句可以让一个 go 协程同时监听多个 channel，如果多于一个 channel 可用的时候，Go 会随机选择一个分支执行。Go 语言还支持传统的同步机制原语包括互斥，条件变量和原子变量。</p><h2 id="Go-并发原语在实践中的应用"><a href="#Go-并发原语在实践中的应用" class="headerlink" title="Go 并发原语在实践中的应用"></a>Go 并发原语在实践中的应用</h2><p>这六个应用都大量使用了 Go 协程，尤其是用于匿名方法。</p><p><img src="https://img.zvz.im/imgs/2019/07/ad3c3e3a2935431f.jpg" alt=""></p><p>在研究 gRPC 的时候，由于它既有 C 的实现也有 Go 的实现，比较起来结果就很有趣。下面的表格展示了处理相同数量的请求时，使用 gRPC-Go 和 gRPC-C 创建的协程数量比率。</p><p><img src="https://img.zvz.im/imgs/2019/07/1c5ecde7c3449093.jpg" alt=""></p><p>在对比表格中，go 协程相比 C 版本创建的线程有更短的生命周期，但是创建的频度更高。这种高频繁使用协程的行为是 Go 语言所推崇的。</p><p>如果我们审视所有这些应用对并发原语的使用统计，会有一个更加令人惊讶的发现，共享内存的同步操作仍然比消息传递使用得多。</p><p><img src="https://img.zvz.im/imgs/2019/07/1acb51c0e559335e.jpg" alt=""></p><p>最常出现的消息传递原语是 <strong>chan</strong>，它的使用量中在所有应用中占比 18.5% 到 43%。所以，现在的情形是传统的共享内存方式的通信还是被大量使用，与大量的消息传递原语同时并存。从漏洞的角度来看，我们拥有了不漏洞类型发生的可能性数据：共享内存通信造成的，消息传递造成的以及两者共同作用造成的！</p><h2 id="Go-并发漏洞"><a href="#Go-并发漏洞" class="headerlink" title="Go 并发漏洞"></a>Go 并发漏洞</h2><p>作者搜索了这些应用的 Github 提交历史，从中找到了修复并发漏洞的提交（共 3211 个）。从这些漏洞中随机选取了 171 个用于研究。</p><p>这些漏洞被分为阻塞漏洞和非阻塞漏洞。当一个或多个协程在执行中意外卡主无法推进时，阻塞漏洞就产生了。这个定义比死锁更宽泛，包含了循环等待以外的情况，但是不包括对其它非协程提供资源的等待。其中包含 85 个阻塞漏洞和 86 个非阻塞漏洞。</p><p>我们还从另一个维度对漏洞进行了划分，看它们是否与共享内存保护相关（105 个）还是和消息传递相关（66 个）。</p><p><img src="https://img.zvz.im/imgs/2019/07/5d5f659e515c26e4.jpg" alt=""></p><h2 id="阻塞型漏洞"><a href="#阻塞型漏洞" class="headerlink" title="阻塞型漏洞"></a>阻塞型漏洞</h2><p>首先让我们来看看阻塞漏洞，其中的 42% 都与共享内存相关，另外 58% 与消息传递相关。上文提到过共享内存原语实际上比消息传递原语使用得更多。</p><blockquote><p>与普遍认为的消息传递不易犯错相比，我们的研究显示更多的阻塞漏洞是由错误的消息传递造成的，而不是由错误的共享内存保护造成的。</p></blockquote><p>共享内存相关的漏洞包括一般的常见情况，和因 Go 语言中 RWMutext 和 Wait 的实现而产生的新情况。</p><p>对于消息传送相关的漏洞，许多都是因为 channel 丢失了发送或接受方，或者忘记了关闭 channel。</p><blockquote><p>所有消息传递引起的阻塞漏洞都与 Go 特有的消息传递语法相关，比如 channel。这些漏洞很难发现，尤其是当消息传递和其它的同步原语一起使用的时候。与一般的认识不同，消息传递会比共享内存方式造成更多的阻塞漏洞。</p></blockquote><p>在调查了这些漏洞的修复之后，会发现弄明白漏洞产生的原因之后，它们修复起来都相当简单，而且修复的类型都与造成漏洞的起因相关。这说明在 Go 语言中，使用全自动或半自动的工具修复阻塞型漏洞是很有前景的一个方向。</p><p><img src="https://img.zvz.im/imgs/2019/07/579c8e0aed2dbe4d.jpg" alt=""></p><p>Go 的内置死锁探测器只能检测到此次研究中 21 个阻塞漏洞中的两个。</p><h2 id="非阻塞型漏洞"><a href="#非阻塞型漏洞" class="headerlink" title="非阻塞型漏洞"></a>非阻塞型漏洞</h2><p>与消息传递相比，非阻塞型漏洞更多是由于共享内存的错误使用造成的。有一半的非阻塞漏洞符合「传统」的内存共享漏洞模式。还有一些漏洞是由于缺乏对 Go 语言特性的理解，尤其是前置申明的本地变量，在协程中被调用的匿名函数共享使用，以及 WaitGroup 的语法。</p><p><img src="https://img.zvz.im/imgs/2019/07/712d5b704ad5354d.jpg" alt=""></p><blockquote><p>Go 语言为简化多线程编程而引入的新编程模型和新工具库，可能造成更多的并发漏洞。</p></blockquote><p>消息传送型的非阻塞漏洞则相对不那么常见，<em>“编程语言中这些复杂的消息传递机制，与其它的语言特性组合起来，可能造成这些漏洞很难被发现”</em>。</p><p>有趣的是，修复共享内存漏洞的程序员，更喜欢使用消息传送机制来修复这些问题。</p><p>Go 语言的数据竞争探测器可以探测出此次研究中一半的非阻塞漏洞。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p>结果令人震惊，我们的研究显示使用消息传递机制和使用共享内存的方式一样容易产生并发漏洞，有时候甚至更多。</p></blockquote><p>程序员们必须要清楚地理解：</p><ul><li>使用匿名函数创建的 Go 协程</li><li>有缓冲和无缓冲 channel 的使用</li><li>使用 select 等待多个 channel 时的不确定性</li><li>正确地使用 <strong>time</strong> 库</li></ul><p>很可惜，这篇总结没有足够的空间来包含许多漏洞细节的示例代码。如果你正在使用 Go 进行开发，整篇论文还是值得读来研究一下的。</p><blockquote><p><a href="https://songlh.github.io/paper/go-study.pdf">https://songlh.github.io/paper/go-study.pdf</a></p></blockquote><p>翻译自：<a href="https://blog.acolyer.org/2019/05/17/understanding-real-world-concurrency-bugs-in-go/">Understanding real-world concurrency bugs in Go</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对于编程（数据）模型的设计不仅会使得一些问题变得易于（或更难）解决，也会导致某些类型的漏洞更容易（或更难）产生、侦测和修复。本文的研究对象就是 Go 语言的并发机制。在深入研究之前先思考一下会更有意思，你现在对 Go 语言可能会有以下几点认识：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Go 语言明显是被设计为服务于并发编程的，想要使其变得更简单且不易出错&lt;/li&gt;
&lt;li&gt;Go 语言确实让并发编程变更简单且不易出错了&lt;/li&gt;
&lt;li&gt;Go 程序大量使用 channel 的消息传递机制，相较于共享内存的同步机制，它更不容易出错&lt;/li&gt;
&lt;li&gt;Go 程序的并发漏洞更少&lt;/li&gt;
&lt;li&gt;Go 语言内置的对于死锁和数据竞争的侦测能捕获所有（绝大多数）的代码漏洞&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这些陈述中的第一点是毋庸置疑的。至于其它几点，你可以先参考本文的研究数据，再重新评估一下你还会有多坚决地继续持有这些观点…&lt;/p&gt;
    
    </summary>
    
    
      <category term="golang" scheme="http://log.zvz.im/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>Go 语言基础 - 编写单元测试</title>
    <link href="http://log.zvz.im/2019/03/09/golang-writing-unit-tests/"/>
    <id>http://log.zvz.im/2019/03/09/golang-writing-unit-tests/</id>
    <published>2019-03-09T01:23:45.000Z</published>
    <updated>2025-07-03T18:06:35.826Z</updated>
    
    <content type="html"><![CDATA[<p>在上一篇文章 <a href="http://blog.alexellis.io/golang-json-api-client/">“Grab JSON from an API”</a> 中，我们探索了如何使用 HTTP 客户端以及如何解析 JSON 数据。本篇文章是 Go 语言主题的续篇，讲述如何编写单元测试。</p><h2 id="1-Go-语言中的测试"><a href="#1-Go-语言中的测试" class="headerlink" title="1. Go 语言中的测试"></a>1. Go 语言中的测试</h2><p>Go 语言有一个自带的测试命令 <code>go test</code> ，还有一个标准 <code>testing</code> 测试包，它能够为你提供一个小却完整的测试体验。</p><p>这套标准工具链还包括了基准测试以及基于语句的代码覆盖率测试，类似与 NCover(.Net) 或者 Istanbul(Node.js)。</p><h2 id="1-2-编写测试代码"><a href="#1-2-编写测试代码" class="headerlink" title="1.2 编写测试代码"></a>1.2 编写测试代码</h2><p>和 Go 语言其它方面如格式化、命名规则一样，Go 语言的单元测试也显得个性十足。它的语法刻意规避了使用断言模式，并将值验证和行为检测的工作留给了开发人员。<br><span id="more"></span></p><p>这儿有一个例子，我们要对 <code>main</code> 包里的一个方法进行测试。我们已定义了一个名为 <code>Sum</code> 的出口函数，它接收两个整数参数，并将它们相加。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Sum</span><span class="params">(x <span class="type">int</span>, y <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    Sum(<span class="number">5</span>, <span class="number">5</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们在另一个单独的文件中编写测试代码。这个测试文件可以在其它的包（目录）中，或者在相同的包中（<code>main</code>）。以下是一个检测相加结果的单元测试：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;testing&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestSum</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">    total := Sum(<span class="number">5</span>, <span class="number">5</span>)</span><br><span class="line">    <span class="keyword">if</span> total != <span class="number">10</span> &#123;</span><br><span class="line">       t.Errorf(<span class="string">&quot;Sum was incorrect, got: %d, want: %d.&quot;</span>, total, <span class="number">10</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Go 语言的测试函数有以下特征：</p><ul><li>只有唯一的参数，必须是 <code>t *testing.T</code> 类型</li><li>必须以单词 <code>Test</code> 开头，再组合上首字母大写的单词或词组（一般是被测试的方法名称，如 <code>TestValidateClient</code>）</li><li>调用 <code>t.Error</code> 或者 <code>t.Fail</code> 方法指明测试失败（这里我使用了 <code>t.Errorf</code> 来提供更多的细节）</li><li><code>t.Log</code> 可以用来提供一些失败信息以外的调试信息</li><li>测试代码文件名必须是 <code>_test</code> 结尾的形式 <code>something_test.go</code> ，例如：<code>addtion_test.go</code></li></ul><blockquote><p>如果你在同一个目录下既有代码也有测试代码，那么你就无法使用 <code>go run *.go</code> 的方式执行你的程序了。我一般会使用 <code>go build</code> 编译出可执行程序，再执行它。</p></blockquote><p>你可能更习惯于使用 <code>Assert</code> 关键字进行验证工作，不过 <a href="https://www.amazon.co.uk/Programming-Language-Addison-Wesley-Professional-Computing/dp/0134190440">The Go Programming Language</a> 的作者们对于 Go 的断言方式做了许多很好的辩解。</p><p>当使用断言时：</p><ul><li>测试代码往往会让人觉得他们正在使用另一种语言（比如 RSpec/Mocha）</li><li>错误输出看起来令人费解 “assert: 0 == 1”</li><li>可能会产生大量的调用栈信息</li><li>第一个断言失败后，测试代码会终止执行 - 会掩盖其它的失败可能</li></ul><blockquote><p>有一些类似 RSpec 或者 Assert 的 Go 语言第三方测试库。比如 <a href="https://github.com/stretchr/testify">stretchr/testify</a>。</p></blockquote><h3 id="测试表"><a href="#测试表" class="headerlink" title="测试表"></a>测试表</h3><p>“测试表”的概念是一组测试输入和输出值的映射。这是一个针对 <code>Sum</code> 函数的例子：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;testing&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestSum</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">tables := []<span class="keyword">struct</span> &#123;</span><br><span class="line">x <span class="type">int</span></span><br><span class="line">y <span class="type">int</span></span><br><span class="line">n <span class="type">int</span></span><br><span class="line">&#125;&#123;</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>&#125;,</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;,</span><br><span class="line">&#123;<span class="number">2</span>, <span class="number">2</span>, <span class="number">4</span>&#125;,</span><br><span class="line">&#123;<span class="number">5</span>, <span class="number">2</span>, <span class="number">7</span>&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, table := <span class="keyword">range</span> tables &#123;</span><br><span class="line">total := Sum(table.x, table.y)</span><br><span class="line"><span class="keyword">if</span> total != table.n &#123;</span><br><span class="line">t.Errorf(<span class="string">&quot;Sum of (%d+%d) was incorrect, got: %d, want: %d.&quot;</span>, table.x, table.y, total, table.n)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果你想要制造一些错误使得测试无法通过，那么将 <code>Sum</code> 函数的返回部分改为 <code>x * y</code> 即可。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">go <span class="built_in">test</span> -v</span></span><br><span class="line">=== RUN   TestSum</span><br><span class="line">--- FAIL: TestSum (0.00s)</span><br><span class="line">table_test.go:19: Sum of (1+1) was incorrect, got: 1, want: 2.</span><br><span class="line">table_test.go:19: Sum of (1+2) was incorrect, got: 2, want: 3.</span><br><span class="line">table_test.go:19: Sum of (5+2) was incorrect, got: 10, want: 7.</span><br><span class="line">FAIL</span><br><span class="line">exit status 1</span><br><span class="line">FAILgithub.com/alexellis/t60.013s</span><br></pre></td></tr></table></figure><h3 id="启动测试"><a href="#启动测试" class="headerlink" title="启动测试"></a>启动测试</h3><p>有两种方式可以用来启动一个包内的测试代码。这些方法对于单元测试和集成测试是相同的。</p><ol><li><p>在和测试文件相同的目录中：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go test</span><br></pre></td></tr></table></figure><p>这会执行包内所有匹配 _test.go 名称的测试代码</p><p>或者</p></li><li><p>采用完整的包名</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go test github.com/alexellis/golangbasics1</span><br></pre></td></tr></table></figure></li></ol><p>现在你可以执行 Go 语言单元测试了，可以使用 <code>go test -v</code> 获得更详细的输出，你能看到每条测试的 PASS/FAIL 信息，以及所有 <code>t.Log</code> 打印出的额外日志信息。</p><blockquote><p>单元测试和集成测试的区别在于，单元测试通常独立于外部依赖，不会与网络、磁盘等产生交互。单元测试一般只关注函数的功能。</p></blockquote><h2 id="1-3-go-test-的更多用法"><a href="#1-3-go-test-的更多用法" class="headerlink" title="1.3 go test 的更多用法"></a>1.3 <code>go test</code> 的更多用法</h2><h3 id="语句（statement）覆盖率"><a href="#语句（statement）覆盖率" class="headerlink" title="语句（statement）覆盖率"></a>语句（statement）覆盖率</h3><p><code>go test</code> 工具自带内建的代码语句覆盖率测试功能。想要用之前的代码例子尝试一下，输入以下命令即可：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">go <span class="built_in">test</span> -cover</span></span><br><span class="line">PASS</span><br><span class="line">coverage: 50.0% of statements</span><br><span class="line">ok  github.com/alexellis/golangbasics10.009s</span><br></pre></td></tr></table></figure><p>较高的语句覆盖率比低覆盖率或者零覆盖率要好，不过这样量化也可能会产生误导。我们想保证我们不只是在执行语句，而且我们还验证了代码的行为和输出，而且在不符合逻辑的地方报错。如果你删除了之前例子代码中的 “if” 语句，它仍然会保持 50% 的测试覆盖率，却丧失了验证 “Sum” 方法行为的用处。</p><h3 id="生成-HTML-格式的覆盖率测试报告"><a href="#生成-HTML-格式的覆盖率测试报告" class="headerlink" title="生成 HTML 格式的覆盖率测试报告"></a>生成 HTML 格式的覆盖率测试报告</h3><p>如果你使用接下来的两条命令，你就可以直观地看到你的程序哪些部分被覆盖到了，而哪些语句没有被覆盖到：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">go test -cover -coverprofile=c.out</span><br><span class="line">go tool cover -html=c.out -o coverage.html </span><br></pre></td></tr></table></figure><p>然后用浏览器打开 coverage.html 文件。</p><h3 id="Go-编译时不会引入你的测试代码"><a href="#Go-编译时不会引入你的测试代码" class="headerlink" title="Go 编译时不会引入你的测试代码"></a>Go 编译时不会引入你的测试代码</h3><p>还有一点，将 <code>addition_test.go</code> 这样的测试文件留在你的包目录中虽然略有些不自然。不过 Go 语言的编译器和链接器保证不会将你的测试文件编入任何它生成的二进制文件中。</p><p>下面有个例子，可以找出 net/http 包中的生成代码和测试代码。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">go list -f=&#123;&#123;.GoFiles&#125;&#125; net/http</span></span><br><span class="line">[client.go cookie.go doc.go filetransport.go fs.go h2_bundle.go header.go http.go jar.go method.go request.go response.go server.go sniff.go status.go transfer.go transport.go]</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">go list -f=&#123;&#123;.TestGoFiles&#125;&#125; net/http</span></span><br><span class="line">[cookie_test.go export_test.go filetransport_test.go header_test.go http_test.go proxy_test.go range_test.go readrequest_test.go requestwrite_test.go response_test.go responsewrite_test.go transfer_test.go transport_internal_test.go]</span><br></pre></td></tr></table></figure><p>想要了解更多的基础内容可以阅读 <a href="https://golang.org/pkg/testing/">Golang testing docs</a>。</p><h2 id="1-4-脱离依赖"><a href="#1-4-脱离依赖" class="headerlink" title="1.4 脱离依赖"></a>1.4 脱离依赖</h2><p>定义单元测试概念的关键点就是，它能够脱离运行时的依赖项或合作者。</p><p>这在 Go 语言中是通过接口来实现的，不过如果你有 C# 或者 Java 的背景，它们的接口看起来和 Go 会有些许不同。Go 语言中接口是隐含的，而不是一种强制措施。意味着实际的类并不需要知道接口的存在。</p><p>这意味着我们可以定义非常多的小接口，如 <a href="https://golang.org/src/io/io.go?s=4977:5022#L116">io.ReadCloser</a> 它只包含两个方法分别来自于 Reader 和 Closer 接口：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Read(p []<span class="type">byte</span>) (n <span class="type">int</span>, err <span class="type">error</span>)</span><br></pre></td></tr></table></figure><p><em>Reader</em> 接口</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Close() <span class="type">error</span></span><br></pre></td></tr></table></figure><p><em>Closer</em> 接口</p><p>如果你在设计一个会被第三方使用的包，那么定义适当的接口就会显得非常有意义，因为其他人需要时，可以利用这些接口让单元测试代码能够不依赖于你的代码包。</p><p>接口的具体实现在函数调用时可以被替换。如果我们想要测试这个方法，我们可以提供一个实现了 Reader 接口的伪造类。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;io&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> FakeReader <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(FakeReader)</span></span> Read(p []<span class="type">byte</span>) (n <span class="type">int</span>, err <span class="type">error</span>) &#123;</span><br><span class="line"><span class="comment">// return an integer and error or nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ReadAllTheBytes</span><span class="params">(reader io.Reader)</span></span> []<span class="type">byte</span> &#123;</span><br><span class="line"><span class="comment">// read from the reader..</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fakeReader := FakeReader&#123;&#125;</span><br><span class="line"><span class="comment">// You could create a method called SetFakeBytes which initialises canned data.</span></span><br><span class="line">fakeReader.SetFakeBytes([]<span class="type">byte</span>(<span class="string">&quot;when called, return this data&quot;</span>))</span><br><span class="line">bytes := ReadAllTheBytes(fakeReader)</span><br><span class="line">fmt.Printf(<span class="string">&quot;%d bytes read.\n&quot;</span>, <span class="built_in">len</span>(bytes))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在实现你自己的抽象前，去 Golang 文档中搜索一下是否已有现成可用的东西，总会是个不错的主意。对于上面的例子我们也可以使用标准库中的 <a href="https://golang.org/pkg/bytes/">bytes</a> 包：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewReader</span><span class="params">(b []<span class="type">byte</span>)</span></span> *Reader</span><br></pre></td></tr></table></figure><p>Go 语言的 <code>testing/iotest</code> 包提供了一些 Reader 的实现类，有些执行起来比较慢，有些会在读数据的中途产生错误。这些实现对于适应性测试都非常好用。</p><ul><li>Golang 文档：<a href="https://golang.org/pkg/testing/iotest/">testing/iotest</a></li></ul><h2 id="1-5-工作示例"><a href="#1-5-工作示例" class="headerlink" title="1.5 工作示例"></a>1.5 工作示例</h2><p>接下来我要重构<a href="http://blog.alexellis.io/golang-json-api-client/">上一篇文章</a>中寻找宇宙中有多少宇航员的示例代码。</p><p>让我们从测试代码开始：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;testing&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> testWebRequest <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(testWebRequest)</span></span> FetchBytes(url <span class="type">string</span>) []<span class="type">byte</span> &#123;</span><br><span class="line"><span class="keyword">return</span> []<span class="type">byte</span>(<span class="string">`&#123;&quot;number&quot;: 2&#125;`</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestGetAstronauts</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">amount := GetAstronauts(testWebRequest&#123;&#125;)</span><br><span class="line"><span class="keyword">if</span> amount != <span class="number">1</span> &#123;</span><br><span class="line">t.Errorf(<span class="string">&quot;People in space, got: %d, want: %d.&quot;</span>, amount, <span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我有一个名为 GetAstronauts 的外部方法，它从一个 HTTP 终端读取字节信息，解析成一个结构体，最后返回 “number” 属性的整数值。</p><p>我伪造的方法只返回了能满足测试的最小化的 JSON 信息，我先让它返回与判断不符的数字，以便我能确定测试代码工作正常。因为很难保证第一次执行就通过的测试代码，是否真起了作用。</p><p>这是程序代码中的 <code>main</code> 方法。<code>GetAstronauts</code> 方法用一个接口作为它的第一个参数，使得我们能够独立于此代码中的任何 HTTP 逻辑，以及它的引入依赖项。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;encoding/json&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetAstronauts</span><span class="params">(getWebRequest GetWebRequest)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">url := <span class="string">&quot;http://api.open-notify.org/astros.json&quot;</span></span><br><span class="line">bodyBytes := getWebRequest.FetchBytes(url)</span><br><span class="line">peopleResult := people&#123;&#125;</span><br><span class="line">jsonErr := json.Unmarshal(bodyBytes, &amp;peopleResult)</span><br><span class="line"><span class="keyword">if</span> jsonErr != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(jsonErr)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> peopleResult.Number</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">liveClient := LiveGetWebRequest&#123;&#125;</span><br><span class="line">number := GetAstronauts(liveClient)</span><br><span class="line"></span><br><span class="line">fmt.Println(number)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>GetWebRequest 接口包含了以下方法：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> GetWebRequest <span class="keyword">interface</span> &#123;</span><br><span class="line">FetchBytes(url <span class="type">string</span>) []<span class="type">byte</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>接口是推断出来的，而不是显示声明的。这一点与 C# 和 Java 语言不同。</p></blockquote><p>完整的 types.go 文件代码如下，它是从前一篇博文中截取出来的：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;io/ioutil&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> people <span class="keyword">struct</span> &#123;</span><br><span class="line">Number <span class="type">int</span> <span class="string">`json:&quot;number&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> GetWebRequest <span class="keyword">interface</span> &#123;</span><br><span class="line">FetchBytes(url <span class="type">string</span>) []<span class="type">byte</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> LiveGetWebRequest <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(LiveGetWebRequest)</span></span> FetchBytes(url <span class="type">string</span>) []<span class="type">byte</span> &#123;</span><br><span class="line">spaceClient := http.Client&#123;</span><br><span class="line">Timeout: time.Second * <span class="number">2</span>, <span class="comment">// Maximum of 2 secs</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">req, err := http.NewRequest(http.MethodGet, url, <span class="literal">nil</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">req.Header.Set(<span class="string">&quot;User-Agent&quot;</span>, <span class="string">&quot;spacecount-tutorial&quot;</span>)</span><br><span class="line"></span><br><span class="line">res, getErr := spaceClient.Do(req)</span><br><span class="line"><span class="keyword">if</span> getErr != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(getErr)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">body, readErr := ioutil.ReadAll(res.Body)</span><br><span class="line"><span class="keyword">if</span> readErr != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(readErr)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> body</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="选择抽象的对象"><a href="#选择抽象的对象" class="headerlink" title="选择抽象的对象"></a>选择抽象的对象</h3><p>上面的单元测试仅有效地测试了 <code>json.Unmarshal</code> 方法以及我们假想的正常 HTTP 响应结果。这种抽象对于我们的例子来说没有问题，不过代码测试覆盖率比较低。</p><p>我们还可以再做一些底层测试，来保证 HTTP 请求的强制2秒超时是否正确，或者我们创建一个 GET 请求而不是 POST 请求。</p><p>令人高兴的是，Go 语言自带了一组用来伪造 HTTP 服务端和客户端的工具方法。</p><h3 id="更进一步："><a href="#更进一步：" class="headerlink" title="更进一步："></a>更进一步：</h3><ul><li>探索 <a href="https://golang.org/pkg/net/http/httptest/#pkg-examples">http/httptest 包</a></li><li>使用伪造的 HTTP 客户端重构上面的测试代码</li><li>重构之前和之后的测试覆盖率分别是多少？</li></ul><p>翻译自：<a href="https://blog.alexellis.io/golang-writing-unit-tests/">Golang basics - writing unit tests</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在上一篇文章 &lt;a href=&quot;http://blog.alexellis.io/golang-json-api-client/&quot;&gt;“Grab JSON from an API”&lt;/a&gt; 中，我们探索了如何使用 HTTP 客户端以及如何解析 JSON 数据。本篇文章是 Go 语言主题的续篇，讲述如何编写单元测试。&lt;/p&gt;
&lt;h2 id=&quot;1-Go-语言中的测试&quot;&gt;&lt;a href=&quot;#1-Go-语言中的测试&quot; class=&quot;headerlink&quot; title=&quot;1. Go 语言中的测试&quot;&gt;&lt;/a&gt;1. Go 语言中的测试&lt;/h2&gt;&lt;p&gt;Go 语言有一个自带的测试命令 &lt;code&gt;go test&lt;/code&gt; ，还有一个标准 &lt;code&gt;testing&lt;/code&gt; 测试包，它能够为你提供一个小却完整的测试体验。&lt;/p&gt;
&lt;p&gt;这套标准工具链还包括了基准测试以及基于语句的代码覆盖率测试，类似与 NCover(.Net) 或者 Istanbul(Node.js)。&lt;/p&gt;
&lt;h2 id=&quot;1-2-编写测试代码&quot;&gt;&lt;a href=&quot;#1-2-编写测试代码&quot; class=&quot;headerlink&quot; title=&quot;1.2 编写测试代码&quot;&gt;&lt;/a&gt;1.2 编写测试代码&lt;/h2&gt;&lt;p&gt;和 Go 语言其它方面如格式化、命名规则一样，Go 语言的单元测试也显得个性十足。它的语法刻意规避了使用断言模式，并将值验证和行为检测的工作留给了开发人员。&lt;br&gt;
    
    </summary>
    
    
      <category term="testing" scheme="http://log.zvz.im/tags/testing/"/>
    
      <category term="golang" scheme="http://log.zvz.im/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>如何使用 Go 语言解析 JSON</title>
    <link href="http://log.zvz.im/2019/02/18/parsing-json-in-golang/"/>
    <id>http://log.zvz.im/2019/02/18/parsing-json-in-golang/</id>
    <published>2019-02-18T01:17:13.000Z</published>
    <updated>2025-07-03T18:06:35.827Z</updated>
    
    <content type="html"><![CDATA[<p>当静态编程语言使用到 JSON 的时候，总是会有些费力。一方面，JSON 数据可能是任何形式的，从一个简单的数字，到一个复杂的包含内嵌对象的数组。当使用 Go 语言的时候，这意味着你要将这些变化多端的 JSON 数据放入结构化的变量中去。</p><p>幸运地是，Go 尽力尝试帮我们降低编码难度，为我们提供了许多方式来解析 JSON 数据。</p><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Go 标准库的 json 包为我们提供了我们想要的功能。对于任意的 JSON 字符串，标准的解析方法如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;encoding/json&quot;</span></span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ... </span></span><br><span class="line">myJsonString := <span class="string">`&#123;&quot;some&quot;:&quot;json&quot;&#125;`</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// `&amp;myStoredVariable` is the address of the variable we want to store our</span></span><br><span class="line"><span class="comment">// parsed data in</span></span><br><span class="line">json.Unmarshall([]<span class="type">byte</span>(myJsonString), &amp;myStoredVariable)</span><br><span class="line"><span class="comment">//...</span></span><br></pre></td></tr></table></figure><p>本文中我们要讨论的是，对于 <code>myStoredVariable</code> 变量的类型，你可以有哪些不同的选择，以及决定何时采用何种类型。<br><span id="more"></span></p><p>在处理 JSON 数据时，你会遇到两种情况：</p><ol><li>结构化数据</li><li>非结构化数据</li></ol><h2 id="结构化数据"><a href="#结构化数据" class="headerlink" title="结构化数据"></a>结构化数据</h2><p>我们先从结构化数据开始，因为它们处理起来相对容易一些。对于这类数据我们需要提前知晓其结构。比如，你有一个 <code>Bird</code> 对象，每种鸟都有 <code>species</code> 字段和一个 <code>description</code> 字段：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;species&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pigeon&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;decription&quot;</span><span class="punctuation">:</span> <span class="string">&quot;likes to perch on rocks&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>读取此类数据，只要创建一个 <code>struct</code> 结构体，作为你想要解析的数据的镜像。对于这个例子，我们会创建一个包含 <code>Species</code> 和 <code>Description</code> 字段的 <code>Bird</code> 结构体：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Bird <span class="keyword">struct</span> &#123;</span><br><span class="line">  Species <span class="type">string</span></span><br><span class="line">  Description <span class="type">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后将数据解析出来，如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">birdJson := <span class="string">`&#123;&quot;species&quot;: &quot;pigeon&quot;,&quot;description&quot;: &quot;likes to perch on rocks&quot;&#125;`</span></span><br><span class="line"><span class="keyword">var</span> bird Bird</span><br><span class="line">json.Unmarshal([]<span class="type">byte</span>(birdJson), &amp;bird)</span><br><span class="line">fmt.Printf(<span class="string">&quot;Species: %s, Description: %s&quot;</span>, bird.Species, bird.Description)</span><br><span class="line"><span class="comment">//Species: pigeon, Description: likes to perch on rocks</span></span><br></pre></td></tr></table></figure><blockquote><p>转换时，Go 不区分名称大小写问题，使用 JSON 属性与字段都转为小写后相同作为映射依据。所以， <code>Bird</code> 结构的 <code>Species</code> 字段会映射到名为 <code>species</code> ，或者 <code>Species</code> 或者 <code>sPeCiEs</code> 的 JSON 属性。</p></blockquote><h3 id="JSON-数组"><a href="#JSON-数组" class="headerlink" title="JSON 数组"></a>JSON 数组</h3><p>当遇到一个 <code>Bird</code> 数组的时候，又会发生什么呢？</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">[</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;species&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pigeon&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;decription&quot;</span><span class="punctuation">:</span> <span class="string">&quot;likes to perch on rocks&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;species&quot;</span><span class="punctuation">:</span><span class="string">&quot;eagle&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span><span class="string">&quot;bird of prey&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><p>既然这个数组的每个元素都是一个 <code>Bird</code> ，你可以创建一个 <code>Bird</code> 类型的数组来解析它：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">birdJson := <span class="string">`[&#123;&quot;species&quot;:&quot;pigeon&quot;,&quot;decription&quot;:&quot;likes to perch on rocks&quot;&#125;,&#123;&quot;species&quot;:&quot;eagle&quot;,&quot;description&quot;:&quot;bird of prey&quot;&#125;]`</span></span><br><span class="line"><span class="keyword">var</span> birds []Bird</span><br><span class="line">json.Unmarshal([]<span class="type">byte</span>(birdJson), &amp;birds)</span><br><span class="line">fmt.Printf(<span class="string">&quot;Birds : %+v&quot;</span>, birds)</span><br><span class="line"><span class="comment">//Birds : [&#123;Species:pigeon Description:&#125; &#123;Species:eagle Description:bird of prey&#125;]</span></span><br></pre></td></tr></table></figure><h3 id="嵌套对象"><a href="#嵌套对象" class="headerlink" title="嵌套对象"></a>嵌套对象</h3><p>现在，考虑这种情况，<code>Bird</code> 有一个 <code>Dimensions</code> 属性，用来描述它的 <code>Height</code> （高度）和 <code>Length</code> （身长）：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;species&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pigeon&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;decription&quot;</span><span class="punctuation">:</span> <span class="string">&quot;likes to perch on rocks&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;dimensions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;height&quot;</span><span class="punctuation">:</span> <span class="number">24</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;width&quot;</span><span class="punctuation">:</span> <span class="number">10</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>和上一个例子类似，我们需要将这个新的问题对象映射到我们的 Go 代码中。在机构体中加入一个内嵌的 <code>dimensions</code> 字段，让我们先申明一个 <code>dimensions</code> 的结构体类型：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Dimensions <span class="keyword">struct</span> &#123;</span><br><span class="line">  Height <span class="type">int</span></span><br><span class="line">  Width <span class="type">int</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后，<code>Bird</code> 结构体可以包含一个 <code>Dimensions</code> 字段：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Bird <span class="keyword">struct</span> &#123;</span><br><span class="line">  Species <span class="type">string</span></span><br><span class="line">  Description <span class="type">string</span></span><br><span class="line">  Dimensions Dimensions</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如此就能用与之前一样的方法进行数据解析了：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">birdJson := <span class="string">`&#123;&quot;species&quot;:&quot;pigeon&quot;,&quot;description&quot;:&quot;likes to perch on rocks&quot;, &quot;dimensions&quot;:&#123;&quot;height&quot;:24,&quot;width&quot;:10&#125;&#125;`</span></span><br><span class="line"><span class="keyword">var</span> birds Bird</span><br><span class="line">json.Unmarshal([]<span class="type">byte</span>(birdJson), &amp;birds)</span><br><span class="line">fmt.Printf(bird)</span><br><span class="line"><span class="comment">// &#123;pigeon likes to perch on rocks &#123;24 10&#125;&#125;</span></span><br></pre></td></tr></table></figure><h3 id="自定义属性名称"><a href="#自定义属性名称" class="headerlink" title="自定义属性名称"></a>自定义属性名称</h3><p>前面提到过 Go 会进行大小写转换来确定结构体字段和 JSON 属性的映射关系。不过很多时候，你会需要一个和 JSON 数据属性不同名的字段名称。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;birdType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pigeon&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;what it does&quot;</span><span class="punctuation">:</span> <span class="string">&quot;likes to perch on rocks&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>对于上面的 JSON 数据，我想让 <code>birdType</code> 属性映射到 Go 代码中的 <code>Species</code> 字段。同时我也没法给 <code>&quot;what it does&quot;</code> 提供一个合适的字段名称。</p><p>为了解决这些情况，我们可以使用结构体字段标签：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Bird <span class="keyword">struct</span> &#123;</span><br><span class="line">  Species <span class="type">string</span> <span class="string">`json:&quot;birdType&quot;`</span></span><br><span class="line">  Description <span class="type">string</span> <span class="string">`json:&quot;what it does&quot;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在，我们可以明确地告诉代码，某个 JSON 属性应该映射到哪个字段上了。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">birdJson := <span class="string">`&#123;&quot;birdType&quot;: &quot;pigeon&quot;,&quot;what it does&quot;: &quot;likes to perch on rocks&quot;&#125;`</span></span><br><span class="line"><span class="keyword">var</span> bird Bird</span><br><span class="line">json.Unmarshal([]<span class="type">byte</span>(birdJson), &amp;bird)</span><br><span class="line">fmt.Println(bird)</span><br><span class="line"><span class="comment">// &#123;pigeon likes to perch on rocks&#125;</span></span><br></pre></td></tr></table></figure><h2 id="非结构化数据"><a href="#非结构化数据" class="headerlink" title="非结构化数据"></a>非结构化数据</h2><p>如果你遇到一些数据，它们的结构和属性名都不确定，那么你就无法使用结构体来解析这些数据了。取而代之地，你可以使用映射（maps）类型。考虑以下的 JSON 形式：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;birds&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;pigeon&quot;</span><span class="punctuation">:</span><span class="string">&quot;likes to perch on rocks&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;eagle&quot;</span><span class="punctuation">:</span><span class="string">&quot;bird of prey&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;animals&quot;</span><span class="punctuation">:</span> <span class="string">&quot;none&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>我们没法构建一个结构体来描述上面的数据，因为鸟儿的名字作为对象的键值总是可以变换，而这会导致数据结构的变化。</p><p>为了处理这种情况，我们创建一个字符串对应空接口的 map：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">birdJson := <span class="string">`&#123;&quot;birds&quot;:&#123;&quot;pigeon&quot;:&quot;likes to perch on rocks&quot;,&quot;eagle&quot;:&quot;bird of prey&quot;&#125;,&quot;animals&quot;:&quot;none&quot;&#125;`</span></span><br><span class="line"><span class="keyword">var</span> result <span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">json.Unmarshal([]<span class="type">byte</span>(birdJson), &amp;result)</span><br><span class="line"></span><br><span class="line"><span class="comment">// The object stored in the &quot;birds&quot; key is also stored as </span></span><br><span class="line"><span class="comment">// a map[string]interface&#123;&#125; type, and its type is asserted from</span></span><br><span class="line"><span class="comment">// the interface&#123;&#125; type</span></span><br><span class="line">birds := result[<span class="string">&quot;birds&quot;</span>].(<span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> key, value := <span class="keyword">range</span> birds &#123;</span><br><span class="line">  <span class="comment">// Each value is an interface&#123;&#125; type, that is type asserted as a string</span></span><br><span class="line">  fmt.Println(key, value.(<span class="type">string</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每个字符串对应一个 JSON 属性的名称， <code>interface&#123;&#125;</code> 类型对应它的值，这个值可以是任意类型。在代码中，其数据类型通过对 <code>interface&#123;&#125;</code> 进行断言就可以获取到。而且这些映射解析动作可以迭代执行，如此一来，可变数量的键通过一次循环中就能够处理完成。</p><h2 id="如何选择"><a href="#如何选择" class="headerlink" title="如何选择"></a>如何选择</h2><p>通常情况下，只要你能够使用结构体来描述你的 JSON 数据，你就应该使用它们。只有当遇到数据中有不确定的键或值时，无法使用结构体进行描述，才是你使用映射（map）的唯一理由。</p><p>翻译自：<a href="https://www.sohamkamani.com/blog/2017/10/18/parsing-json-in-golang/">Parsing JSON in Golang</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;当静态编程语言使用到 JSON 的时候，总是会有些费力。一方面，JSON 数据可能是任何形式的，从一个简单的数字，到一个复杂的包含内嵌对象的数组。当使用 Go 语言的时候，这意味着你要将这些变化多端的 JSON 数据放入结构化的变量中去。&lt;/p&gt;
&lt;p&gt;幸运地是，Go 尽力尝试帮我们降低编码难度，为我们提供了许多方式来解析 JSON 数据。&lt;/p&gt;
&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;Go 标准库的 json 包为我们提供了我们想要的功能。对于任意的 JSON 字符串，标准的解析方法如下：&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;quot;encoding/json&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// ... &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;myJsonString := &lt;span class=&quot;string&quot;&gt;`&amp;#123;&amp;quot;some&amp;quot;:&amp;quot;json&amp;quot;&amp;#125;`&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// `&amp;amp;myStoredVariable` is the address of the variable we want to store our&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// parsed data in&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;json.Unmarshall([]&lt;span class=&quot;type&quot;&gt;byte&lt;/span&gt;(myJsonString), &amp;amp;myStoredVariable)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;本文中我们要讨论的是，对于 &lt;code&gt;myStoredVariable&lt;/code&gt; 变量的类型，你可以有哪些不同的选择，以及决定何时采用何种类型。&lt;br&gt;
    
    </summary>
    
    
      <category term="golang" scheme="http://log.zvz.im/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>使用 Go 语言学会 Tensorflow</title>
    <link href="http://log.zvz.im/2018/07/15/go-tensorflow/"/>
    <id>http://log.zvz.im/2018/07/15/go-tensorflow/</id>
    <published>2018-07-15T00:51:03.000Z</published>
    <updated>2025-07-03T18:06:35.826Z</updated>
    
    <content type="html"><![CDATA[<p>Tensorflow 并不是一个专门用于机器学习的库，相反的，它是一个通用的用于图计算的库。它的核心部分是用 C++ 实现的，同时还有其它语言的接口库。Go 语言版本的接口库与 Python 版本的并不一样，它不仅有助于我们使用 Go 语言调用 Tensorflow，同时有助于我们了解 Tensorflow 的底层实现。</p><p><img src="https://img.zvz.im/imgs/2019/06/e18bb51e93eb9b04.jpg" alt=""><br><span id="more"></span></p><h2 id="接口库"><a href="#接口库" class="headerlink" title="接口库"></a>接口库</h2><p>Tensorflow 官方发布的代码库包含：</p><ul><li>C++ 源代码：Tensorflow 核心功能高层 &amp; 底层操作的代码实现。</li><li>Python 接口库 &amp; Python 功能库：接口库是通过 C++ 代码自动生成的，这样我们可以使用 Python 直接调用到 C++ 的方法：numpy 核心代码也是这样实现的。功能库则是对接口库方法的组合调用，它实现了大家所熟知的高层 API 接口。</li><li>Java 接口库</li><li>Go 接口库</li></ul><p>我作为一名 Go 开发者，且不是 Java 爱好者，很自然地选择了使用 Go 版本的接口库，研究它能完成哪些任务。</p><h2 id="Go-接口库"><a href="#Go-接口库" class="headerlink" title="Go 接口库"></a>Go 接口库</h2><p>首件值得注意的事，正如它的维护者们承认的，就是 Go 接口库缺少对 <code>变量</code> 支持：这些接口被设计成用于<strong>使用</strong>训练好的模型，而不是从零开始<strong>训练</strong>模型。这在 <a href="https://www.tensorflow.org/versions/master/install/install_go">Installing Tensorflow for Go </a> 中交待得很清楚。</p><blockquote><p>Tensorflow 提供了 Go 程序接口。这些接口特别适于加载 Python 库所创建的模型，然后在 Go 应用中执行。</p></blockquote><p>如果我们对于训练机器学习模型不那么感兴趣：那就恰好！不过，若你对训练模型感兴趣的话，这里有一点建议：</p><blockquote><p>作为一名真正的 Go 爱好者，应当寻求便宜之道！请使用 Python 来定义和训练模型；之后，你总是能用 Go 来加载并使用它们的。</p></blockquote><p>简言之：Go 接口库可以用来<strong>导入并定义</strong>常量图；这里说的「常量」是指没有训练过程参与，所以没有可用于训练的变量。</p><p>让我们立刻开始用 Go 来调用 Tensorflow：创建我们的第一个应用程序。</p><p>接下来，我假设你们已经安装了 Go 环境，并且已经按照 <a href="https://github.com/tensorflow/tensorflow/blob/master/tensorflow/go/README.md">README</a> 编译并安装了 Tensorflow 的接口库。</p><h2 id="理解-Tensorflow-的数据结构"><a href="#理解-Tensorflow-的数据结构" class="headerlink" title="理解 Tensorflow 的数据结构"></a>理解 Tensorflow 的数据结构</h2><p>我要在这里重申一下 Tensorflow 的定义（我为大家从 <a href="https://www.tensorflow.org/">Tensorflow 站点</a>的说明中划出了重点）：</p><blockquote><p>TensorFlow™ 是一个使用数据流图进行数值计算的开源软件库。图中的节点<strong>代表</strong>数学操作，而图中的边则<strong>代表</strong>节点间相互联系的多维数据数组（张量）。</p></blockquote><p>我们可以把 Tensorflow 看作是一种描述性语言，类似于 SQL，你可以用它描述你的需求，让底层引擎（数据库）解析你的 query 语句，检查语法和语义错误，将其转化为它的内部描述，优化并计算出结果：最后返回给你正确的结果。</p><p>所以，我们使用 API 接口时，实际是在描述一个图：当我们将它放入一个 <code>Session</code> 中，并且开始 <code>Run</code> 时，图的求值过程就开始了。</p><p>理解这些之后，让我们尝试定义一个计算图，并且在一个 <code>Session</code> 中计算它。<a href="https://godoc.org/github.com/tensorflow/tensorflow/tensorflow/go">API 文档</a>能为我们清楚地提供  <code>tensorflow</code> （缩写 <code>tf</code> ）和 <code>op</code> 包的方法列表。</p><p>如你所见，这两个包包含了我们对图进行定义和计算所需要的一切。</p><p>前一个包包含了构建类似 <code>Graph</code> 本身等基础「空」结构的方法，后一个则是最重要的包，它包含了从 C++ 实现里自动生成的接口方法。</p><p>假设我们想要计算矩阵 A 和 x 的乘积：</p><p>$ A = \begin{pmatrix}1 &amp; 2\\-1 &amp;-2\end{pmatrix}, x = \begin{pmatrix}10\\100\end{pmatrix} $</p><p>我假设读者已经知道 tensorflow 图定义的概念，知道什么是占位符而且知道它们如何工作。下面的代码是用户第一次使用 Python 接口时可能会做的尝试。我们将其命名为 <code>attempt1.go</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">tf <span class="string">&quot;github.com/tensorflow/tensorflow/tensorflow/go&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/tensorflow/tensorflow/tensorflow/go/op&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 让我们描述我们的需求：创建图</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 我们想要定义两个运行时使用的 placeholder</span></span><br><span class="line"><span class="comment">// 第一个 placeholder A 是 [2, 2] 整数张量</span></span><br><span class="line"><span class="comment">// 第二个 placeholder x 是 [2, 1] 整数张量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 然后计算 Y = Ax</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建图的节点：一个空节点，作为图的根节点</span></span><br><span class="line">root := op.NewScope()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义两个占位符</span></span><br><span class="line">A := op.Placeholder(root, tf.Int64, op.PlaceholderShape(tf.MakeShape(<span class="number">2</span>, <span class="number">2</span>)))</span><br><span class="line">x := op.Placeholder(root, tf.Int64, op.PlaceholderShape(tf.MakeShape(<span class="number">2</span>, <span class="number">1</span>)))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义可以接受 A &amp; x 作为输入的操作节点</span></span><br><span class="line">product := op.MatMul(root, A, x)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 每次我们将 `Scope` 传入一个操作时，我们都将这个操作置于这个作用域内。</span></span><br><span class="line"><span class="comment">// 如你所见，我们有一个通过 NewScope 创建空域：</span></span><br><span class="line"><span class="comment">// 这个空域是我们所创建的图的根，我们用 “/”表示它。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 现在我们让 tensorflow 通过我们的定义来构建图。</span></span><br><span class="line"><span class="comment">// 实体的图是通过我们用域和操作组合起来定义的“抽象”图生成的。</span></span><br><span class="line"></span><br><span class="line">graph, err := root.Finalize()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">// 处理这个错误没有什么用处</span></span><br><span class="line"><span class="comment">// 如果我们对图的定义做错了，我们只能手动修正这些定义。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 它很想一个 SQL 查询过程：如果查询语句错了，我们只能重写它</span></span><br><span class="line"><span class="built_in">panic</span>(err.Error())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 至此：我们的图定义语法上就没有问题了。</span></span><br><span class="line"><span class="comment">// 我们现在可以将其放入一个 Session 中使用了。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> sess *tf.Session</span><br><span class="line">sess, err = tf.NewSession(graph, &amp;tf.SessionOptions&#123;&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err.Error())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为了使用占位符，我们必须创建含有数值的张量传入网络中</span></span><br><span class="line"><span class="keyword">var</span> matrix, column *tf.Tensor</span><br><span class="line"></span><br><span class="line"><span class="comment">// A = [ [1, 2], [-1, -2] ]</span></span><br><span class="line"><span class="keyword">if</span> matrix, err = tf.NewTensor([<span class="number">2</span>][<span class="number">2</span>]<span class="type">int64</span>&#123; &#123;<span class="number">1</span>, <span class="number">2</span>&#125;, &#123;<span class="number">-1</span>, <span class="number">-2</span>&#125; &#125;); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err.Error())</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// x = [ [10], [100] ]</span></span><br><span class="line"><span class="keyword">if</span> column, err = tf.NewTensor([<span class="number">2</span>][<span class="number">1</span>]<span class="type">int64</span>&#123; &#123;<span class="number">10</span>&#125;, &#123;<span class="number">100</span>&#125; &#125;); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err.Error())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> results []*tf.Tensor</span><br><span class="line"><span class="keyword">if</span> results, err = sess.Run(<span class="keyword">map</span>[tf.Output]*tf.Tensor&#123;</span><br><span class="line">A: matrix,</span><br><span class="line">x: column,</span><br><span class="line">&#125;, []tf.Output&#123;product&#125;, <span class="literal">nil</span>); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err.Error())</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> _, result := <span class="keyword">range</span> results &#123;</span><br><span class="line">fmt.Println(result.Value().([][]<span class="type">int64</span>))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码内的注释非常丰富，请大家仔细阅读每行注释。</p><p>如果是 Python 版 Tensorflow 的使用者，现在已经可以期待代码编译后能完美运行了。我们看看是否能如愿呢：</p><p><code>go run attempt1.go</code></p><p>会得到如下结果：</p><p><code>panic: failed to add operation &quot;Placeholder&quot;: Duplicate node name in graph: &#39;Placeholder&#39;</code></p><p>稍等，这里发生了什么？错误提示很明显，有两个同名的占位符都叫作“PlaceHolder“。</p><h2 id="第一课：节点-ID"><a href="#第一课：节点-ID" class="headerlink" title="第一课：节点 ID"></a>第一课：节点 ID</h2><p>使用 Python 接口时，每当我们调用定义操作的方法时，无论它是否已经被调用过，都会生成不同的节点。下面的代码就会很顺利的返回结果 3。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line">a = tf.placeholder(tf.int32, shape=())</span><br><span class="line">b = tf.placeholder(tf.int32, shape=())</span><br><span class="line">add = tf.add(a,b)</span><br><span class="line">sess = tf.InteractiveSession()</span><br><span class="line"><span class="built_in">print</span>(sess.run(add, feed_dict=&#123;a: <span class="number">1</span>,b: <span class="number">2</span>&#125;))</span><br></pre></td></tr></table></figure><p>要验证这段程序创建了两个不同的节点，我们只需要将占位符的名字打印出来：<code>print(a.name, b.name)</code> 输出 <code>Placeholder:0 Placeholder_1:0</code> 。 这里 <code>b</code> 占位符的名字是 <code>Placeholder_1:0</code> 同时 <code>a</code> 占位符的名字是 <code>Placeholder:0</code> 。</p><p>在 Go 版本里，则不同，之前程序就因为 <code>A</code> 和 <code>x</code> 都叫作 <code>Placeholder</code> 而导致运行失败。我们可以总结如下：</p><p><strong>Go 语言版 API 接口每次在我们调用定义操作的方法时，不会自动为节点生成新的名称</strong>：操作名称是固定的，而且我们没法改变它。</p><p><strong>问答时间：</strong></p><ul><li>关于 Tensorflow 系统我们学到了什么？对于一个图来说，它的每一个节点都必须有唯一的名称。节点是以各自的名字来区分的。</li><li>节点名称是否与定义它的操作名称相同？是的，更确切地讲，不完全是，只是名称的结尾部分相同。</li></ul><p>为了说明第二个答案，让我们来修复节点的重名问题。</p><h2 id="第二课：作用域"><a href="#第二课：作用域" class="headerlink" title="第二课：作用域"></a>第二课：作用域</h2><p>正如我们刚才看到，Python 版的 API 接口会在每次定义操作时，自动生成一个新的名字。从底层实现来看，Python 接口调用了 C++ 的 <code>Scope</code> 类的 <code>WithOpName</code> 方法。以下是此方法的文档和形式声明，来自 <a href="https://github.com/tensorflow/tensorflow/blob/a5b1fb8e56ceda0ee2794ee05f5a7642157875c5/tensorflow/cc/framework/scope.h">scope.h</a> 头文件：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// Return a new scope. All ops created within the returned scope will have</span></span><br><span class="line"><span class="comment">/// names of the form &lt;name&gt;/&lt;op_name&gt;[_&lt;suffix].</span></span><br><span class="line"><span class="function">Scope <span class="title">WithOpName</span><span class="params">(<span class="type">const</span> string&amp; op_name)</span> <span class="type">const</span></span>;</span><br></pre></td></tr></table></figure><p>我们可以注意到这个用于命名节点的方法，其返回值是一个 <code>Scope</code> 对象，由此一个节点的名称，实际上是一个 <code>Scope</code> 域对象。一个 <code>Scope</code> 是一个<strong>完整路径</strong>，从根 <code>/</code> （空图）起到 <code>op_name</code> 结束。</p><p>当我们增加一个从<code>/</code> 到 <code>op_name</code> 有相同路径的节点时，会导致在同一个域中的节点重复，此时 <code>WithOpName</code> 方法会为名称添加一个后缀 <code>_&lt;suffix&gt;</code> （<code>&lt;suffix&gt;</code> 是一个计数器）。</p><p>知道这些以后，我们期望找到 <code>Scope 类型</code> 的  <code>WithOpName</code> 方法，来解决重复节点的问题。可惜的是，这个方法暂时还没有实现。</p><p>取而代之的，在<a href="https://godoc.org/github.com/tensorflow/tensorflow/tensorflow/go/op#Scope">文档中的 Scope 类型</a>部分我们看到唯一能够返回一个新的 <code>Scope</code> 的方法是 <code>SubScope(namespace string)</code> 。</p><p>引用文档如下：</p><blockquote><p>调用 SubScope 方法会返回一个新的 Scope，使得所有加入图中的操作都被置于命名空间 ‘namespace’ 中。如果命名空间与作用域中已有的命名空间重名，则会加上后缀。</p></blockquote><p>使用后缀进行冲突管理与在 C++ 中使用 <code>WithOpName</code> 方法<strong>不同</strong>：<code>WithOpName</code> 在同一个作用域内的操作名称后加上 <code>suffix</code> 后缀（这样 <code>Placeholder</code> 就变成了 <code>Placeholder_1</code> ），而 Go 使用的 <code>SubScope</code> 的方法则是<strong>对作用域名称</strong>增加后缀名 <code>suffix</code> 。</p><p>这点差异会产生完全不同的图，不过尽管不同（节点放在不同的作用域中），从计算角度看它们是等价的。</p><p>让我们修改一下占位符的定义过程，定义两个不同的节点，然后打印出 <code>Scope</code> 的名称。</p><p>让我们创建文件 <code>attempt2.go</code> 将下面几行代码</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">A := op.Placeholder(root, tf.Int64, op.PlaceholderShape(tf.MakeShape(<span class="number">2</span>, <span class="number">2</span>)))</span><br><span class="line">x := op.Placeholder(root, tf.Int64, op.PlaceholderShape(tf.MakeShape(<span class="number">2</span>, <span class="number">1</span>)))</span><br></pre></td></tr></table></figure><p>改成</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// define 2 subscopes of the root subscopes, called &quot;input&quot;. In this</span></span><br><span class="line"><span class="comment">// way we expect to have a input/ and a input_1/ scope under the root scope</span></span><br><span class="line">A := op.Placeholder(root.SubScope(<span class="string">&quot;input&quot;</span>), tf.Int64, op.PlaceholderShape(tf.MakeShape(<span class="number">2</span>, <span class="number">2</span>)))</span><br><span class="line">x := op.Placeholder(root.SubScope(<span class="string">&quot;input&quot;</span>), tf.Int64, op.PlaceholderShape(tf.MakeShape(<span class="number">2</span>, <span class="number">1</span>)))</span><br><span class="line">fmt.Println(A.Op.Name(), x.Op.Name())</span><br></pre></td></tr></table></figure><p>正常编译并运行：<code>go run attempt2.go</code> 。结果如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">input/Placeholder input_1/Placeholder</span><br></pre></td></tr></table></figure><p><strong>问答时间：</strong></p><p>关于 Tensorflow 系统我们学到了什么？一个节点可由它被定义的作用域所区分。作用域就是从图的根节点直到操作节点的路径。有两种方式可以定义执行相同操作的节点：在不同的作用域中定义操作（Go 的方式）或者改变操作名称（Python 自动实现或者我们可以使用 C++ 做到）</p><p>我们刚刚解决了节点名称重复的问题，另一个问题又出现了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">panic: failed to add operation &quot;MatMul&quot;: Value for attr &#x27;T&#x27; of int64 is not in the list of allowed values: half, float, double, int32, complex64, complex128</span><br></pre></td></tr></table></figure><p>为什么 <code>MatMul</code> 节点定义会报错？我们只是想让两个 <code>tf.int64</code> 矩阵相乘！看起来 <code>int64</code> 是 <code>MatMul</code> 唯一不能接受的参数类型。</p><blockquote><p>属性 ‘T’ 的取值 int64，不在允许的列表中：half，float，double，int32，complex32， complex64， complex128</p></blockquote><p>这是什么列表？为什么我们可以将两个 <code>int32</code> 类型的矩阵相乘却不支持 <code>int64</code> 类型？</p><p>让我们继续研究这个问题，搞清楚到底发生了什么。</p><h2 id="第三课：Tensorflow-类型体系"><a href="#第三课：Tensorflow-类型体系" class="headerlink" title="第三课：Tensorflow 类型体系"></a>第三课：Tensorflow 类型体系</h2><p>让我们深入到 C++ 源码中，看一下 <code>MatMul</code> 操作的函数声明：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">REGISTER_OP</span>(<span class="string">&quot;MatMul&quot;</span>)</span><br><span class="line">    .<span class="built_in">Input</span>(<span class="string">&quot;a: T&quot;</span>)</span><br><span class="line">    .<span class="built_in">Input</span>(<span class="string">&quot;b: T&quot;</span>)</span><br><span class="line">    .<span class="built_in">Output</span>(<span class="string">&quot;product: T&quot;</span>)</span><br><span class="line">    .<span class="built_in">Attr</span>(<span class="string">&quot;transpose_a: bool = false&quot;</span>)</span><br><span class="line">    .<span class="built_in">Attr</span>(<span class="string">&quot;transpose_b: bool = false&quot;</span>)</span><br><span class="line">    .<span class="built_in">Attr</span>(<span class="string">&quot;T: &#123;half, float, double, int32, complex64, complex128&#125;&quot;</span>)</span><br><span class="line">    .<span class="built_in">SetShapeFn</span>(shape_inference::MatMulShape)</span><br><span class="line">    .<span class="built_in">Doc</span>(<span class="string">R&quot;doc(</span></span><br><span class="line"><span class="string">Multiply the matrix &quot;a&quot; by the matrix &quot;b&quot;.</span></span><br><span class="line"><span class="string">The inputs must be two-dimensional matrices and the inner dimension of</span></span><br><span class="line"><span class="string">&quot;a&quot; (after being transposed if transpose_a is true) must match the</span></span><br><span class="line"><span class="string">outer dimension of &quot;b&quot; (after being transposed if transposed_b is</span></span><br><span class="line"><span class="string">true).</span></span><br><span class="line"><span class="string">*Note*: The default kernel implementation for MatMul on GPUs uses</span></span><br><span class="line"><span class="string">cublas.</span></span><br><span class="line"><span class="string">transpose_a: If true, &quot;a&quot; is transposed before multiplication.</span></span><br><span class="line"><span class="string">transpose_b: If true, &quot;b&quot; is transposed before multiplication.</span></span><br><span class="line"><span class="string">)doc&quot;</span>);</span><br></pre></td></tr></table></figure><p>这行代码定义了 <code>MatMul</code> 操作的接口：特别注意，我们使用 <code>REGISTER_OP</code> 宏声明了操作的：</p><ul><li>名称：<code>MatMul</code></li><li>参数：<code>a</code>，<code>b</code></li><li>属性（可选参数）：<code>transpose_a</code>，<code>transpose_b</code></li><li>模板 <code>T</code> 支持的类型：<code>half, float, double, int32, complex64, complex128</code></li><li>输出形式：自动推理的</li><li>文档</li></ul><p>这个宏调用不包含任何 C++ 代码，不过它告诉我们<strong>当定义个一个操作时，即使它使用了模板，我们也必须指定对于指定类型（或属性）<code>T</code> 所支持的类型列表</strong>。例如，属性 <code>.Attr(&quot;T: &#123;half, float, double, int32, complex64, complex128&#125;&quot;)</code> 就限制了类型 <code>T</code> 必须是列表中的某一项。</p><p>我们可以从<a href="https://www.tensorflow.org/extend/adding_an_op">教程</a>中看到，甚至在使用模板 <code>T</code> 的时候，我们也必须为每个支持的重载显示地注册到内核中。内核是以 CUAD 方式对 C/C++ 函数进行并行调用执行的。</p><p><code>MatMul</code> 的作者之所以决定只支持之前列出的参数类型，而不支持 <code>int64</code> 类型，可能有以下两个原因：</p><ol><li>疏忽：这是有可能的，毕竟 Tensorflow 的代码也是人写的！</li><li>为了支持那些不完全支持 <code>int64</code> 类型操作的设备，这样内核的这些特定实现就不会到处都是，而导致在本可以支持的硬件上无法运行。</li></ol><p>回到我们的报错上来：修复的方法很明显。我们必须要给 <code>MatMul</code> 方法传递它所支持的数据类型。</p><p>让我们创建 <code>attempt3.go</code> 文件，将每一行用到 <code>int64</code> 的地方改成 <code>int32</code>。</p><p>有件事要注意一下：<strong>Go 语言的接口包定义了一套自有的类型，与 Go 原生类型基本上是 1:1 对应的关系。当我们向图内填入参数时需要对照这个对应关系（比如，对于定义为 <code>tf.Int32</code> 的占位符要传入 <code>int32</code> 类型的值）。从图中读取数据时也要准从相同的法则。</strong>由张量计算返回的<code>*tf.Tensor</code> 类型，自带 <code>Value()</code> 方法，它可以返回一个 <code>interface&#123;&#125;</code> 类型的值，必须由我们去转化为正确的类型（我们构建图的时候可知此类型）。</p><p>正常执行 <code>go run attempt3.go</code> 。结果如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">input/Placeholder input_1/Placeholder</span><br><span class="line">[[210] [-210]]</span><br></pre></td></tr></table></figure><p>棒极了！</p><p>这儿有一份完整的 <code>attempt3</code> 的代码，你可以编译并运行它。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main                                        </span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (                                            </span><br><span class="line">        <span class="string">&quot;fmt&quot;</span>                                       </span><br><span class="line">        tf <span class="string">&quot;github.com/tensorflow/tensorflow/tensorflow/go&quot;</span>                                              </span><br><span class="line">        <span class="string">&quot;github.com/tensorflow/tensorflow/tensorflow/go/op&quot;</span>                                              </span><br><span class="line">)                                                   </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;                                       </span><br><span class="line">        <span class="comment">// Let&#x27;s describe what we want: create the graph                                                 </span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// We want to define two placeholder to fill at runtime                                          </span></span><br><span class="line">        <span class="comment">// the first placeholder A will be a [2, 2] tensor of integers                                   </span></span><br><span class="line">        <span class="comment">// the second placeholder x will be a [2, 1] tensor of intergers                                 </span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Then we want to compute Y = Ax           </span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Create the first node of the graph: an empty node, the root of our graph                      </span></span><br><span class="line">        root := op.NewScope()                       </span><br><span class="line"></span><br><span class="line">        <span class="comment">// Define the 2 placeholders                </span></span><br><span class="line">        <span class="comment">// define 2 subscopes of the root subscopes, called &quot;input&quot;. In this                             </span></span><br><span class="line">        <span class="comment">// way we expect the have a input/ and a input_1/ scope under the root scope                     </span></span><br><span class="line">        A := op.Placeholder(root.SubScope(<span class="string">&quot;input&quot;</span>), tf.Int32, op.PlaceholderShape(tf.MakeShape(<span class="number">2</span>, <span class="number">2</span>)))   </span><br><span class="line">        x := op.Placeholder(root.SubScope(<span class="string">&quot;input&quot;</span>), tf.Int32, op.PlaceholderShape(tf.MakeShape(<span class="number">2</span>, <span class="number">1</span>)))   </span><br><span class="line">        fmt.Println(A.Op.Name(), x.Op.Name())       </span><br><span class="line"></span><br><span class="line">        <span class="comment">// Define the operation node that accepts A &amp; x as inputs                                        </span></span><br><span class="line">        product := op.MatMul(root, A, x)            </span><br><span class="line"></span><br><span class="line">        <span class="comment">// Every time we passed a `Scope` to an operation, we placed that operation **under**            </span></span><br><span class="line">        <span class="comment">// that scope.                              </span></span><br><span class="line">        <span class="comment">// As you can see, we have an empty scope (created with NewScope): the empty scope               </span></span><br><span class="line">        <span class="comment">// is the root of our graph and thus we denote it with &quot;/&quot;.                                      </span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Now we ask tensorflow to build the graph from our definition.                                 </span></span><br><span class="line">        <span class="comment">// The concrete graph is created from the &quot;abstract&quot; graph we defined using the combination      </span></span><br><span class="line">        <span class="comment">// of scope and op.                         </span></span><br><span class="line"></span><br><span class="line">        graph, err := root.Finalize()               </span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;                             </span><br><span class="line">                <span class="comment">// It&#x27;s useless trying to handle this error in any way:                                  </span></span><br><span class="line">                <span class="comment">// if we defined the graph wrongly we have to manually fix the definition.               </span></span><br><span class="line"></span><br><span class="line">                <span class="comment">// It&#x27;s like a SQL query: if the query is not syntactically valid we have to rewrite it  </span></span><br><span class="line">                <span class="built_in">panic</span>(err.Error())                  </span><br><span class="line">        &#125;                                           </span><br><span class="line"></span><br><span class="line">        <span class="comment">// If here: our graph is syntatically valid.</span></span><br><span class="line">        <span class="comment">// We can now place it within a Session and execute it.</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> sess *tf.Session                        </span><br><span class="line">        sess, err = tf.NewSession(graph, &amp;tf.SessionOptions&#123;&#125;)                                           </span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;                             </span><br><span class="line">                <span class="built_in">panic</span>(err.Error())                  </span><br><span class="line">        &#125;                                           </span><br><span class="line"></span><br><span class="line">        <span class="comment">// In order to use placeholders, we have to create the Tensors containing the values to feed into                                                                                                          </span></span><br><span class="line">        <span class="comment">// the network                              </span></span><br><span class="line">        <span class="keyword">var</span> matrix, column *tf.Tensor               </span><br><span class="line"></span><br><span class="line">        <span class="comment">// A = [ [1, 2], [-1, -2] ]                 </span></span><br><span class="line">        <span class="keyword">if</span> matrix, err = tf.NewTensor([<span class="number">2</span>][<span class="number">2</span>]<span class="type">int32</span>&#123;&#123;<span class="number">1</span>, <span class="number">2</span>&#125;, &#123;<span class="number">-1</span>, <span class="number">-2</span>&#125;&#125;); err != <span class="literal">nil</span> &#123;                       </span><br><span class="line">                <span class="built_in">panic</span>(err.Error())                  </span><br><span class="line">        &#125;                                           </span><br><span class="line">        <span class="comment">// x = [ [10], [100] ]                      </span></span><br><span class="line">        <span class="keyword">if</span> column, err = tf.NewTensor([<span class="number">2</span>][<span class="number">1</span>]<span class="type">int32</span>&#123;&#123;<span class="number">10</span>&#125;, &#123;<span class="number">100</span>&#125;&#125;); err != <span class="literal">nil</span> &#123;                            </span><br><span class="line">                <span class="built_in">panic</span>(err.Error())                  </span><br><span class="line">        &#125;                                           </span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> results []*tf.Tensor                    </span><br><span class="line">        <span class="keyword">if</span> results, err = sess.Run(<span class="keyword">map</span>[tf.Output]*tf.Tensor&#123;                                             </span><br><span class="line">                A: matrix,                          </span><br><span class="line">                x: column,                          </span><br><span class="line">        &#125;, []tf.Output&#123;product&#125;, <span class="literal">nil</span>); err != <span class="literal">nil</span> &#123; </span><br><span class="line">                <span class="built_in">panic</span>(err.Error())                  </span><br><span class="line">        &#125;                                           </span><br><span class="line">        <span class="keyword">for</span> _, result := <span class="keyword">range</span> results &#123;            </span><br><span class="line">                fmt.Println(result.Value().([][]<span class="type">int32</span>))                                                  </span><br><span class="line">        &#125;                                           </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>问答时间：</strong></p><p>关于 Tensorflow 系统我们学到了什么？每个操作都有它自己的关联核心实现。Tensorflow 可以看作是一种强类型的描述性语言。它不仅要遵守 C++ 的类型规则，它还得在注册操作时指定执行时使用数据的类型。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>使用 Go 语言定义图并进行运算，带给我们一次深入理解 Tensorflow 底层架构的机会。采取逐步试错的方式，我们解决了这个简单的问题，而且一步步学习到了关于图，图的节点以及类型体系的新知识。</p><p>翻译自：<a href="https://pgaleone.eu/tensorflow/go/2017/05/29/understanding-tensorflow-using-go/">Understanding Tensorflow using Go</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Tensorflow 并不是一个专门用于机器学习的库，相反的，它是一个通用的用于图计算的库。它的核心部分是用 C++ 实现的，同时还有其它语言的接口库。Go 语言版本的接口库与 Python 版本的并不一样，它不仅有助于我们使用 Go 语言调用 Tensorflow，同时有助于我们了解 Tensorflow 的底层实现。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img.zvz.im/imgs/2019/06/e18bb51e93eb9b04.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="golang" scheme="http://log.zvz.im/tags/golang/"/>
    
      <category term="tensorflow" scheme="http://log.zvz.im/tags/tensorflow/"/>
    
  </entry>
  
  <entry>
    <title>百万请求一分钟，Golang 轻松来搞定</title>
    <link href="http://log.zvz.im/2018/02/28/handling-million-requests-with-golang/"/>
    <id>http://log.zvz.im/2018/02/28/handling-million-requests-with-golang/</id>
    <published>2018-02-28T14:57:54.000Z</published>
    <updated>2025-07-03T18:06:35.826Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img.zvz.im/imgs/2019/06/8cdd2b7f20b4b9fe.jpg" alt=""></p><p>我在反广告、杀病毒、检木马等行业的不同软件公司里已经工作 15 年以上了，非常了解这类系统软件因每天处理海量数据而导致的复杂性。</p><p>目前我作为 <a href="https://smsjunk.com/">smsjunk.com</a> 的 CEO 和 <a href="http://knowbe4.com/">KnowBe4</a> 的主架构师，在这两个网络安全领域的公司里工作。<br><span id="more"></span><br>有趣的是，在过去的 10 年里，作为软件工程师，我接触到的 web 后端代码大多是用 Ruby on Rails 开发的。请不要误会，我很喜欢 Ruby on Railds 框架，而且我认为它是一套令人称赞的框架，不过时间一长，你就会习惯于使用 ruby 语言的方式思考和设计系统，会忘记利用多线程，并行化，快速执行和小的内存消耗，软件架构本可以如此高效且简单。很多年来，我也是一个 C/C++，Delphi 以及 C# 的使用者，而且我开始认识到使用正确的工具能让事情变得更简单。</p><blockquote><p>我对互联网上没完没了的语言框架之间的论战并不感冒。因为我相信解决方案的效能及代码可维护性主要倚仗于你的架构能做到多简单。</p></blockquote><h2 id="实际问题"><a href="#实际问题" class="headerlink" title="实际问题"></a>实际问题</h2><p>在实现某个遥测分析系统时，我们遇到一个实际问题，要处理来自数百万终端的 POST 请求。其中的 web 请求处理过程会接收到一个 JSON 文档，它包含一个由许多荷载数据组成的集合，我们要把它写到 Amazon S3 存储中，之后我们的 map-reduce 系统就可以对这些数据进行处理。</p><p>一般我们会利用如下的组件去创建一个有后台工作层的架构，如：</p><ul><li>Sidekiq</li><li>Resque</li><li>DelayedJob</li><li>Elasticbeanstalk Worker Tier</li><li>RabbitMQ</li><li>等等</li></ul><p>并且建立两个不同的服务集群，一个用作 web 前端接收数据，另一个执行具体的工作，这样我们就能动态调整后台处理工作的能力了。</p><p>不过从项目伊始，我们的团队就认为应该用 Go 语言来实现这项工作，因为在讨论过程中我们发现这可能是一个流量巨大的系统。我已经使用 Go 语言快两年了，而且我们已经在工作中用它开发了一些系统，只是还没遇到过负载如此大的系统。</p><p>我们从定义一些 web 的 POST 请求载荷数据结构开始，还有一个用于上传到 S3 存储的方法。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> PayloadCollection <span class="keyword">struct</span> &#123;</span><br><span class="line">WindowsVersion  <span class="type">string</span>    <span class="string">`json:&quot;version&quot;`</span></span><br><span class="line">Token           <span class="type">string</span>    <span class="string">`json:&quot;token&quot;`</span></span><br><span class="line">Payloads        []Payload <span class="string">`json:&quot;data&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Payload <span class="keyword">struct</span> &#123;</span><br><span class="line">    <span class="comment">// [redacted]</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Payload)</span></span> UploadToS3() <span class="type">error</span> &#123;</span><br><span class="line"><span class="comment">// the storageFolder method ensures that there are no name collision in</span></span><br><span class="line"><span class="comment">// case we get same timestamp in the key name</span></span><br><span class="line">storage_path := fmt.Sprintf(<span class="string">&quot;%v/%v&quot;</span>, p.storageFolder, time.Now().UnixNano())</span><br><span class="line"></span><br><span class="line">bucket := S3Bucket</span><br><span class="line"></span><br><span class="line">b := <span class="built_in">new</span>(bytes.Buffer)</span><br><span class="line">encodeErr := json.NewEncoder(b).Encode(payload)</span><br><span class="line"><span class="keyword">if</span> encodeErr != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> encodeErr</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Everything we post to the S3 bucket should be marked &#x27;private&#x27;</span></span><br><span class="line"><span class="keyword">var</span> acl = s3.Private</span><br><span class="line"><span class="keyword">var</span> contentType = <span class="string">&quot;application/octet-stream&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> bucket.PutReader(storage_path, b, <span class="type">int64</span>(b.Len()), contentType, acl, s3.Options&#123;&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Go-routines-的傻瓜式用法"><a href="#Go-routines-的傻瓜式用法" class="headerlink" title="Go routines 的傻瓜式用法"></a>Go routines 的傻瓜式用法</h2><p>起初我们实现了一个非常简单的 POST 处理接口，尝试用一个简单的 goroutine 并行工作处理过程：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">payloadHandler</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> r.Method != <span class="string">&quot;POST&quot;</span> &#123;</span><br><span class="line">w.WriteHeader(http.StatusMethodNotAllowed)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Read the body into a string for json decoding</span></span><br><span class="line"><span class="keyword">var</span> content = &amp;PayloadCollection&#123;&#125;</span><br><span class="line">err := json.NewDecoder(io.LimitReader(r.Body, MaxLength)).Decode(&amp;content)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">w.Header().Set(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;application/json; charset=UTF-8&quot;</span>)</span><br><span class="line">w.WriteHeader(http.StatusBadRequest)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Go through each payload and queue items individually to be posted to S3</span></span><br><span class="line"><span class="keyword">for</span> _, payload := <span class="keyword">range</span> content.Payloads &#123;</span><br><span class="line"><span class="keyword">go</span> payload.UploadToS3()   <span class="comment">// &lt;----- DON&#x27;T DO THIS</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">w.WriteHeader(http.StatusOK)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在普通负载的情况下，这段代码对于大多数人已经够用了，不过很快就被证明了不适合大流量的情形。当我们把第一个版本的代码部署到生产环境后，才发现实际情况远远超出我们的预期，系统流量比之前预计的大许多，我们低估了数据负载量。</p><p>上面的处理方式从几个方面来看都有问题。我们无法办法控制创建的 go routines 的数量。而且我们每分钟收到一百万次的 POST 请求，代码必然很快就崩溃。</p><h2 id="再次尝试"><a href="#再次尝试" class="headerlink" title="再次尝试"></a>再次尝试</h2><p>我们需要寻找别的出路。从一开始，我们就在讨论怎样保证请求处理时间较短，然后在后台进行工作处理。当然，在 Ruby on Rails 里必须这样做，否则你会阻塞掉所有的 web 处理进程，无论你是否使用了 puma，unicorn，passenger（我们这里就不讨论 JRuby 了）。然后我们可能会使用常见的解决方案，比如 Resque，Sidkiq，SQS，等等。有许多方法可以完成这个任务。</p><p>所以第二次迭代采用了缓冲通道（ buffered channel ），我们可以将一些工作先放入队列，再将它们上传至 S3，由于我们能够控制队列的大小，而且有充足的内存可用，所以我们以为将任务缓冲到 channel 队列中就可以了。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Queue <span class="keyword">chan</span> Payload</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">    Queue = <span class="built_in">make</span>(<span class="keyword">chan</span> Payload, MAX_QUEUE)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">payloadHandler</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// Go through each payload and queue items individually to be posted to S3</span></span><br><span class="line">    <span class="keyword">for</span> _, payload := <span class="keyword">range</span> content.Payloads &#123;</span><br><span class="line">        Queue &lt;- payload</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后将任务从队列中取出再进行处理，我们使用了类似下面的代码：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">StartProcessor</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        <span class="keyword">select</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> job := &lt;-Queue:</span><br><span class="line">            job.payload.UploadToS3()  <span class="comment">// &lt;-- 仍然不好使！</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>老实说，我都不知道当时我们在想些什么。这一定是喝红牛熬夜导致的结果。这个方案没给我们带来任何好处，我们只是将一个有问题的并发过程替换为了一个缓冲队列，它只是将问题推后了而已。我们的同步处理过程每次只将一份载荷数据上传到 S3，由于接受到请求的速率远大于单例程上传到 S3 的能力，我们的缓冲队列很快就满了，导致请求处理过程阻塞，无法将更多的数据送入队列。</p><p>我们傻乎乎地忽略了问题，最终开始了系统的死亡倒计时。在部署了这个问题版本之后几分钟里，系统的延迟以固定的速率不断增加。</p><p><img src="https://img.zvz.im/imgs/2019/06/a7dd8e1bb4446be3.jpg" alt=""></p><h2 id="更好的解决方案"><a href="#更好的解决方案" class="headerlink" title="更好的解决方案"></a>更好的解决方案</h2><p>我们决定使用 Go 通道的一种常用模式构建一个两层的通道系统，一个通道用作任务队列，另一个来控制处理任务时的并发量。</p><p>这个办法是想以一种可持续的速率、并发地上传数据至 S3 存储，这样既不会把机器跑挂掉也不会产生 S3 的连接错误。因此我们选择使用了一种 Job/Worker 模式。如果你熟悉 Java，C# 等语言，可以认为这是使用通道以 Go 语言的方式实现了一个工作线程池。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> (</span><br><span class="line">MaxWorker = os.Getenv(<span class="string">&quot;MAX_WORKERS&quot;</span>)</span><br><span class="line">MaxQueue  = os.Getenv(<span class="string">&quot;MAX_QUEUE&quot;</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Job represents the job to be run</span></span><br><span class="line"><span class="keyword">type</span> Job <span class="keyword">struct</span> &#123;</span><br><span class="line">Payload Payload</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// A buffered channel that we can send work requests on.</span></span><br><span class="line"><span class="keyword">var</span> JobQueue <span class="keyword">chan</span> Job</span><br><span class="line"></span><br><span class="line"><span class="comment">// Worker represents the worker that executes the job</span></span><br><span class="line"><span class="keyword">type</span> Worker <span class="keyword">struct</span> &#123;</span><br><span class="line">WorkerPool  <span class="keyword">chan</span> <span class="keyword">chan</span> Job</span><br><span class="line">JobChannel  <span class="keyword">chan</span> Job</span><br><span class="line">quit    <span class="keyword">chan</span> <span class="type">bool</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewWorker</span><span class="params">(workerPool <span class="keyword">chan</span> <span class="keyword">chan</span> Job)</span></span> Worker &#123;</span><br><span class="line"><span class="keyword">return</span> Worker&#123;</span><br><span class="line">WorkerPool: workerPool,</span><br><span class="line">JobChannel: <span class="built_in">make</span>(<span class="keyword">chan</span> Job),</span><br><span class="line">quit:       <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">bool</span>)&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Start method starts the run loop for the worker, listening for a quit channel in</span></span><br><span class="line"><span class="comment">// case we need to stop it</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(w Worker)</span></span> Start() &#123;</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="comment">// register the current worker into the worker queue.</span></span><br><span class="line">w.WorkerPool &lt;- w.JobChannel</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> job := &lt;-w.JobChannel:</span><br><span class="line"><span class="comment">// we have received a work request.</span></span><br><span class="line"><span class="keyword">if</span> err := job.Payload.UploadToS3(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Errorf(<span class="string">&quot;Error uploading to S3: %s&quot;</span>, err.Error())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> &lt;-w.quit:</span><br><span class="line"><span class="comment">// we have received a signal to stop</span></span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Stop signals the worker to stop listening for work requests.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(w Worker)</span></span> Stop() &#123;</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">w.quit &lt;- <span class="literal">true</span></span><br><span class="line">&#125;()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们修改了 web 请求处理过程，使用数据载荷创建了一个 <code>Job</code> 实例，然后将其送入 <code>JobQueue</code> 通道中供工作例程使用。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">payloadHandler</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> r.Method != <span class="string">&quot;POST&quot;</span> &#123;</span><br><span class="line">w.WriteHeader(http.StatusMethodNotAllowed)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Read the body into a string for json decoding</span></span><br><span class="line"><span class="keyword">var</span> content = &amp;PayloadCollection&#123;&#125;</span><br><span class="line">err := json.NewDecoder(io.LimitReader(r.Body, MaxLength)).Decode(&amp;content)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">w.Header().Set(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;application/json; charset=UTF-8&quot;</span>)</span><br><span class="line">w.WriteHeader(http.StatusBadRequest)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Go through each payload and queue items individually to be posted to S3</span></span><br><span class="line">    <span class="keyword">for</span> _, payload := <span class="keyword">range</span> content.Payloads &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// let&#x27;s create a job with the payload</span></span><br><span class="line">        work := Job&#123;Payload: payload&#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Push the work onto the queue.</span></span><br><span class="line">        JobQueue &lt;- work</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    w.WriteHeader(http.StatusOK)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 web 服务初始化的过程中，我们创建了一个 <code>Dispatcher</code> 实例，调用 <code>Run()</code> 方法创建了工作例程池，并且通过监听 <code>JobQueue</code> 获取工作任务。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dispatcher := NewDispatcher(MaxWorker) </span><br><span class="line">dispatcher.Run()</span><br></pre></td></tr></table></figure><p>下面的代码是任务分派器的具体实现：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Dispatcher <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// A pool of workers channels that are registered with the dispatcher</span></span><br><span class="line">WorkerPool <span class="keyword">chan</span> <span class="keyword">chan</span> Job</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewDispatcher</span><span class="params">(maxWorkers <span class="type">int</span>)</span></span> *Dispatcher &#123;</span><br><span class="line">pool := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">chan</span> Job, maxWorkers)</span><br><span class="line"><span class="keyword">return</span> &amp;Dispatcher&#123;WorkerPool: pool&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d *Dispatcher)</span></span> Run() &#123;</span><br><span class="line">    <span class="comment">// starting n number of workers</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; d.maxWorkers; i++ &#123;</span><br><span class="line">worker := NewWorker(d.pool)</span><br><span class="line">worker.Start()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> d.dispatch()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d *Dispatcher)</span></span> dispatch() &#123;</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> job := &lt;-JobQueue:</span><br><span class="line"><span class="comment">// a job request has been received</span></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(job Job)</span></span> &#123;</span><br><span class="line"><span class="comment">// try to obtain a worker job channel that is available.</span></span><br><span class="line"><span class="comment">// this will block until a worker is idle</span></span><br><span class="line">jobChannel := &lt;-d.WorkerPool</span><br><span class="line"></span><br><span class="line"><span class="comment">// dispatch the job to the worker job channel</span></span><br><span class="line">jobChannel &lt;- job</span><br><span class="line">&#125;(job)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意我们提供了一个最大数量的参数，用于控制工作池中初始的例程数量。因为这个项目使用了 Amazon Elasticbeanstalk 以及 docker 中的 Go 环境，所以我们努力遵循 <a href="http://12factor.net/">12-factor</a> 的方法，从环境变量中读取配置值，便于在生产环境中进行系统配置。通过这种方式，我们可以控制工作例程的数量和工作队列的长度，无需对集群进行重新部署，我们就能快速调整参数值。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ( </span><br><span class="line">  MaxWorker = os.Getenv(<span class="string">&quot;MAX_WORKERS&quot;</span>) </span><br><span class="line">  MaxQueue  = os.Getenv(<span class="string">&quot;MAX_QUEUE&quot;</span>) </span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>在部署这份代码后，我们发现系统的延迟立刻大幅下降，而我们处理请求的能力得到了巨大的提升。</p><p><img src="https://img.zvz.im/imgs/2019/06/d21c1ec060f286f7.jpg" alt=""></p><p>在我们的 Elastic Load Balancers 全部预热完成几分钟后，可以看到我们的 ElasticBeanstalk 应用每分钟可以处理近一百万的请求，常常会在流量早高峰的时候突破每分钟一百万。</p><p>我们刚把新代码部署上去，服务器数量就从 100 台服务器大幅下降到大约 20 台服务器。</p><p><img src="https://img.zvz.im/imgs/2019/06/3c0a7a5f497861ed.jpg" alt=""></p><p>在我们调整集群配置和自动缩放配置后，我们能将服务器的使用数量降低到四个 EC2 c4.Large 实例，再将 Elastic Auto-Scaling 设置为 CPU 使用率持续五分钟超 90% 的时候，增加一个实例。</p><p><img src="https://img.zvz.im/imgs/2019/06/f1571f323aa5126a.jpg" alt=""></p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>在我的认知中，「简单化」才是常胜秘诀。我们本可能设计一个更复杂的系统，拥有许多队列和后台工作例程，部署也更复杂。但是我们最终利用了 Elasticbeanstalk 的自动缩放能力和 Go 语言为我们带来的高效简单的并发解决方案。</p><p>并不是每天都能发生这样的事情：一个只有四台机器集群处理着每分钟一百万的 POST 请求，把数据写入 Amazon S3 存储中，而且这些机器可能比我现在的 MacBook Pro 性能还差。</p><p>每件工作总会有更合适的工具。当你的 Ruby on Rails 系统需要强大的请求处理能力时，不妨尝试一下 ruby 生态圈外那些更加简单有效的解决方案。</p><p>翻译自：<a href="https://medium.com/smsjunk/handling-1-million-requests-per-minute-with-golang-f70ac505fcaa">Handling 1 Million Requests per Minute with Golang</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://img.zvz.im/imgs/2019/06/8cdd2b7f20b4b9fe.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;我在反广告、杀病毒、检木马等行业的不同软件公司里已经工作 15 年以上了，非常了解这类系统软件因每天处理海量数据而导致的复杂性。&lt;/p&gt;
&lt;p&gt;目前我作为 &lt;a href=&quot;https://smsjunk.com/&quot;&gt;smsjunk.com&lt;/a&gt; 的 CEO 和 &lt;a href=&quot;http://knowbe4.com/&quot;&gt;KnowBe4&lt;/a&gt; 的主架构师，在这两个网络安全领域的公司里工作。&lt;br&gt;
    
    </summary>
    
    
      <category term="golang" scheme="http://log.zvz.im/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>Javascript 异步探奇：Aysn/Await</title>
    <link href="http://log.zvz.im/2017/12/12/javascript-async-await/"/>
    <id>http://log.zvz.im/2017/12/12/javascript-async-await/</id>
    <published>2017-12-12T16:23:02.000Z</published>
    <updated>2025-07-03T18:06:35.827Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img.zvz.im/imgs/2019/06/44f169f7325d65cf.png" alt=""></p><h3 id="Async-Await-为何物？"><a href="#Async-Await-为何物？" class="headerlink" title="Async/Await 为何物？"></a>Async/Await 为何物？</h3><p>Async/Await 即是异步函数（Async Functions），是 JavaScript 中控制异步流程的特殊语法。目前，大多数主流浏览器已经支持了此语法。它的诞生灵感来源于 C# 和 F# 编程语言。目前 Aysnc/Await 已进入 JavaScript/EcmaScript 2017 标准。<br><span id="more"></span></p><p>简单来说，一个异步函数 <code>async function</code> 就是一个返回值为 <code>Promise</code> 对象的函数 <code>function</code>。在 <code>async function</code> 异步函数中才可以使用 <code>await</code> 关键字。Await 关键字应放在返回值为 Promise 对象的表达式之前，然后它会从这个 Promise 中取得解决值，虽然看上去像是一条同步执行的语句，但实际 Promise 的执行过程仍然是异步的。举个例子往往能解释得更清楚😁。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这是一个普通的函数，它会返回一个 promise。</span></span><br><span class="line"><span class="comment">// 该 promise 于 2 秒后解决为 &quot;MESSAGE&quot;。</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getMessage</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="title function_">resolve</span>(<span class="string">&quot;MESSAGE&quot;</span>), <span class="number">2000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">start</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> message = <span class="keyword">await</span> <span class="title function_">getMessage</span>();</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`The message is: <span class="subst">$&#123;message&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">start</span>().<span class="title function_">then</span>(<span class="function"><span class="params">msg</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(msg));</span><br><span class="line"><span class="comment">// &quot;the message is: MESSAGE&quot;</span></span><br></pre></td></tr></table></figure><h3 id="为何使用-Async-Await-？"><a href="#为何使用-Async-Await-？" class="headerlink" title="为何使用 Async/Await ？"></a>为何使用 Async/Await ？</h3><p>Async/Await 为异步执行的代码提供了一种与同步代码相同的书写方式。它还为异步错误处理提供了一种简洁直接的处理方式，因为它利用了 <code>try..catch</code> 的语法结构，这与一般的同步代码处理错误的方式一致。</p><p>在进一步深入之前，我们必须强调一个前提：Async/Await 是绝对依赖于 <a href="https://medium.com/@BenDiuguid/asynchronous-adventures-in-javascript-promises-1e0da27a3b4">JavaScript Promises</a> 的，想要完全理解 Async/Await 就必须先了解它。</p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><h3 id="Async-函数"><a href="#Async-函数" class="headerlink" title="Async 函数"></a>Async 函数</h3><p>创建一个异步函数 <code>async function</code> ，只需要在函数申明前加上 <code>async</code> 关键字即可，如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fetchWrapper</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">fetch</span>(<span class="string">&#x27;/api/url/&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">fetchWrapper</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; <span class="title function_">fetch</span>(<span class="string">&#x27;/api/url/&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">fetchWrapper</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Await-关键字"><a href="#Await-关键字" class="headerlink" title="Await 关键字"></a>Await 关键字</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">updateBlogPost</span>(<span class="params">postId, modifiedPost</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> oldPost = <span class="keyword">await</span> <span class="title function_">getPost</span>(postId);</span><br><span class="line">  <span class="keyword">const</span> updatedPost = &#123; ...oldPost, ...modifiedPost &#125;;</span><br><span class="line">  <span class="keyword">const</span> savedPost = <span class="keyword">await</span> <span class="title function_">savePost</span>(updatedPost);</span><br><span class="line">  <span class="keyword">return</span> savedPost;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这里 <code>await</code> 被用在返回 <a href="https://medium.com/@BenDiuguid/asynchronous-adventures-in-javascript-promises-1e0da27a3b4">promise</a> 的函数（现在也可称之为异步函数 <code>aync functions</code>）前。在函数的第一行 oldPost 被赋予了异步函数 <code>getPost</code> 返回的解决值（resolved value）。接下来，我们使用了<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_operator">对象展开操作符</a> 对 <code>oldPost</code> 和 <code>modifiedPost</code> 进行了一次浅层合并（shallow merge）。最后，我们保存修改过的文章，再一次使用 <code>await</code> 关键词接收 <code>savePost</code> 函数异步执行返回的 <a href="https://medium.com/@BenDiuguid/asynchronous-adventures-in-javascript-promises-1e0da27a3b4">promise</a> 对象。</p><h2 id="例子-常见问题"><a href="#例子-常见问题" class="headerlink" title="例子/常见问题"></a>例子/常见问题</h2><blockquote><p>✋ “怎样进行错误处理的？”</p></blockquote><p>好问题！在 async/await 的帮助下，我们可以使用与同步代码一样的语法，<code>try…catch</code>。下面的代码中，如果我们的异步调用 <code>fetch</code> 返回了某种错误，比如 404，它将会被 <code>catch</code> 代码捕获，之后我们就可以对这个错误进行处理了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">tryToFetch</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&#x27;/api/data&#x27;</span>, options);</span><br><span class="line">    <span class="keyword">return</span> response.<span class="title function_">json</span>();</span><br><span class="line">  &#125; <span class="keyword">catch</span>(err) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`An error occured: <span class="subst">$&#123;err&#125;</span>`</span>);</span><br><span class="line">    <span class="comment">// Instead of rethrowing the error</span></span><br><span class="line">    <span class="comment">// Let&#x27;s return a regular object with no data</span></span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">data</span>: [] &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">tryToFetch</span>().<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(data));</span><br></pre></td></tr></table></figure><blockquote><p>✋ “我还是不明白为什么 async/await 语法比 callbacks/promises 语法好。”</p></blockquote><p>问得好！下面有个代码例子可展现出它们之间的区别。假设我们要异步地 <strong>fetchSomeData</strong> 获取某些数据，得到数据后再异步地 <strong>processSomeData</strong> 处理这些数据，如果有错误出现，只简单地返回一个对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// we have fetchSomeDataCB, and processSomeDataCB</span></span><br><span class="line"><span class="comment">// <span class="doctag">NOTE:</span> CB stands for callback</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">doWork</span>(<span class="params">callback</span>) &#123;</span><br><span class="line">  <span class="title function_">fetchSomeDataCB</span>(<span class="function">(<span class="params">err, fetchedData</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(err) &#123;</span><br><span class="line">      <span class="title function_">callback</span>(<span class="literal">null</span>, [])</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="title function_">processSomeDataCB</span>(fetchedData, <span class="function">(<span class="params">err2, processedData</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span>(err2) &#123;</span><br><span class="line">        <span class="title function_">callback</span>(<span class="literal">null</span>, []);</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// return the processedData outside of doWork</span></span><br><span class="line">      <span class="title function_">callback</span>(<span class="literal">null</span>, processedData);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">doWork</span>(<span class="function">(<span class="params">err, processedData</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(processedData));</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// we have fetchSomeDataP, and processSomeDataP</span></span><br><span class="line"><span class="comment">// <span class="doctag">NOTE:</span> P means that this function returns a Promise</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">doWorkP</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">fetchSomeDataP</span>()</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">fetchedData</span> =&gt;</span> <span class="title function_">processSomeDataP</span>(fetchedData))</span><br><span class="line">    .<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> []);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">doWorkP</span>().<span class="title function_">then</span>(<span class="function"><span class="params">processedData</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(processedData));</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// we have fetchSomeDataP, and processSomeDataP</span></span><br><span class="line"><span class="comment">// <span class="doctag">NOTE:</span> P means that this function returns a Promise</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">doWork</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> fetchedData = <span class="keyword">await</span> <span class="title function_">fetchSomeDataP</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">processSomeDataP</span>(fetchedData);</span><br><span class="line">  &#125; <span class="keyword">catch</span>(err) &#123;</span><br><span class="line">    <span class="keyword">return</span> [];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">doWork</span>().<span class="title function_">then</span>(<span class="function"><span class="params">processedData</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(processedData));</span><br></pre></td></tr></table></figure><center><small>Callback vs Promise vs Async/Await</small></center><blockquote><p><em>✋</em> “如何处理并发”</p></blockquote><p>如果我们想要异步过程被顺序地处理，只需要简单地使用多行 <code>await</code> 语句，并可将一个异步调用的输出结果传递给另一个异步调用，就像平时使用 promises 那样。不过为了理解并发，我们就必须使用 <code>Promise.all</code> 方法。如果想让 3 个异步动作同时执行（并发地），我们就要在 <code>await</code> 这些 promises 之前，让它们全部开始执行。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Not ideal: This will happen sequentially</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">sequential</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> output1 = <span class="keyword">await</span> <span class="title function_">task1</span>();</span><br><span class="line">  <span class="keyword">const</span> output2 = <span class="keyword">await</span> <span class="title function_">task2</span>();</span><br><span class="line">  <span class="keyword">const</span> output3 = <span class="keyword">await</span> <span class="title function_">task3</span>();</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">combineEverything</span>(output1, output2, output3);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码并不好使，因为 task2 会一直等到 task1 完成之后才开始执行，而 task3 则一直要等到 task1 和 task2 都完成之后才开始，其实这些任务之间并没有依赖关系。理想的做法是，我们让三个任务同时开始执行，进入 <code>Promise.all</code> 中等待它们完成。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Ideal: This will happen concurrently</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">parallel</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> promises = [</span><br><span class="line">    <span class="title function_">task1</span>(),</span><br><span class="line">    <span class="title function_">task2</span>(),</span><br><span class="line">    <span class="title function_">task3</span>(),</span><br><span class="line">  ];</span><br><span class="line">  <span class="keyword">const</span> [output1, output2, output3] = <span class="keyword">await</span> <span class="title class_">Promise</span>.<span class="title function_">all</span>(promises);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">combineEverything</span>(output1, output2, output3);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这段代码中，我们同时启动了三个异步任务，并将它们返回的 promises 存入一个数组。然后，将这组已执行的 promises 传入 <code>Promise.all()</code>，并 <code>await</code> 等待其返回输出。</p><h3 id="其它说明"><a href="#其它说明" class="headerlink" title="其它说明"></a>其它说明</h3><ul><li>经常容易忘记的一点：每当你使用 <code>await</code> 关键字的时候，你必须在 <code>async function</code> 异步函数中使用。</li><li>当你使用 <code>await</code> 时，它只会在 <code>aync function</code> 异步函数内产生暂停效果。如下面的例子中，会在其它的日志输出前打印出 <code>&#39;wanna race?&#39;</code> 。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">timeoutP</span> = <span class="keyword">async</span> (<span class="params">s</span>) =&gt; <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="title function_">resolve</span>(s*<span class="number">1000</span>), s*<span class="number">1000</span>)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].<span class="title function_">forEach</span>(<span class="keyword">async</span> <span class="keyword">function</span>(<span class="params">time</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> ms = <span class="keyword">await</span> <span class="title function_">timeoutP</span>(time);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`This took <span class="subst">$&#123;ms&#125;</span> milliseconds`</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;wanna race?&#x27;</span>);</span><br></pre></td></tr></table></figure><p>当这些 promises 进入等待状态 <code>awaited</code>-ed 之后，执行流程会回到主线程， <code>forEach</code> 语句外面的 <code>console.log</code> 就会被执行。</p><h3 id="浏览器支持"><a href="#浏览器支持" class="headerlink" title="浏览器支持"></a>浏览器支持</h3><p>目前浏览器的支持情况，你可以查看这个<a href="http://caniuse.com/#feat=async-functions">浏览器兼容表</a>。</p><h3 id="Node-支持"><a href="#Node-支持" class="headerlink" title="Node 支持"></a>Node 支持</h3><p>自 <code>node 7.6.0</code> 向上都支持 Aysnc/Await 语法！</p><p>翻译自：<a href="https://medium.com/dailyjs/asynchronous-adventures-in-javascript-async-await-bd2e62f37ffd">Asynchronous Adventures in JavaScript: Async/Await</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://img.zvz.im/imgs/2019/06/44f169f7325d65cf.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;Async-Await-为何物？&quot;&gt;&lt;a href=&quot;#Async-Await-为何物？&quot; class=&quot;headerlink&quot; title=&quot;Async/Await 为何物？&quot;&gt;&lt;/a&gt;Async/Await 为何物？&lt;/h3&gt;&lt;p&gt;Async/Await 即是异步函数（Async Functions），是 JavaScript 中控制异步流程的特殊语法。目前，大多数主流浏览器已经支持了此语法。它的诞生灵感来源于 C# 和 F# 编程语言。目前 Aysnc/Await 已进入 JavaScript/EcmaScript 2017 标准。&lt;br&gt;
    
    </summary>
    
    
      <category term="Nodejs" scheme="http://log.zvz.im/tags/Nodejs/"/>
    
      <category term="javascript" scheme="http://log.zvz.im/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>面向对象设计的五个首要原则</title>
    <link href="http://log.zvz.im/2017/10/25/PHP-SOLID-principles/"/>
    <id>http://log.zvz.im/2017/10/25/PHP-SOLID-principles/</id>
    <published>2017-10-25T14:07:03.000Z</published>
    <updated>2025-07-03T18:06:35.825Z</updated>
    
    <content type="html"><![CDATA[<p><strong>S.O.L.I.D</strong> 是 Robert C. Martin（人称 <a href="https://en.wikipedia.org/wiki/Robert_Cecil_Martin">Bob 大叔</a>） 提出的<strong>面向对象设计五个首要原则</strong>的首字母缩写。</p><p>将这些原则组合运用起来，可以使程序员开发出的代码更易于维护和扩展。它们还可以避免开发者写出糟糕的代码，使代码更易于重构，同时它们也是敏捷或适应性软件开发方式的组成部分。</p><p><strong>注意</strong>：本文只是一篇“欢迎使用 <strong>S.O.L.I.D</strong>”的入门文章，简单地说明了 <strong>S.O.L.I.D</strong> 是什么。</p><p><strong>S.O.L.I.D 代表着：</strong></p><p>把缩写被展开时，看起似乎麻烦了一点，实际上很容易掌握。</p><ul><li><strong>S</strong> - Single-responsibility priciple 单一职责原则</li><li><strong>O</strong> - Open-closed priciple 开放闭合原则</li><li><strong>L</strong> - Liskov substitution principle 里氏替换原则</li><li><strong>I</strong> - Interface segregation principle 接口隔离原则</li><li><strong>D</strong> - Dependency inversion principle 依赖反转原则</li></ul><p>接下来让我们挨个研究每条原则，以理解为什么 S.O.L.I.D 能帮我们成为更好的开发者。<br><span id="more"></span></p><h2 id="单一职责原则"><a href="#单一职责原则" class="headerlink" title="单一职责原则"></a>单一职责原则</h2><p>简写为 <strong>S.R.P</strong> - 此原则的描述如下：</p><blockquote><p>一个类应当有且仅有一个原因进行更改，也就是说一个类应当只有一项任务。</p></blockquote><p>举例来说，假设我们有一些图形，我们想要对这些图形的面积求和。这是个很简单的任务吧？</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$radius</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$radius</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;radius = <span class="variable">$radius</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Square</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$length</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$length</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;length = <span class="variable">$length</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先，我们创建了图形类，并且通过构造函数设定了必需的参数。接下来，我们创建了 <strong>AreaCalculator</strong> 类，写出对图形面积求和的逻辑。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AreaCalculator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$shapes</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$shapes</span> = <span class="keyword">array</span>(<span class="params"></span>)</span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;shapes = <span class="variable">$shapes</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// logic to sum the areas</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">output</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">implode</span>(<span class="string">&#x27;&#x27;</span>, <span class="keyword">array</span>(</span><br><span class="line">            <span class="string">&quot;&quot;</span>,</span><br><span class="line">                <span class="string">&quot;Sum of the areas of provided shapes: &quot;</span>,</span><br><span class="line">                <span class="variable">$this</span>-&gt;<span class="title function_ invoke__">sum</span>(),</span><br><span class="line">            <span class="string">&quot;&quot;</span></span><br><span class="line">        ));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要使用 <strong>AreaCalculator</strong> 类，我们只需简单地初始化这个类，并传入包含一组图形的数组，最后打印出输出信息。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$shapes</span> = <span class="keyword">array</span>(</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Circle</span>(<span class="number">2</span>),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Square</span>(<span class="number">5</span>),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Square</span>(<span class="number">6</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="variable">$areas</span> = <span class="keyword">new</span> <span class="title class_">AreaCalculator</span>(<span class="variable">$shapes</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$areas</span>-&gt;<span class="title function_ invoke__">output</span>();</span><br></pre></td></tr></table></figure><p>此处的 output 方法的问题在于 <strong>AreaCalculator</strong> 类处理了数据输出的逻辑，如果用户想要输出 json 或者其它格式时，我们该如何应对？</p><p>将所有这些逻辑都交由 <strong>AreaCalculator</strong> 类来处理，恰恰是与单一职责原则相悖的；<strong>AreaCalculator</strong> 类应当只负责计算所提供图形的面积之和，而无需关心用户需要 json 还是 HTML。</p><p>所以，为了解决这个问题，你可以创建一个 <strong>SumCalculatorOutputter</strong> 类，用于处理图形面积之和的显示逻辑。</p><p><strong>SumCalculatorOutputter</strong> 类的用法大体如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$shapes</span> = <span class="keyword">array</span>(</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Circle</span>(<span class="number">2</span>),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Square</span>(<span class="number">5</span>),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Square</span>(<span class="number">6</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="variable">$areas</span> = <span class="keyword">new</span> <span class="title class_">AreaCalculator</span>(<span class="variable">$shapes</span>);</span><br><span class="line"><span class="variable">$output</span> = <span class="keyword">new</span> <span class="title class_">SumCalculatorOutputter</span>(<span class="variable">$areas</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$output</span>-&gt;<span class="title function_ invoke__">JSON</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$output</span>-&gt;<span class="title function_ invoke__">HAML</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$output</span>-&gt;<span class="title function_ invoke__">HTML</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$output</span>-&gt;<span class="title function_ invoke__">JADE</span>(); </span><br></pre></td></tr></table></figure><p>现在，无论你需要什么样的输出显示逻辑，全部都交给 <strong>SumCalculatorOutputter</strong> 类来处理了。</p><h2 id="开放闭合原则"><a href="#开放闭合原则" class="headerlink" title="开放闭合原则"></a>开放闭合原则</h2><blockquote><p>对象或者实体应当对于扩展保持开放，对于修改保持关闭。</p></blockquote><p>简单来说就是一个类应当易于扩展，而不需要对自身进行修改。我们看一下 <strong>AreaCalculator</strong> 类，特别留意它的 <strong>sum</strong> 方法。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">foreach</span>(<span class="variable language_">$this</span>-&gt;shapes <span class="keyword">as</span> <span class="variable">$shape</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">is_a</span>(<span class="variable">$shape</span>, <span class="string">&#x27;Square&#x27;</span>)) &#123;</span><br><span class="line">            <span class="variable">$area</span>[] = <span class="title function_ invoke__">pow</span>(<span class="variable">$shape</span>-&gt;length, <span class="number">2</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="title function_ invoke__">is_a</span>(<span class="variable">$shape</span>, <span class="string">&#x27;Circle&#x27;</span>)) &#123;</span><br><span class="line">            <span class="variable">$area</span>[] = <span class="title function_ invoke__">pi</span>() * <span class="title function_ invoke__">pow</span>(<span class="variable">$shape</span>-&gt;radius, <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">array_sum</span>(<span class="variable">$area</span>);</span><br><span class="line">&#125;   </span><br></pre></td></tr></table></figure><p>如果我们想扩展 <strong>sum</strong> 方法，使其能够对更多类型的图形进行面积求和，那么我们可以通过增加 <strong>if/else 代码块</strong>来解决这个问题，但是这样就破坏了开放闭合原则。</p><p>有一种办法可以对 <strong>sum</strong> 方法进行优化，就是去除 sum 方法中计算每种图形面积的逻辑，并将这些逻辑放到对应的图形类中。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Square</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$length</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$length</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;length = <span class="variable">$length</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">area</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">pow</span>(<span class="variable">$this</span>-&gt;length, <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对 <strong>Circle</strong> 类也做同样的修改，加入一个 <strong>area</strong> 方法。现在，要计算任意类型图形的面积之和可以简单地实现为：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">foreach</span>(<span class="variable language_">$this</span>-&gt;shapes <span class="keyword">as</span> <span class="variable">$shape</span>) &#123;</span><br><span class="line">        <span class="variable">$area</span>[] = <span class="variable">$shape</span>-&gt;<span class="title function_ invoke__">area</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">array_sum</span>(<span class="variable">$area</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在，我们可以创建另一个的图形类，将其加入到求和计算中，而且不会搞坏代码。然而，另一个问题产生了，我们如何能够确定传入到 <strong>AreaCalculator</strong> 的对象是一个图形对象，且这个图形对象有这个 <strong>area</strong> 方法？</p><p>面向接口编程是 <strong>S.O.L.I.D</strong> 实践中的必需部分，以下是个简单的示例，我们创建了一个接口，所有的图形类都要实现该接口：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">ShapeInterface</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">area</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> <span class="keyword">implements</span> <span class="title">ShapeInterface</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$radius</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$radius</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;radius = <span class="variable">$radius</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">area</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">pi</span>() * <span class="title function_ invoke__">pow</span>(<span class="variable">$this</span>-&gt;radius, <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 <strong>AreaCalculator</strong> 类的 sum 方法中，我们可以检查这些图形是否实现了 <strong>ShapeInterface</strong> 接口，若未实现就抛出异常：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">foreach</span>(<span class="variable language_">$this</span>-&gt;shapes <span class="keyword">as</span> <span class="variable">$shape</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">is_a</span>(<span class="variable">$shape</span>, <span class="string">&#x27;ShapeInterface&#x27;</span>)) &#123;</span><br><span class="line">            <span class="variable">$area</span>[] = <span class="variable">$shape</span>-&gt;<span class="title function_ invoke__">area</span>();</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AreaCalculatorInvalidShapeException</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">array_sum</span>(<span class="variable">$area</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="里氏替换原则"><a href="#里氏替换原则" class="headerlink" title="里氏替换原则"></a>里氏替换原则</h2><blockquote><p>若 <strong>q(x)</strong> 可证明对象 <strong>x</strong> 的类型为 <strong>T</strong> 。那么 <strong>q(y)</strong> 应当可用于证明对象 <strong>y</strong> 的类型为 <strong>S</strong>，其中<strong>S</strong> 是 <strong>T</strong> 的子类型。</p></blockquote><p>所有这些是说所有的子类或衍生类应当能够被它们的基类或父类替换。</p><p>继续以之前的 <strong>AreaCalculator</strong> 类为例，假设有一个 <strong>VolumeCalculator</strong> 类继承了 <strong>AreaCalculator</strong>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VolumeCalculator</span> <span class="keyword">extends</span> <span class="title">AreaCalulator</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$shapes</span> = <span class="keyword">array</span>(<span class="params"></span>)</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">parent</span>::<span class="title function_ invoke__">__construct</span>(<span class="variable">$shapes</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// logic to calculate the volumes and then return and array of output</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">array</span>(<span class="variable">$summedData</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 <strong>SumCalculatorOutputter</strong> 类中：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SumCalculatorOutputter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$calculator</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__constructor</span>(<span class="params">AreaCalculator <span class="variable">$calculator</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;calculator = <span class="variable">$calculator</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">JSON</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$data</span> = <span class="keyword">array</span>(</span><br><span class="line">            <span class="string">&#x27;sum&#x27;</span> =&gt; <span class="variable language_">$this</span>-&gt;calculator-&gt;<span class="title function_ invoke__">sum</span>();</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">json_encode</span>(<span class="variable">$data</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">HTML</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">implode</span>(<span class="string">&#x27;&#x27;</span>, <span class="keyword">array</span>(</span><br><span class="line">            <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;Sum of the areas of provided shapes: &#x27;</span>,</span><br><span class="line">                <span class="variable">$this</span>-&gt;calculator-&gt;<span class="title function_ invoke__">sum</span>(),</span><br><span class="line">            <span class="string">&#x27;&#x27;</span></span><br><span class="line">        ));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果我们尝试执行下面的代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$areas</span> = <span class="keyword">new</span> <span class="title class_">AreaCalculator</span>(<span class="variable">$shapes</span>);</span><br><span class="line"><span class="variable">$volumes</span> = <span class="keyword">new</span> <span class="title class_">AreaCalculator</span>(<span class="variable">$solidShapes</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$output</span> = <span class="keyword">new</span> <span class="title class_">SumCalculatorOutputter</span>(<span class="variable">$areas</span>);</span><br><span class="line"><span class="variable">$output2</span> = <span class="keyword">new</span> <span class="title class_">SumCalculatorOutputter</span>(<span class="variable">$volumes</span>);</span><br></pre></td></tr></table></figure><p>程序并不会报错，不过当我们调用 <strong>$output2</strong> 对象的 <strong>HTML</strong> 方法时，会得到一个 <strong>E_NOTICE</strong> 报错，提示我们将数组转为了字符串。</p><p>为了解决这个问题，我们让 <strong>VolumeCalculator</strong> 的 sum 方法不再返回数组，简单地修改为：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// logic to calculate the volumes and then return and array of output</span></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$summedData</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个返回的「和」是一个浮点数或者整数。</p><h2 id="接口隔离原则"><a href="#接口隔离原则" class="headerlink" title="接口隔离原则"></a>接口隔离原则</h2><blockquote><p>不能强迫对象实现一个无用的接口，或者说对象不应当被强制依赖于它们不会使用到的方法。</p></blockquote><p>接着看图形的例子，我们知道还有一些图形是立体的，所以我们也想计算出图形的体积，我们可以在 <strong>ShanpeInterface</strong> 中加入另一个接口方法：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">ShapeInterface</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">area</span>(<span class="params"></span>)</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">volume</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样依赖，我们创建的任何图形类都得实现 <strong>volume</strong> 方法，但是我们知道正方形是平面图形，它们没有体积，所以这个接口会迫使 <strong>Square</strong> 类实现一个对它来说毫无用处的方法。</p><p>接口隔离原则禁止这种实现方式，相反地，你应该创建另一个名为 <strong>SolidShapeInterface</strong> 的接口，它拥有 <strong>volume</strong> 方法，正方体等立体图形可以实现这个接口：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">ShapeInterface</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">area</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">SolidShapeInterface</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">volume</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cuboid</span> <span class="keyword">implements</span> <span class="title">ShapeInterface</span>, <span class="title">SolidShapeInterface</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">area</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// calculate the surface area of the cuboid</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">volume</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// calculate the volume of the cuboid</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种方式好得多。不过有一个陷阱需要注意，作为管理方法的参数类型提示时，不应该单独使用 <strong>ShapeInterface</strong> 或者 <strong>SolidShapeInterface</strong>。</p><p>你可以创建另一个接口，叫作 <strong>ManageShapeInterface</strong>，无论是平面图形还是立体图形都实现此接口，这样你就可以用单一接口管理这些图形了。例如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">ManageShapeInterface</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calculate</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Square</span> <span class="keyword">implements</span> <span class="title">ShapeInterface</span>, <span class="title">ManageShapeInterface</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">area</span>(<span class="params"></span>) </span>&#123; <span class="comment">/*Do stuff here*/</span> &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calculate</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">area</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cuboid</span> <span class="keyword">implements</span> <span class="title">ShapeInterface</span>, <span class="title">SolidShapeInterface</span>, <span class="title">ManageShapeInterface</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">area</span>(<span class="params"></span>) </span>&#123; <span class="comment">/*Do stuff here*/</span> &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">volume</span>(<span class="params"></span>) </span>&#123; <span class="comment">/*Do stuff here*/</span> &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">calculate</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">area</span>() + <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">volume</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样在 <strong>AreaCalculator</strong> 类中，我们可以简单地使用 <strong>calculate</strong> 方法替换 <strong>area</strong> 方法，同时检查对象是否实现了 <strong>ManageShapeInterface</strong> 接口而不是 <strong>ShapeInterface</strong> 接口。</p><h2 id="依赖反转原则"><a href="#依赖反转原则" class="headerlink" title="依赖反转原则"></a>依赖反转原则</h2><blockquote><p>对象必须依赖于抽象，而不是依赖于具体实现。高层模块不应该依赖于低层模块，它们都应当依赖于抽象。</p></blockquote><p>虽然讲起来一大堆，其实很好理解。此原则主要是考虑到解耦的问题，举例说明似乎是解释该原则最好的办法：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PasswordReminder</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$dbConnection</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">MySQLConnection <span class="variable">$dbConnection</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;dbConnection = <span class="variable">$dbConnection</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先，<strong>MySQLConnection</strong> 是低层模块而 <strong>PasswordReminder</strong> 是高层模块，根据依赖反转原则所述<em>依赖抽象而不是实现</em>，这段代码已经违背了这一原则，因为 <strong>PasswordReminder</strong> 类强依赖于 <strong>MySQLConnection</strong> 类。</p><p>其次，当你要更换数据库引擎时，你还得修改 <strong>PasswordReminder</strong> 类，这又违背了<strong>开放闭合原则</strong>。</p><p><strong>PasswordReminder</strong> 类不需要关心你的应用具体使用哪一种数据库，要解决此问题我们还是采用“面向接口编程”的办法，由于高层和低层模块应当依赖于抽象，所以我们可以创建一个接口：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">DBConnectionInterface</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">connect</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此接口包含一个 connect 方法，<strong>MySQLConnection</strong> 类实现了这个接口，而且在 <strong>PasswordReminder</strong> 类的构造函数中，我们将 <strong>MySQLConnection</strong> 的类型提示改为此接口类型，这样一来无论你的应用使用何种数据库，<strong>PasswordReminder</strong> 都可以轻松连接数据库不会产生任何问题，也不会违背<strong>开放闭合原则</strong>。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MySQLConnection</span> <span class="keyword">implements</span> <span class="title">DBConnectionInterface</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">connect</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Database connection&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PasswordReminder</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$dbConnection</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">DBConnectionInterface <span class="variable">$dbConnection</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;dbConnection = <span class="variable">$dbConnection</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>依照上面的代码，你可以看到现在无论高层还是低层模块都变成依赖于抽象了。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>老实说，<strong>S.O.L.I.D</strong> 起初看起来好像有很多规则，但是在长期使用并遵守它的规则后，它会逐渐成为你的一部分，融入到你的代码中，使你的代码易于扩展，适应修改，容易测试并且重构起来没有任何麻烦。</p><p>翻译自：<a href="https://scotch.io/bar-talk/s-o-l-i-d-the-first-five-principles-of-object-oriented-design">S.O.L.I.D: The First 5 Principles of Object Oriented Design</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;S.O.L.I.D&lt;/strong&gt; 是 Robert C. Martin（人称 &lt;a href=&quot;https://en.wikipedia.org/wiki/Robert_Cecil_Martin&quot;&gt;Bob 大叔&lt;/a&gt;） 提出的&lt;strong&gt;面向对象设计五个首要原则&lt;/strong&gt;的首字母缩写。&lt;/p&gt;
&lt;p&gt;将这些原则组合运用起来，可以使程序员开发出的代码更易于维护和扩展。它们还可以避免开发者写出糟糕的代码，使代码更易于重构，同时它们也是敏捷或适应性软件开发方式的组成部分。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：本文只是一篇“欢迎使用 &lt;strong&gt;S.O.L.I.D&lt;/strong&gt;”的入门文章，简单地说明了 &lt;strong&gt;S.O.L.I.D&lt;/strong&gt; 是什么。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;S.O.L.I.D 代表着：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;把缩写被展开时，看起似乎麻烦了一点，实际上很容易掌握。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;S&lt;/strong&gt; - Single-responsibility priciple 单一职责原则&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;O&lt;/strong&gt; - Open-closed priciple 开放闭合原则&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;L&lt;/strong&gt; - Liskov substitution principle 里氏替换原则&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;I&lt;/strong&gt; - Interface segregation principle 接口隔离原则&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;D&lt;/strong&gt; - Dependency inversion principle 依赖反转原则&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;接下来让我们挨个研究每条原则，以理解为什么 S.O.L.I.D 能帮我们成为更好的开发者。&lt;br&gt;
    
    </summary>
    
    
      <category term="php" scheme="http://log.zvz.im/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>用 NodeJS 打造影院微服务并部署到 docker 上 — Part 3</title>
    <link href="http://log.zvz.im/2017/10/17/nodejs-cinema-microservice-part3/"/>
    <id>http://log.zvz.im/2017/10/17/nodejs-cinema-microservice-part3/</id>
    <published>2017-10-17T14:39:51.000Z</published>
    <updated>2025-07-03T18:06:35.827Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>大家好，本文是「使用 NodeJS 构建影院微服务」系列的第三篇文章。此系列文章旨在展示如何使用 ES6，¿ES7 …8?，和 expressjs 构建一个 API 应用，如何连接 MongoDB 集群，怎样将其部署于 docker 容器中，以及模拟微服务运行于云环境中的情况。</p></blockquote><h3 id="以往章节快速回顾"><a href="#以往章节快速回顾" class="headerlink" title="## 以往章节快速回顾"></a>## 以往章节快速回顾</h3><ul><li>我们讲了<strong>什么是微服务</strong>，探讨了<strong>微服务</strong>的<strong>利</strong>与<strong>弊</strong></li><li>我们定义了<strong>影院微服务架构</strong></li><li>我们设计并实现了<strong>电影服务</strong>和<strong>影院目录服务</strong></li><li>我们实现了这些服务的 API 接口，并对这些接口做了<strong>单元测试</strong></li><li>我们对运行于<strong>Docker</strong>中的<strong>服务</strong>进行了集成测试</li><li>我们讨论了<strong>微服务安全</strong>并使其适配了 <strong>HTTP/2 协议</strong></li><li>我们对<strong>影院目录服务</strong>进行了<strong>压力测试</strong></li></ul><span id="more"></span><p>如果你没有阅读之前的章节，那么很有可能会错一些有趣的东西 🤘🏽，下面我列出前两篇的链接，方便你有兴趣的话可以看一下👀。</p><ul><li><a href="https://log.zvz.im/2017/05/24/nodejs-cinema-microservice-part1/">用 NodeJS 打造影院微服务并部署到 docker 上 — Part 1</a></li><li><a href="https://log.zvz.im/2017/07/17/nodejs-cinema-microservice-part2/">用 NodeJS 打造影院微服务并部署到 docker 上 — Part 2</a></li></ul><p>在之前的章节中，我们已经完成了以下架构图中的上层部分，接着从本章起，我们要开始图中下层部分的开发了。</p><p><img src="https://img.zvz.im/imgs/2019/06/5201f3beb0ad3a8e.png" alt=""></p><p>到目前为止，我们的终端用户已经能够在影院看到电影首映信息，选择影院并下单买票。本章我们会继续构建<strong>影院架构</strong>，并探索<strong>订票服务</strong>内部是如何工作的，跟我一起学点有趣的东西吧。</p><p>我们将使用到以下技术：</p><ul><li>NodeJS version 7.5.0</li><li>MongoDB 3.4.1</li><li>Docker for Mac 1.13</li></ul><p>要跟上本文的进度有以下要求：</p><ul><li>已经完成<a href="https://log.zvz.im/2017/05/24/nodejs-cinema-microservice-part1/">上一篇文章</a>中的例子代码</li></ul><p>如果你还没有完成这些代码，我已经将代码传到了 github 上，你可以直接使用<a href="https://github.com/Crizstian/cinema-microservice/tree/step-1">代码库</a>分支 <strong>step-2</strong>。</p><h2 id="NodeJS-中的依赖注入"><a href="#NodeJS-中的依赖注入" class="headerlink" title="# NodeJS 中的依赖注入"></a># NodeJS 中的依赖注入</h2><p>至今为止我们已经构建了两套微服务的 API 接口，不过都没有遇到太多的配置和开发工作，这是由这些微服务自身的特性和简单性决定的。不过这一次，在<strong>订票服务</strong>中，我们会看到更多与其它服务之间的交互，因为这个服务的实现依赖项更多，为了防止写出一团乱麻似的代码，作为好的开发者，我们需要遵循某种设计模式，为此我们将会探究什么是<strong>“依赖注入”</strong>。</p><p>想要达成良好的设计模式，我们必须很好地理解并应用 <strong>S.O.L.I.D 原则</strong>，我之前写过一篇与之相关的 javascript 的文章，有空你可以看一下🤓，主要讲述了这些原则是什么并且我们可以从中获得哪些好处。</p><p><a href="https://medium.com/@cramirez92/s-o-l-i-d-the-first-5-priciples-of-object-oriented-design-with-javascript-790f6ac9b9fa">S.O.L.I.D The first 5 principles of Ojbect Oriented Design with Javascritp</a></p><p>为什么依赖注入如此重要？因为它能给我们带来以下开发模式中的三大好处：</p><ul><li><strong>解耦</strong>：依赖注入可减少模块之间的耦合性，使其更易于维护。</li><li><strong>单元测试</strong>：使用依赖注入，可使对于每个模块的单元测试做得更好，代码的 bug 也会较少。</li><li><strong>快速开发</strong>：利用依赖注入，在定义了接口之后，可以更加容易地进行分工合作而不会产生冲突。</li></ul><p>至今为此开发的微服务中，我们曾在 <code>index.js</code> 文件中使用到了<strong>依赖注入</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// more code</span></span><br><span class="line"></span><br><span class="line">mediator.<span class="title function_">on</span>(<span class="string">&#x27;db.ready&#x27;</span>, <span class="function">(<span class="params">db</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> rep</span><br><span class="line">  <span class="comment">// here we are making DI to the repository</span></span><br><span class="line">  <span class="comment">// we are injecting the database object and the ObjectID object</span></span><br><span class="line">  repository.<span class="title function_">connect</span>(&#123;</span><br><span class="line">    db, </span><br><span class="line">    <span class="title class_">ObjectID</span>: config.<span class="property">ObjectID</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">repo</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Connected. Starting Server&#x27;</span>)</span><br><span class="line">      rep = repo</span><br><span class="line">      <span class="comment">// here we are also making DI to the server</span></span><br><span class="line">      <span class="comment">// we are injecting serverSettings and the repo object</span></span><br><span class="line">      <span class="keyword">return</span> server.<span class="title function_">start</span>(&#123;</span><br><span class="line">        <span class="attr">port</span>: config.<span class="property">serverSettings</span>.<span class="property">port</span>,</span><br><span class="line">        <span class="attr">ssl</span>: config.<span class="property">serverSettings</span>.<span class="property">ssl</span>,</span><br><span class="line">        repo</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">app</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Server started succesfully, running on port: <span class="subst">$&#123;config.serverSettings.port&#125;</span>.`</span>)</span><br><span class="line">      app.<span class="title function_">on</span>(<span class="string">&#x27;close&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        rep.<span class="title function_">disconnect</span>()</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// more code</span></span><br></pre></td></tr></table></figure><p>在 <code>index.js</code> 文件中我们使用了手动的依赖注入，因为没有必要做得更多。不过在<strong>订票服务</strong>中，我们将需要一种更好地依赖注入方式，为了厘清个中缘由，在开始构建 API 接口之前，我们要先弄清楚<strong>订票服务</strong>需要完成哪些任务。</p><ul><li>订票服务需要一个订票对象和一个用户对象，而且在进行订票动作时，我们首先要验证这些对象的有效性。</li><li>验证有效性之后，我们就可以继续流程，开始买票了。</li><li>订票服务需要用户的信用卡信息，通过<strong>支付服务</strong>，来完成购票动作。</li><li>扣款成功后，我们需要通过<strong>通知服务</strong>发送通知。</li><li>我们还需要为用户生成电影票，并将电影票和订单号信息发送给用户。</li></ul><p>所以这次我们的开发任务变得相对重了一些，相应地代码也会变多，这也是我们需要一个单一依赖注入来源的原因，因为我们需要做更多的功能开发。</p><h2 id="构建微服务"><a href="#构建微服务" class="headerlink" title="# 构建微服务"></a># 构建微服务</h2><p>首先我们来看一下<strong>订票服务</strong>的 <strong>RAML</strong> 文件。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#%RAML 1.0</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">Booking</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">version:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">baseUri:</span> <span class="string">/</span></span><br><span class="line"></span><br><span class="line"><span class="attr">types:</span></span><br><span class="line">  <span class="attr">Booking:</span></span><br><span class="line">    <span class="attr">properties:</span></span><br><span class="line">      <span class="attr">city:</span> <span class="string">string</span></span><br><span class="line">      <span class="attr">cinema:</span> <span class="string">string</span></span><br><span class="line">      <span class="attr">movie:</span> <span class="string">string</span></span><br><span class="line">      <span class="attr">schedule:</span> <span class="string">datetime</span></span><br><span class="line">      <span class="attr">cinemaRoom:</span> <span class="string">string</span></span><br><span class="line">      <span class="attr">seats:</span> <span class="string">array</span></span><br><span class="line">      <span class="attr">totalAmount:</span> <span class="string">number</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="attr">User:</span></span><br><span class="line">    <span class="attr">properties:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">string</span></span><br><span class="line">      <span class="attr">lastname:</span> <span class="string">string</span></span><br><span class="line">      <span class="attr">email:</span> <span class="string">string</span></span><br><span class="line">      <span class="attr">creditcard:</span> <span class="string">object</span></span><br><span class="line">      <span class="string">phoneNumber?:</span> <span class="string">string</span></span><br><span class="line">      <span class="string">membership?:</span> <span class="string">number</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">Ticket:</span></span><br><span class="line">    <span class="attr">properties:</span></span><br><span class="line">      <span class="attr">cinema:</span> <span class="string">string</span></span><br><span class="line">      <span class="attr">schedule:</span> <span class="string">string</span></span><br><span class="line">      <span class="attr">movie:</span> <span class="string">string</span></span><br><span class="line">      <span class="attr">seat:</span> <span class="string">string</span></span><br><span class="line">      <span class="attr">cinemaRoom:</span> <span class="string">string</span></span><br><span class="line">      <span class="attr">orderId:</span> <span class="string">string</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">resourceTypes:</span></span><br><span class="line">  <span class="attr">GET:</span></span><br><span class="line">    <span class="attr">get:</span></span><br><span class="line">      <span class="attr">responses:</span></span><br><span class="line">        <span class="attr">200:</span></span><br><span class="line">          <span class="attr">body:</span></span><br><span class="line">            <span class="attr">application/json:</span></span><br><span class="line">              <span class="attr">type:</span> <span class="string">&lt;&lt;item&gt;&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">POST:</span></span><br><span class="line">    <span class="attr">post:</span></span><br><span class="line">      <span class="attr">body:</span></span><br><span class="line">        <span class="attr">application/json:</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">&lt;&lt;item&gt;&gt;</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">&lt;&lt;item2&gt;&gt;</span></span><br><span class="line">      <span class="attr">responses:</span></span><br><span class="line">        <span class="attr">201:</span></span><br><span class="line">          <span class="attr">body:</span></span><br><span class="line">            <span class="attr">application/json:</span></span><br><span class="line">              <span class="attr">type:</span> <span class="string">&lt;&lt;item3&gt;&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">/booking:</span></span><br><span class="line">  <span class="attr">type:</span>   &#123; <span class="attr">POST:</span> &#123;<span class="attr">item :</span> <span class="string">Booking</span>, <span class="attr">item2 :</span> <span class="string">User</span>, <span class="attr">item3:</span> <span class="string">Ticket</span>&#125; &#125;</span><br><span class="line">  <span class="attr">description:</span> <span class="string">The</span> <span class="string">booking</span> <span class="string">service</span> <span class="string">need</span> <span class="string">a</span> <span class="string">Booking</span> <span class="string">object</span> <span class="string">that</span> <span class="string">contains</span> <span class="string">all</span></span><br><span class="line">    <span class="string">the</span> <span class="string">needed</span> <span class="string">information</span> <span class="string">to</span> <span class="string">make</span> <span class="string">a</span> <span class="string">purchase</span> <span class="string">of</span> <span class="string">cinema</span> <span class="string">tickets.</span> <span class="string">Needs</span> <span class="string">a</span> <span class="string">user</span> <span class="string">information</span> <span class="string">to</span> <span class="string">make</span> <span class="string">the</span> <span class="string">booking</span> <span class="string">succesfully.</span> <span class="string">And</span> <span class="string">returns</span> <span class="string">a</span> <span class="string">ticket</span> <span class="string">object.</span></span><br><span class="line"></span><br><span class="line">  <span class="string">/verify/&#123;orderId&#125;:</span></span><br><span class="line">    <span class="attr">type:</span>  &#123; <span class="attr">GET:</span> &#123;<span class="attr">item :</span> <span class="string">Ticket</span>&#125; &#125;</span><br><span class="line">    <span class="attr">description:</span> <span class="string">This</span> <span class="string">route</span> <span class="string">is</span> <span class="string">for</span> <span class="string">verify</span> <span class="string">orders,</span> <span class="string">and</span> <span class="string">would</span> <span class="string">return</span> <span class="string">all</span> <span class="string">the</span> <span class="string">details</span> <span class="string">of</span> <span class="string">a</span> <span class="string">specific</span> <span class="string">purchased</span> <span class="string">by</span> <span class="string">orderid.</span></span><br></pre></td></tr></table></figure><p>我们定义了三个模型对象，<strong>Booking</strong> 、<strong>User</strong> 以及 <strong>Ticket</strong> 。由于这是系列文章中第一次使用到 <strong>POST</strong> 请求，因此还有一项 NodeJS 的<strong>最佳实践</strong>我们还没有使用过，那就是<strong>数据验证</strong>。在<a href="https://medium.com/software-engineering/beautiful-node-apis-eaf0b636cbe#.t8kdvpkcv">“Build beautiful node API’s“</a> 这篇文章中有一句很好的表述：</p><blockquote><p>一定，一定，一定要验证输入（以及输出）的数据。有 joi 以及 express-validator 等模块可以帮助你优雅地完成数据净化工作。— Azat Mardan</p></blockquote><p>现在我们可以开始开发<strong>订票服务</strong>了。我们将使用与上一章相同的项目结构，不过会稍微做一点点改动。让我们不再纸上谈兵，撸起袖子开始编码！ 👩🏻‍💻👨🏻‍💻。</p><p>首先我们在 <code>/src</code> 目录下新建一个 <code>models</code> 目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">booking-service/src $ mkdir models</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Now <span class="built_in">let</span><span class="string">&#x27;s move to the folder and create some files</span></span></span><br><span class="line"></span><br><span class="line">booking-service/src/models $ touch user.js booking.js ticket.js</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Now is moment to install a new npm package for data validation</span></span></span><br><span class="line"></span><br><span class="line">npm i -S joi --silent</span><br></pre></td></tr></table></figure><p>然后我们开始编写数据结构验证对象了，<strong>MonogDB</strong>也有内置的验证对象，不过这里需要验证的是数据对象的完整性，所以我们选择使用 joi，而且 joi 也允许我们同时进行数据验证，我们就由 <strong>booking.model.js</strong> 开始，然后是 <strong>ticket.model.js</strong>， 最后是 <strong>user.model.js</strong>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">bookingSchema</span> = (<span class="params">joi</span>) =&gt; (&#123;</span><br><span class="line">  <span class="attr">bookingSchema</span>: joi.<span class="title function_">object</span>().<span class="title function_">keys</span>(&#123;</span><br><span class="line">    <span class="attr">city</span>: joi.<span class="title function_">string</span>(),</span><br><span class="line">    <span class="attr">schedule</span>: joi.<span class="title function_">date</span>().<span class="title function_">min</span>(<span class="string">&#x27;now&#x27;</span>),</span><br><span class="line">    <span class="attr">movie</span>: joi.<span class="title function_">string</span>(),</span><br><span class="line">    <span class="attr">cinemaRoom</span>: joi.<span class="title function_">number</span>(),</span><br><span class="line">    <span class="attr">seats</span>: joi.<span class="title function_">array</span>().<span class="title function_">items</span>(joi.<span class="title function_">string</span>()).<span class="title function_">single</span>(),</span><br><span class="line">    <span class="attr">totalAmount</span>: joi.<span class="title function_">number</span>()</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = bookingSchema</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">ticketSchema</span> = (<span class="params">joi</span>) =&gt; (&#123;</span><br><span class="line">  <span class="attr">ticketSchema</span>: joi.<span class="title function_">object</span>().<span class="title function_">keys</span>(&#123;</span><br><span class="line">    <span class="attr">cinema</span>: joi.<span class="title function_">string</span>(),</span><br><span class="line">    <span class="attr">schedule</span>: joi.<span class="title function_">date</span>().<span class="title function_">min</span>(<span class="string">&#x27;now&#x27;</span>),</span><br><span class="line">    <span class="attr">movie</span>: joi.<span class="title function_">string</span>(),</span><br><span class="line">    <span class="attr">seat</span>: joi.<span class="title function_">array</span>().<span class="title function_">items</span>(joi.<span class="title function_">string</span>()).<span class="title function_">single</span>(),</span><br><span class="line">    <span class="attr">cinemaRoom</span>: joi.<span class="title function_">number</span>(),</span><br><span class="line">    <span class="attr">orderId</span>: joi.<span class="title function_">number</span>()</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = ticketSchema</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">userSchema</span> = (<span class="params">joi</span>) =&gt; (&#123;</span><br><span class="line">  <span class="attr">userSchema</span>: joi.<span class="title function_">object</span>().<span class="title function_">keys</span>(&#123;</span><br><span class="line">    <span class="attr">name</span>: joi.<span class="title function_">string</span>().<span class="title function_">regex</span>(<span class="regexp">/^[a-bA-B]+/</span>).<span class="title function_">required</span>(),</span><br><span class="line">    <span class="attr">lastName</span>: joi.<span class="title function_">string</span>().<span class="title function_">regex</span>(<span class="regexp">/^[a-bA-B]+/</span>).<span class="title function_">required</span>(),</span><br><span class="line">    <span class="attr">email</span>: joi.<span class="title function_">string</span>().<span class="title function_">email</span>().<span class="title function_">required</span>(),</span><br><span class="line">    <span class="attr">phoneNumber</span>: joi.<span class="title function_">string</span>().<span class="title function_">regex</span>(<span class="regexp">/^(\+0?1\s)?\(?\d&#123;3&#125;\)?[\s.-]\d&#123;3&#125;[\s.-]\d&#123;4&#125;$/</span>),</span><br><span class="line">    <span class="attr">creditCard</span>: joi.<span class="title function_">string</span>().<span class="title function_">creditCard</span>().<span class="title function_">required</span>(),</span><br><span class="line">    <span class="attr">membership</span>: joi.<span class="title function_">number</span>().<span class="title function_">creditCard</span>()</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = userSchema</span><br></pre></td></tr></table></figure><p>如果你不是太了解 <code>joi</code> ，你可以去 github 上学习一下它的文档：<a href="https://github.com/hapijs/joi/blob/v10.2.0/API.md">文档链接</a></p><p>接下来我们编写模块的 <code>index.js</code> 文件，使这些校验方法暴露出来：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> joi = <span class="built_in">require</span>(<span class="string">&#x27;joi&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> user = <span class="built_in">require</span>(<span class="string">&#x27;./user.model&#x27;</span>)(joi)</span><br><span class="line"><span class="keyword">const</span> booking = <span class="built_in">require</span>(<span class="string">&#x27;./booking.model&#x27;</span>)(joi)</span><br><span class="line"><span class="keyword">const</span> ticket = <span class="built_in">require</span>(<span class="string">&#x27;./ticket.model&#x27;</span>)(joi)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> schemas = <span class="title class_">Object</span>.<span class="title function_">create</span>(&#123;user, booking, ticket&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">schemaValidator</span> = (<span class="params">object, type</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!object) &#123;</span><br><span class="line">      <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;object to validate not provided&#x27;</span>))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!type) &#123;</span><br><span class="line">      <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;schema type to validate not provided&#x27;</span>))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> &#123;error, value&#125; = joi.<span class="title function_">validate</span>(object, schemas[type])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (error) &#123;</span><br><span class="line">      <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">`invalid <span class="subst">$&#123;type&#125;</span> data, err: <span class="subst">$&#123;error&#125;</span>`</span>))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">resolve</span>(value)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(&#123;<span class="attr">validate</span>: schemaValidator&#125;)</span><br></pre></td></tr></table></figure><p>我们所写的这些代码应用了<strong>SOLID 原则</strong>中的<strong>单一责任原则</strong>，每个模型都有自己的校验方法，还应用了<strong>开放封闭原则</strong>，每个结构校验函数都可以对任意多的模型对象进行校验，接下来看看如何为这些模型编写测试代码。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* eslint-env mocha */</span></span><br><span class="line"><span class="keyword">const</span> test = <span class="built_in">require</span>(<span class="string">&#x27;assert&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> &#123;validate&#125; = <span class="built_in">require</span>(<span class="string">&#x27;./&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">getPrototypeOf</span>(validate))</span><br><span class="line"></span><br><span class="line"><span class="title function_">describe</span>(<span class="string">&#x27;Schemas Validation&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">it</span>(<span class="string">&#x27;can validate a booking object&#x27;</span>, <span class="function">(<span class="params">done</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> now = <span class="keyword">new</span> <span class="title class_">Date</span>()</span><br><span class="line">    now.<span class="title function_">setDate</span>(now.<span class="title function_">getDate</span>() + <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> testBooking = &#123;</span><br><span class="line">      <span class="attr">city</span>: <span class="string">&#x27;Morelia&#x27;</span>,</span><br><span class="line">      <span class="attr">cinema</span>: <span class="string">&#x27;Plaza Morelia&#x27;</span>,</span><br><span class="line">      <span class="attr">movie</span>: <span class="string">&#x27;Assasins Creed&#x27;</span>,</span><br><span class="line">      <span class="attr">schedule</span>: now,</span><br><span class="line">      <span class="attr">cinemaRoom</span>: <span class="number">7</span>,</span><br><span class="line">      <span class="attr">seats</span>: [<span class="string">&#x27;45&#x27;</span>],</span><br><span class="line">      <span class="attr">totalAmount</span>: <span class="number">71</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">validate</span>(testBooking, <span class="string">&#x27;booking&#x27;</span>)</span><br><span class="line">      .<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;validated&#x27;</span>)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(value)</span><br><span class="line">        <span class="title function_">done</span>()</span><br><span class="line">      &#125;)</span><br><span class="line">      .<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(err)</span><br><span class="line">        <span class="title function_">done</span>()</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="title function_">it</span>(<span class="string">&#x27;can validate a user object&#x27;</span>, <span class="function">(<span class="params">done</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> testUser = &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;Cristian&#x27;</span>,</span><br><span class="line">      <span class="attr">lastName</span>: <span class="string">&#x27;Ramirez&#x27;</span>,</span><br><span class="line">      <span class="attr">email</span>: <span class="string">&#x27;cristiano@nupp.com&#x27;</span>,</span><br><span class="line">      <span class="attr">creditCard</span>: <span class="string">&#x27;1111222233334444&#x27;</span>,</span><br><span class="line">      <span class="attr">membership</span>: <span class="string">&#x27;7777888899990000&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">validate</span>(testUser, <span class="string">&#x27;user&#x27;</span>)</span><br><span class="line">      .<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;validated&#x27;</span>)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(value)</span><br><span class="line">        <span class="title function_">done</span>()</span><br><span class="line">      &#125;)</span><br><span class="line">      .<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(err)</span><br><span class="line">        <span class="title function_">done</span>()</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="title function_">it</span>(<span class="string">&#x27;can validate a ticket object&#x27;</span>, <span class="function">(<span class="params">done</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> testTicket = &#123;</span><br><span class="line">      <span class="attr">cinema</span>: <span class="string">&#x27;Plaza Morelia&#x27;</span>,</span><br><span class="line">      <span class="attr">schedule</span>: <span class="keyword">new</span> <span class="title class_">Date</span>(),</span><br><span class="line">      <span class="attr">movie</span>: <span class="string">&#x27;Assasins Creed&#x27;</span>,</span><br><span class="line">      <span class="attr">seats</span>: [<span class="string">&#x27;35&#x27;</span>],</span><br><span class="line">      <span class="attr">cinemaRoom</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="attr">orderId</span>: <span class="string">&#x27;34jh1231ll&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">validate</span>(testTicket, <span class="string">&#x27;ticket&#x27;</span>)</span><br><span class="line">      .<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;validated&#x27;</span>)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(value)</span><br><span class="line">        <span class="title function_">done</span>()</span><br><span class="line">      &#125;)</span><br><span class="line">      .<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(err)</span><br><span class="line">        <span class="title function_">done</span>()</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>然后，我们要看的代码文件是 <code>api/booking.js</code> ，我们将会遇到更多的麻烦了，<strong>¿ 为什么呢 ?</strong>，因为这里我们将会与<strong>两个外部服务</strong>进行交互：<strong>支付服务</strong>以及<strong>通知服务</strong>，而且这类交互会引发我们重新思考微服务的架构，并会牵扯到被称作<strong>时间驱动数据管理</strong>以及 <strong>CQRS</strong> 的课题，不过我们将把这些课题留到之后的章节再进行讨论，避免本章变得过于复杂冗长。所以，本章我们先与这些服务进行简单地交互。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span></span><br><span class="line"><span class="keyword">const</span> status = <span class="built_in">require</span>(<span class="string">&#x27;http-status&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="function">(<span class="params">&#123;repo&#125;, app</span>) =&gt;</span> &#123;</span><br><span class="line">  app.<span class="title function_">post</span>(<span class="string">&#x27;/booking&#x27;</span>, <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// we grab the dependencies need it for this route</span></span><br><span class="line">    <span class="keyword">const</span> validate = req.<span class="property">container</span>.<span class="title function_">resolve</span>(<span class="string">&#x27;validate&#x27;</span>)</span><br><span class="line">    <span class="keyword">const</span> paymentService = req.<span class="property">container</span>.<span class="title function_">resolve</span>(<span class="string">&#x27;paymentService&#x27;</span>)</span><br><span class="line">    <span class="keyword">const</span> notificationService = req.<span class="property">container</span>.<span class="title function_">resolve</span>(<span class="string">&#x27;notificationService&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="title class_">Promise</span>.<span class="title function_">all</span>([</span><br><span class="line">      <span class="title function_">validate</span>(req.<span class="property">body</span>.<span class="property">user</span>, <span class="string">&#x27;user&#x27;</span>),</span><br><span class="line">      <span class="title function_">validate</span>(req.<span class="property">body</span>.<span class="property">booking</span>, <span class="string">&#x27;booking&#x27;</span>)</span><br><span class="line">    ])</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">(<span class="params">[user, booking]</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> payment = &#123;</span><br><span class="line">        <span class="attr">userName</span>: user.<span class="property">name</span> + <span class="string">&#x27; &#x27;</span> + user.<span class="property">lastName</span>,</span><br><span class="line">        <span class="attr">currency</span>: <span class="string">&#x27;mxn&#x27;</span>,</span><br><span class="line">        <span class="attr">number</span>: user.<span class="property">creditCard</span>.<span class="property">number</span>,</span><br><span class="line">        <span class="attr">cvc</span>: user.<span class="property">creditCard</span>.<span class="property">cvc</span>,</span><br><span class="line">        <span class="attr">exp_month</span>: user.<span class="property">creditCard</span>.<span class="property">exp_month</span>,</span><br><span class="line">        <span class="attr">exp_year</span>: user.<span class="property">creditCard</span>.<span class="property">exp_year</span>,</span><br><span class="line">        <span class="attr">amount</span>: booking.<span class="property">amount</span>,</span><br><span class="line">        <span class="attr">description</span>: <span class="string">`</span></span><br><span class="line"><span class="string">          Tickect(s) for movie <span class="subst">$&#123;booking.movie&#125;</span>,</span></span><br><span class="line"><span class="string">          with seat(s) <span class="subst">$&#123;booking.seats.toString()&#125;</span></span></span><br><span class="line"><span class="string">          at time <span class="subst">$&#123;booking.schedule&#125;</span>`</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">all</span>([</span><br><span class="line">        <span class="comment">// we call the payment service</span></span><br><span class="line">        <span class="title function_">paymentService</span>(payment),</span><br><span class="line">        <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(user),</span><br><span class="line">        <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(booking)</span><br><span class="line">      ])</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">(<span class="params">[paid, user, booking]</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">all</span>([</span><br><span class="line">        repo.<span class="title function_">makeBooking</span>(user, booking),</span><br><span class="line">        repo.<span class="title function_">generateTicket</span>(paid, booking)</span><br><span class="line">      ])</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">(<span class="params">[booking, ticket]</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// we call the notification service</span></span><br><span class="line">      <span class="title function_">notificationService</span>(&#123;booking, ticket&#125;)</span><br><span class="line">      res.<span class="title function_">status</span>(status.<span class="property">OK</span>).<span class="title function_">json</span>(ticket)</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">catch</span>(next)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  app.<span class="title function_">get</span>(<span class="string">&#x27;/booking/verify/:orderId&#x27;</span>, <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">    repo.<span class="title function_">getOrderById</span>(req.<span class="property">params</span>.<span class="property">orderId</span>)</span><br><span class="line">      .<span class="title function_">then</span>(<span class="function"><span class="params">order</span> =&gt;</span> &#123;</span><br><span class="line">        res.<span class="title function_">status</span>(status.<span class="property">OK</span>).<span class="title function_">json</span>(order)</span><br><span class="line">      &#125;)</span><br><span class="line">      .<span class="title function_">catch</span>(next)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你可以看到，这里我们使用到了 expressjs 的<strong>中间件</strong>：<strong>container</strong>，并将其作为我们所用到的依赖项的唯一真实来源。</p><p>不过包含这些依赖项的 <strong>container</strong> 是从何而来呢？</p><p>我们现在对项目结构做了一点调整，主要是对 <code>config</code> 目录的调整，如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">. </span><br><span class="line">|-- config </span><br><span class="line">|   |-- db </span><br><span class="line">|   |   |-- index.js </span><br><span class="line">|   |   |-- mongo.js </span><br><span class="line">|   |   `-- mongo.spec.js </span><br><span class="line">|   |-- di </span><br><span class="line">|   |   |-- di.js </span><br><span class="line">|   |   `-- index.js </span><br><span class="line">|   |-- ssl</span><br><span class="line">|   |   |-- certificates </span><br><span class="line">|   |   `-- index.js</span><br><span class="line">|   |-- config.js</span><br><span class="line">|   |-- index.spec.js </span><br><span class="line">|   `-- index.js</span><br></pre></td></tr></table></figure><p>在 <code>config/index.js</code> 文件包含了几乎所有的配置文件，包括<strong>依赖注入</strong>服务：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;dbSettings, serverSettings&#125; = <span class="built_in">require</span>(<span class="string">&#x27;./config&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> database = <span class="built_in">require</span>(<span class="string">&#x27;./db&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> &#123;initDI&#125; = <span class="built_in">require</span>(<span class="string">&#x27;./di&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> models = <span class="built_in">require</span>(<span class="string">&#x27;../models&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> services = <span class="built_in">require</span>(<span class="string">&#x27;../services&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> init = initDI.<span class="title function_">bind</span>(<span class="literal">null</span>, &#123;serverSettings, dbSettings, database, models, services&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;, &#123;init&#125;)</span><br></pre></td></tr></table></figure><p>上面的代码中我们看到些不常见的东西，这里提出来给大家看看：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">initDI.<span class="title function_">bind</span>(<span class="literal">null</span>, &#123;serverSettings, dbSettings, database, models, services&#125;)</span><br></pre></td></tr></table></figure><p>这行代码到底做了什么呢？之前我提到过我们要配置<strong>依赖注入</strong>，不过这里我们做的事情叫作<strong>控制反转</strong>，的确这种说法太过于技术化了，甚至有些夸张，不过一旦你理解了之后就很容易理解。</p><p>所以我们的<strong>依赖注入</strong>函数不需要知道依赖项来自哪里，它只要注册这些依赖项，使得应用能够使用即可，我们的 <code>di.js</code> 看起来如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; createContainer, asValue, asFunction, asClass &#125; = <span class="built_in">require</span>(<span class="string">&#x27;awilix&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">initDI</span> (<span class="params">&#123;serverSettings, dbSettings, database, models, services&#125;, mediator</span>) &#123;</span><br><span class="line">  mediator.<span class="title function_">once</span>(<span class="string">&#x27;init&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    mediator.<span class="title function_">on</span>(<span class="string">&#x27;db.ready&#x27;</span>, <span class="function">(<span class="params">db</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> container = <span class="title function_">createContainer</span>()</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// loading dependecies in a single source of truth</span></span><br><span class="line">      container.<span class="title function_">register</span>(&#123;</span><br><span class="line">        <span class="attr">database</span>: <span class="title function_">asValue</span>(db).<span class="title function_">singleton</span>(),</span><br><span class="line">        <span class="attr">validate</span>: <span class="title function_">asValue</span>(models.<span class="property">validate</span>),</span><br><span class="line">        <span class="attr">booking</span>: <span class="title function_">asValue</span>(models.<span class="property">booking</span>),</span><br><span class="line">        <span class="attr">user</span>: <span class="title function_">asValue</span>(models.<span class="property">booking</span>),</span><br><span class="line">        <span class="attr">ticket</span>: <span class="title function_">asValue</span>(models.<span class="property">booking</span>),</span><br><span class="line">        <span class="title class_">ObjectID</span>: <span class="title function_">asClass</span>(database.<span class="property">ObjectID</span>),</span><br><span class="line">        <span class="attr">serverSettings</span>: <span class="title function_">asValue</span>(serverSettings),</span><br><span class="line">        <span class="attr">paymentService</span>: <span class="title function_">asValue</span>(services.<span class="property">paymentService</span>),</span><br><span class="line">        <span class="attr">notificationService</span>: <span class="title function_">asValue</span>(services.<span class="property">notificationService</span>)</span><br><span class="line">      &#125;)</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// we emit the container to be able to use it in the API</span></span><br><span class="line">      mediator.<span class="title function_">emit</span>(<span class="string">&#x27;di.ready&#x27;</span>, container)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    mediator.<span class="title function_">on</span>(<span class="string">&#x27;db.error&#x27;</span>, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">      mediator.<span class="title function_">emit</span>(<span class="string">&#x27;di.error&#x27;</span>, err)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    database.<span class="title function_">connect</span>(dbSettings, mediator)</span><br><span class="line"></span><br><span class="line">    mediator.<span class="title function_">emit</span>(<span class="string">&#x27;boot.ready&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span>.<span class="property">initDI</span> = initDI</span><br></pre></td></tr></table></figure><p>如你所见，我们使用了一个名为 <code>awilix</code> 的 npm 包用作依赖注入，awilix 实现了 nodejs 中的依赖注入机制（我目前正在试用这个库，这里使用它是为了是例子看起来更加清晰），要安装它需要执行以下指令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -S awilix --silent</span><br></pre></td></tr></table></figure><p>现在我们的主 <code>index.js</code> 文件看起来就像这样：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span></span><br><span class="line"><span class="keyword">const</span> &#123;<span class="title class_">EventEmitter</span>&#125; = <span class="built_in">require</span>(<span class="string">&#x27;events&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> server = <span class="built_in">require</span>(<span class="string">&#x27;./server/server&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> repository = <span class="built_in">require</span>(<span class="string">&#x27;./repository/repository&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> di = <span class="built_in">require</span>(<span class="string">&#x27;./config&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> mediator = <span class="keyword">new</span> <span class="title class_">EventEmitter</span>()</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;--- Booking Service ---&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Connecting to movies repository...&#x27;</span>)</span><br><span class="line"></span><br><span class="line">process.<span class="title function_">on</span>(<span class="string">&#x27;uncaughtException&#x27;</span>, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Unhandled Exception&#x27;</span>, err)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">process.<span class="title function_">on</span>(<span class="string">&#x27;uncaughtRejection&#x27;</span>, <span class="function">(<span class="params">err, promise</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Unhandled Rejection&#x27;</span>, err)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">mediator.<span class="title function_">on</span>(<span class="string">&#x27;di.ready&#x27;</span>, <span class="function">(<span class="params">container</span>) =&gt;</span> &#123;</span><br><span class="line">  repository.<span class="title function_">connect</span>(container)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">repo</span> =&gt;</span> &#123;</span><br><span class="line">      container.<span class="title function_">registerFunction</span>(&#123;repo&#125;)</span><br><span class="line">      <span class="keyword">return</span> server.<span class="title function_">start</span>(container)</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">app</span> =&gt;</span> &#123;</span><br><span class="line">      app.<span class="title function_">on</span>(<span class="string">&#x27;close&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        container.<span class="title function_">resolve</span>(<span class="string">&#x27;repo&#x27;</span>).<span class="title function_">disconnect</span>()</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">di.<span class="title function_">init</span>(mediator)</span><br><span class="line"></span><br><span class="line">mediator.<span class="title function_">emit</span>(<span class="string">&#x27;init&#x27;</span>)</span><br></pre></td></tr></table></figure><p>现在你能看到，我们使用的包含所有依赖项的真实唯一来源，可通过 request 的 container 属性访问，至于我们怎样通过 expressjs 的<strong>中间件</strong>进行设置的，如之前提到过的，其实只需要几行代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> morgan = <span class="built_in">require</span>(<span class="string">&#x27;morgan&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> helmet = <span class="built_in">require</span>(<span class="string">&#x27;helmet&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> bodyparser = <span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> cors = <span class="built_in">require</span>(<span class="string">&#x27;cors&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> spdy = <span class="built_in">require</span>(<span class="string">&#x27;spdy&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> _api = <span class="built_in">require</span>(<span class="string">&#x27;../api/booking&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">start</span> = (<span class="params">container</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// here we grab our dependencies needed for the server</span></span><br><span class="line">    <span class="keyword">const</span> &#123;repo, port, ssl&#125; = container.<span class="title function_">resolve</span>(<span class="string">&#x27;serverSettings&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!repo) &#123;</span><br><span class="line">      <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;The server must be started with a connected repository&#x27;</span>))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!port) &#123;</span><br><span class="line">      <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;The server must be started with an available port&#x27;</span>))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line">    app.<span class="title function_">use</span>(<span class="title function_">morgan</span>(<span class="string">&#x27;dev&#x27;</span>))</span><br><span class="line">    app.<span class="title function_">use</span>(bodyparser.<span class="title function_">json</span>())</span><br><span class="line">    app.<span class="title function_">use</span>(<span class="title function_">cors</span>())</span><br><span class="line">    app.<span class="title function_">use</span>(<span class="title function_">helmet</span>())</span><br><span class="line">    app.<span class="title function_">use</span>(<span class="function">(<span class="params">err, req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Something went wrong!, err:&#x27;</span> + err))</span><br><span class="line">        res.<span class="title function_">status</span>(<span class="number">500</span>).<span class="title function_">send</span>(<span class="string">&#x27;Something went wrong!&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="title function_">next</span>()</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// here is where we register the container as middleware</span></span><br><span class="line">    app.<span class="title function_">use</span>(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">      req.<span class="property">container</span> = container.<span class="title function_">createScope</span>()</span><br><span class="line">      <span class="title function_">next</span>()</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// here we inject the repo to the API, since the repo is need it for all of our functions</span></span><br><span class="line">    <span class="comment">// and we are using inversion of control to make it available</span></span><br><span class="line">    <span class="keyword">const</span> api = _api.<span class="title function_">bind</span>(<span class="literal">null</span>, &#123;<span class="attr">repo</span>: container.<span class="title function_">resolve</span>(<span class="string">&#x27;repo&#x27;</span>)&#125;)</span><br><span class="line">    <span class="title function_">api</span>(app)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (process.<span class="property">env</span>.<span class="property">NODE</span> === <span class="string">&#x27;test&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> server = app.<span class="title function_">listen</span>(port, <span class="function">() =&gt;</span> <span class="title function_">resolve</span>(server))</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> server = spdy.<span class="title function_">createServer</span>(ssl, app)</span><br><span class="line">        .<span class="title function_">listen</span>(port, <span class="function">() =&gt;</span> <span class="title function_">resolve</span>(server))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;, &#123;start&#125;)</span><br></pre></td></tr></table></figure><p>基本上，我们只是将 <strong>container</strong> 对象附加到了 expressjs 的 <strong>req 对象</strong>上，这样 expressjs 的所有路由上都能访问到它了。如果你想更深入地了解 expressjs 的中间件是如何工作的，你可以点击<a href="http://expressjs.com/en/guide/using-middleware.html">这个链接查看 expressjs 的文档</a>。</p><p>常言道好事多磨，最后让我们来看看 <code>repository.js</code> 文件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">&#x27;use strict&#x27;</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">repository</span> = (<span class="params">container</span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// we get the db object via the container</span></span><br><span class="line">  <span class="keyword">const</span> &#123;db&#125; = container.<span class="title function_">resolve</span>(<span class="string">&#x27;database&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">makeBooking</span> = (<span class="params">user, booking</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// payload to be insterted to the booking collection </span></span><br><span class="line">      <span class="keyword">const</span> payload = &#123;</span><br><span class="line">        <span class="attr">city</span>: booking.<span class="property">city</span>,</span><br><span class="line">        <span class="attr">cinema</span>: booking.<span class="property">cinema</span>,</span><br><span class="line">        <span class="attr">book</span>: &#123;</span><br><span class="line">          <span class="attr">userType</span>: (user.<span class="property">membership</span>) ? <span class="string">&#x27;loyal&#x27;</span> : <span class="string">&#x27;normal&#x27;</span>,</span><br><span class="line">          <span class="attr">movie</span>: &#123;</span><br><span class="line">            <span class="attr">title</span>: booking.<span class="property">movie</span>.<span class="property">title</span>,</span><br><span class="line">            <span class="attr">format</span>: booking.<span class="property">movie</span>.<span class="property">format</span>,</span><br><span class="line">            <span class="attr">schedule</span>: booking.<span class="property">schedule</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      db.<span class="title function_">collection</span>(<span class="string">&#x27;booking&#x27;</span>).<span class="title function_">insertOne</span>(payload, <span class="function">(<span class="params">err, booked</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">          <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;An error occuered registring a user booking, err:&#x27;</span> + err))</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">resolve</span>(booked)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">generateTicket</span> = (<span class="params">paid, booking</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// payload of ticket</span></span><br><span class="line">      <span class="keyword">const</span> payload = <span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;, &#123;booking, <span class="attr">orderId</span>: paid.<span class="property">_id</span>&#125;)</span><br><span class="line">      db.<span class="title function_">collection</span>(<span class="string">&#x27;tickets&#x27;</span>).<span class="title function_">insertOne</span>(payload, <span class="function">(<span class="params">err, ticket</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">          <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;an error occured registring a ticket, err:&#x27;</span> + err))</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">resolve</span>(ticket)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">getOrderById</span> = (<span class="params">orderId</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> <span class="title class_">ObjectID</span> = container.<span class="title function_">resolve</span>(<span class="string">&#x27;ObjectID&#x27;</span>)</span><br><span class="line">      <span class="keyword">const</span> query = &#123;<span class="attr">_id</span>: <span class="keyword">new</span> <span class="title class_">ObjectID</span>(orderId)&#125;</span><br><span class="line">      <span class="keyword">const</span> <span class="title function_">response</span> = (<span class="params">err, order</span>) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">          <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;An error occuered retrieving a order, err: &#x27;</span> + err))</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">resolve</span>(order)</span><br><span class="line">      &#125;</span><br><span class="line">      db.<span class="title function_">collection</span>(<span class="string">&#x27;booking&#x27;</span>).<span class="title function_">findOne</span>(query, &#123;&#125;, response)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">disconnect</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    db.<span class="title function_">close</span>()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="title function_">create</span>(&#123;</span><br><span class="line">    makeBooking,</span><br><span class="line">    getOrderById,</span><br><span class="line">    generateTicket,</span><br><span class="line">    disconnect</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">connect</span> = (<span class="params">container</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!container.<span class="title function_">resolve</span>(<span class="string">&#x27;database&#x27;</span>)) &#123;</span><br><span class="line">      <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;connection db not supplied!&#x27;</span>))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="title function_">repository</span>(container))</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;, &#123;connect&#125;)</span><br></pre></td></tr></table></figure><p> <code>repository.js</code> 文件并无特别之处，除了这可能是我们在系列文章中，第一次使用到 <code>insertOne()</code> 方法。不过我想指出一件事情，特别是在 <code>makeBooking()</code> 方法中，你可以看到 payload 使用了整个数据模型对象，为什么我们要这样用？这样是否会有太多的冗余信息？</p><p>没错，这样会造成数据冗余，同时也不是最好的实现方式，但是我们确实有理由这样做，不过得等到下回我才会告诉你为什么，因为一些有趣的事情即将发生。</p><p>如果你很好奇，那么我可以先给你留一点点提示😁</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">  ----------------------------------------</span><br><span class="line"> |                                        |</span><br><span class="line"> |                                        v</span><br><span class="line"> |                       Jane  ------(went to)----------</span><br><span class="line"> |                         |                            |</span><br><span class="line"> |                         | (loyal vistor)             |</span><br><span class="line"> |                         v                            v</span><br><span class="line">Joe --(normal visitor)--&gt; Movie Name &lt;--(displayed)-- Plaza Morelia</span><br><span class="line">                            |                           |</span><br><span class="line">                            |  (format)                 | (city)</span><br><span class="line">                            v                           v</span><br><span class="line">                           4DX                       Morelia</span><br></pre></td></tr></table></figure><p>前面提到我们会与两个外部服务进行交互，先稍微看一下这些外部服务需要做什么。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"># <span class="keyword">for</span> the payment service we will need to implement something like the following</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="function">(<span class="params">paymentOrder</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">supertest</span>(<span class="string">&#x27;url to the payment service&#x27;</span>)</span><br><span class="line">      .<span class="title function_">get</span>(<span class="string">&#x27;/makePurchase&#x27;</span>)</span><br><span class="line">      .<span class="title function_">send</span>(&#123;paymentOrder&#125;)</span><br><span class="line">      .<span class="title function_">end</span>(<span class="function">(<span class="params">err, res</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">          <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;An error occured with the payment service, err: &#x27;</span> + err))</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">resolve</span>(res.<span class="property">body</span>.<span class="property">payment</span>)</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># since we haven<span class="string">&#x27;t made the payment service yet, let&#x27;</span>s make something simple to fulfill the article example, like the following    </span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="function">(<span class="params">paymentOrder</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(&#123;<span class="attr">orderId</span>: <span class="title class_">Math</span>.<span class="title function_">floor</span>((<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">1000</span>) + <span class="number">1</span>)&#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># <span class="keyword">for</span> the notification service, at the moment we don<span class="string">&#x27;t need any information from this service we will not implement it, this service will have the task for sending an email, sms or another notification, but we will make this service in the next chapter.</span></span><br></pre></td></tr></table></figure><p>到这里我们就完成了本章微服务的构建工作，现在可以使用以下指令，执行代码库中的文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">bash &lt; start_service</span></span><br></pre></td></tr></table></figure><p>以保证我们的微服务在 docker 容器中完整可用，并开始<strong>集成测试</strong>。</p><h1 id="本章回顾"><a href="#本章回顾" class="headerlink" title="本章回顾"></a>本章回顾</h1><p>我们做了什么…</p><p>如果你看了之前的几篇文章，那么我们已经有了一个如下的系统架构图：</p><p><img src="https://img.zvz.im/imgs/2019/06/eac76015e41c1aa8.png" alt=""></p><p>你可以看到系统已经基本成形了，只是某些部分还是有点不对，那就是在 <strong>worker1</strong> 和 <strong>worker2</strong> 中我们没有运行任何微服务。那是因为我们还没有在这些 <strong>docker-machines</strong> 中创建任何的服务，不过以后会去做的。</p><p>在<strong>影院微服务架构</strong>中，我们基本上完成了下图中的部分：</p><p><img src="https://img.zvz.im/imgs/2019/06/82a13f9a82e55315.png" alt=""></p><p>我们刚刚完成了<strong>订票服务</strong>，而且实现了简易版的<strong>支付服务</strong>和<strong>通知服务</strong>。</p><p>在本章中我们都做了什么事情¿ 🤔 ?，我们学习了<strong>依赖注入</strong>，接触了一点<strong>SOLID原则</strong>和<strong>控制反转</strong>的概念，还使用 <strong>NodeJS</strong> 完成了对微服务的第一个<strong>POST 请求</strong>，我们还学习到如何使用<strong>joi</strong>库进行对象和数据的校验。</p><p>我们已经学习了许多<strong>NodeJS</strong>开发的代码，不过我们仍然有很多可做和可学习的事情，这儿仅仅只是其中一小部分而已。希望它展示出了一些有趣而有用的东西，使你在工作中能够运用到 <strong>Docker 和 NodeJS</strong> 的相关技术。</p><p>翻译自：<a href="https://medium.com/@cramirez92/build-a-nodejs-cinema-booking-microservice-and-deploying-it-with-docker-part-3-9c384e21fbe0">Build a NodeJS cinema booking microservice and deploying it with docker (part 3)</a></p><p><a href="https://log.zvz.im/2017/05/24/nodejs-cinema-microservice-part1/">系列文章 - Part 1</a><br><a href="https://log.zvz.im/2017/07/17/nodejs-cinema-microservice-part2/">系列文章 - Part 2</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;大家好，本文是「使用 NodeJS 构建影院微服务」系列的第三篇文章。此系列文章旨在展示如何使用 ES6，¿ES7 …8?，和 expressjs 构建一个 API 应用，如何连接 MongoDB 集群，怎样将其部署于 docker 容器中，以及模拟微服务运行于云环境中的情况。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;以往章节快速回顾&quot;&gt;&lt;a href=&quot;#以往章节快速回顾&quot; class=&quot;headerlink&quot; title=&quot;## 以往章节快速回顾&quot;&gt;&lt;/a&gt;## 以往章节快速回顾&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;我们讲了&lt;strong&gt;什么是微服务&lt;/strong&gt;，探讨了&lt;strong&gt;微服务&lt;/strong&gt;的&lt;strong&gt;利&lt;/strong&gt;与&lt;strong&gt;弊&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;我们定义了&lt;strong&gt;影院微服务架构&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;我们设计并实现了&lt;strong&gt;电影服务&lt;/strong&gt;和&lt;strong&gt;影院目录服务&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;我们实现了这些服务的 API 接口，并对这些接口做了&lt;strong&gt;单元测试&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;我们对运行于&lt;strong&gt;Docker&lt;/strong&gt;中的&lt;strong&gt;服务&lt;/strong&gt;进行了集成测试&lt;/li&gt;
&lt;li&gt;我们讨论了&lt;strong&gt;微服务安全&lt;/strong&gt;并使其适配了 &lt;strong&gt;HTTP/2 协议&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;我们对&lt;strong&gt;影院目录服务&lt;/strong&gt;进行了&lt;strong&gt;压力测试&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Nodejs" scheme="http://log.zvz.im/tags/Nodejs/"/>
    
  </entry>
  
  <entry>
    <title>用 NodeJS 打造影院微服务并部署到 docker 上 — Part 2</title>
    <link href="http://log.zvz.im/2017/07/17/nodejs-cinema-microservice-part2/"/>
    <id>http://log.zvz.im/2017/07/17/nodejs-cinema-microservice-part2/</id>
    <published>2017-07-17T14:18:23.000Z</published>
    <updated>2025-07-03T18:06:35.827Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文是「使用 NodeJS 构建影院微服务」系列的第二篇文章。</p></blockquote><h3 id="第一章快速回顾"><a href="#第一章快速回顾" class="headerlink" title="## 第一章快速回顾"></a>## 第一章快速回顾</h3><ul><li>我们讲了<strong>什么是微服务</strong></li><li>我们对比了<strong>微服务</strong>的<strong>利</strong>与<strong>弊</strong></li><li>我们设计了一个<strong>影院微服务的架构</strong></li><li>我们使用 <strong>RAML</strong> 定义了<strong>电影服务 API</strong> 的技术规格</li><li>我们使用 <strong>NodeJS 和 ExpressJS</strong> 开发了 <strong>电影服务 API</strong></li><li>我们针对 API 做了<strong>单元测试</strong></li><li>我们将 API 组成一个服务，并使我们的<strong>电影服务</strong>运行在 <strong>Docker</strong> 容器中</li><li>我们对运行在 <strong>Docker</strong> 中的<strong>电影服务</strong>做了<strong>集成测试</strong></li></ul><p>如果你还没有阅读过第一篇文章，你可以<a href="https://log.zvz.im/2017/05/24/nodejs-cinema-microservice-part1/">去这里看看</a>👀。</p><p>在本篇中我们将继续构建我们的<strong>影院微服务</strong>，这次我们将进行<strong>影院目录服务</strong>的开发，以完成下图中的功能。</p><p><img src="https://img.zvz.im/imgs/2019/06/f142eea98b22201f.png" alt=""><br><span id="more"></span><br>我们将使用到以下技术：</p><ul><li>NodeJS version 7.2.0</li><li>MongoDB 3.4.1</li><li>Docker for Mac 1.13</li></ul><p>要跟上本文的进度有以下要求：</p><ul><li>已经完成<a href="https://log.zvz.im/2017/05/24/nodejs-cinema-microservice-part1/">上一篇文章</a>中的例子代码</li></ul><p>如果你还没有完成这些代码，我已经将代码传到了 github 上，你可以直接使用<a href="https://github.com/Crizstian/cinema-microservice/tree/step-1">代码库</a>分支 <strong>step-1</strong>。</p><h2 id="微服务安全以及-¿-HTTP-2"><a href="#微服务安全以及-¿-HTTP-2" class="headerlink" title="# 微服务安全以及 ¿ HTTP/2 ?"></a># 微服务安全以及 ¿ HTTP/2 ?</h2><p>在第一章中，我们实现了一个简单的微服务，它使用的是 HTTP/1.1 协议。对于已有 15 年历史的 HTTP 协议来说，<strong>HTTP/2 是第一次大升级</strong>，它被高度优化且效率更高。<strong>HTTP/2 是最新的网络标准</strong>，它起源于谷歌的 SPDY 协议。现在已有许多热门站点在使用它，并且几乎所有主流浏览器都支持该协议。</p><p><strong>要实现 HTTP/2，只需满足以下一些规则。</strong></p><ul><li>它仅支持 HTTPS 协议（我们需要一个有效的 SSL 安全证书）</li><li>它是向后兼容的。当浏览器或设备不支持 <strong>HTTP/2</strong> 时，它能回退到 HTTP/1.1</li><li>它会带来极大的性能提升</li><li>它不需要客户端做任何改动，只需要服务端做一个基础实现</li><li>一些有趣的新特性能提高站点的加载速度，在 HTTP 1.1 中这种方式是无法想象的</li></ul><h3 id="一个启用了-HTTP-2-的微服务网络架构"><a href="#一个启用了-HTTP-2-的微服务网络架构" class="headerlink" title="一个启用了 HTTP/2 的微服务网络架构"></a>一个启用了 HTTP/2 的微服务网络架构</h3><p><em>这意味着我们要在客户端与服务端之间启用一个单独的连接，然后在“网络中”利用类似 Y 轴分片（ Y-axis sharding 会在本系列文章的动态扩容篇讲到更多）的方式享受 HTTP/2 带来的性能提升，同时还能享受微服务架构在运营和开发上带来的好处。</em></p><p>为什么我们要使用最新的 <strong>HTTP/2 协议</strong>？因为作为一名好的开发者，我们不仅要保障应用，基础设施和通信的安全，尽最大努力来防止恶意攻击；而且作为一名好的开发者，我们还应该采用对我们有利的最佳实践方式，比如使用 HTTP/2 。</p><p>微服务安全的一些好的实践方式如下：</p><blockquote><p>安全，是微服务应用生产环境部署中的一个重要组成部分。根据 451 Research 的一项名为<a href="https://451research.com/blog/64-451-research-presents-2016-software-defined-infrastructure-sdi-outlook">2016软件定义设施展望</a>的调查，在未来的 12 月内，近 45% 的企业已经或计划实现基于容器的应用部署。由于 DevOps 实践在企业中取得了稳固地位，容器应用变得更加流行，安全顾问们需要知道如何保障这些应用的安全。—— <a href="http://www.darkreading.com/endpoint/rethinking-application-security-with-microservices-architectures-/a/d-id/1325155">@Ranga Rajagopalan</a></p></blockquote><ul><li>发现并监控服务间通信</li><li>分段并隔离应用与服务</li><li>对传输中的数据以及存储的数据进行加密</li></ul><p>我们将对微服务通信进行加密以实现安全通信，并提升公网流量的安全性，这是我们使用 <strong>HTTP/2</strong> 的原因之一，为了更好的性能以及安全提升。</p><h2 id="微服务的-HTTP-2-实现"><a href="#微服务的-HTTP-2-实现" class="headerlink" title="# 微服务的 HTTP/2 实现"></a># 微服务的 HTTP/2 实现</h2><p>首先，让我们更新下上一章的<strong>电影服务</strong>，以支持 <strong>HTTP/2</strong> 协议，在此之前我们在 <strong>config</strong> 目录下新建一个 <strong>ssl</strong> 目录。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">movies-service/config:/ $ mkdir ssl</span><br><span class="line">movies-service/config:/ $ cd ssl</span><br></pre></td></tr></table></figure><p>进入 <strong>ssl</strong> 目录后，我们创建一个自签名的 SSL 证书，用于实现 <strong>HTTP/2</strong> 协议。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Let&#x27;s generate the server pass key</span></span><br><span class="line"></span><br><span class="line">ssl/: $ openssl genrsa -des3 -passout pass:x -out server.pass.key 2048 </span><br><span class="line"><span class="comment"># now generate the server key from the pass key</span></span><br><span class="line"></span><br><span class="line">ssl/: $ openssl rsa -passin pass:x -<span class="keyword">in</span> server.pass.key -out server.key</span><br><span class="line"><span class="comment"># we remove the pass key</span></span><br><span class="line"></span><br><span class="line">ssl/: $ <span class="built_in">rm</span> server.pass.key</span><br><span class="line"><span class="comment"># now let&#x27;s create the .csr file</span></span><br><span class="line">ssl/: $ openssl req -new -key server.key -out server.csr </span><br><span class="line">...</span><br><span class="line">Country Name (2 letter code) [AU]:MX</span><br><span class="line">State or Province Name (full name) [Some-State]:Michoacan </span><br><span class="line">... </span><br><span class="line">A challenge password []: </span><br><span class="line">...</span><br><span class="line"><span class="comment"># now let&#x27;s create the .crt file</span></span><br><span class="line">ssl/: $ openssl x509 -req -sha256 -days 365 -<span class="keyword">in</span> server.csr -signkey server.key -out server.crt</span><br></pre></td></tr></table></figure><p>然后我们使用下面的命令安装 <strong>SPDY</strong> 包：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cinema-catalog-service/: $ npm i -S spdy --silent</span><br></pre></td></tr></table></figure><p>首先我们在 <code>ssl/</code> 目录下创建一个 <code>index.js</code> 文件，代码如下，我们在代码中加载 key 和 cert 文件，这里是我们为数不多地使用 <code>fs.readFileSync()</code> 的地方之一：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">key</span>: fs.<span class="title function_">readFileSync</span>(<span class="string">`<span class="subst">$&#123;__dirname&#125;</span>/server.key`</span>),</span><br><span class="line">  <span class="attr">cert</span>: fs.<span class="title function_">readFileSync</span>(<span class="string">`<span class="subst">$&#123;__dirname&#125;</span>/server.crt`</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后我们还要修改一些文件，第一个文件是 <code>config.js</code> ：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> dbSettings = &#123; ... &#125;</span><br><span class="line"><span class="comment">// The first modification is adding the ssl certificates to the </span></span><br><span class="line"><span class="comment">// serverSettings</span></span><br><span class="line"><span class="keyword">const</span> serverSettings = &#123;</span><br><span class="line">  <span class="attr">port</span>: process.<span class="property">env</span>.<span class="property">PORT</span> || <span class="number">3000</span>,</span><br><span class="line">  <span class="attr">ssl</span>: <span class="built_in">require</span>(<span class="string">&#x27;./ssl&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;, &#123; dbSettings, serverSettings &#125;)</span><br></pre></td></tr></table></figure><p>接下来修改 <code>server.js</code> ，如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">const</span> spdy = <span class="built_in">require</span>(<span class="string">&#x27;spdy&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> api = <span class="built_in">require</span>(<span class="string">&#x27;../api/movies&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">start</span> = (<span class="params">options</span>) =&gt; &#123;</span><br><span class="line">...</span><br><span class="line"> <span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"> app.<span class="title function_">use</span>(<span class="title function_">morgan</span>(<span class="string">&#x27;dev&#x27;</span>))</span><br><span class="line"> app.<span class="title function_">use</span>(<span class="title function_">helmet</span>())</span><br><span class="line"> app.<span class="title function_">use</span>(<span class="function">(<span class="params">err, req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">   <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Something went wrong!, err:&#x27;</span> + err))</span><br><span class="line">   res.<span class="title function_">status</span>(<span class="number">500</span>).<span class="title function_">send</span>(<span class="string">&#x27;Something went wrong!&#x27;</span>)</span><br><span class="line"> &#125;)</span><br><span class="line"> <span class="title function_">api</span>(app, options)</span><br><span class="line"> <span class="comment">// here is where we made the modifications, we create a spdy</span></span><br><span class="line"> <span class="comment">// server, then we pass the ssl certs, and the express app</span></span><br><span class="line"> <span class="keyword">const</span> server = spdy.<span class="title function_">createServer</span>(options.<span class="property">ssl</span>, app)</span><br><span class="line">      .<span class="title function_">listen</span>(options.<span class="property">port</span>, <span class="function">() =&gt;</span> <span class="title function_">resolve</span>(server))</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;, &#123;start&#125;)</span><br></pre></td></tr></table></figure><p>最后修改 <code>index.js</code> 这个主文件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span></span><br><span class="line"><span class="keyword">const</span> &#123;<span class="title class_">EventEmitter</span>&#125; = <span class="built_in">require</span>(<span class="string">&#x27;events&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> server = <span class="built_in">require</span>(<span class="string">&#x27;./server/server&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> repository = <span class="built_in">require</span>(<span class="string">&#x27;./repository/repository&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> config = <span class="built_in">require</span>(<span class="string">&#x27;./config/&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> mediator = <span class="keyword">new</span> <span class="title class_">EventEmitter</span>()</span><br><span class="line">...</span><br><span class="line">mediator.<span class="title function_">on</span>(<span class="string">&#x27;db.ready&#x27;</span>, <span class="function">(<span class="params">db</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> rep</span><br><span class="line">  repository.<span class="title function_">connect</span>(db)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">repo</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Connected. Starting Server&#x27;</span>)</span><br><span class="line">      rep = repo</span><br><span class="line">      <span class="keyword">return</span> server.<span class="title function_">start</span>(&#123;</span><br><span class="line">        <span class="attr">port</span>: config.<span class="property">serverSettings</span>.<span class="property">port</span>,</span><br><span class="line">        <span class="comment">// here we pass the ssl options to the server.js file</span></span><br><span class="line">        <span class="attr">ssl</span>: config.<span class="property">serverSettings</span>.<span class="property">ssl</span>,</span><br><span class="line">        repo</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">app</span> =&gt;</span> &#123; ... &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>现在我们使用下面的指令重建 docker 镜像：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker build -t movies-service .</span></span><br></pre></td></tr></table></figure><p>再使用以下参数运行我们的 docker 镜像 <code>moives-service</code> ：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker run --name movies-service -p 443:3000 -d movies-service</span></span><br></pre></td></tr></table></figure><p>最终我们用 chrome 浏览器测试一下，可以确认我们的 <strong>HTTP/2</strong> 协议已经完全生效了。</p><p><img src="https://img.zvz.im/imgs/2019/06/6858ab638d364e2d.png" alt=""></p><p>而且我们还可以使用 <strong>wireshark</strong> 之类的抓包工具确认 <strong>ssl</strong> 确实生效了。</p><p><img src="https://img.zvz.im/imgs/2019/06/0d98f20c7725bd61.png" alt=""></p><h3 id="在微服务上实现-JWT"><a href="#在微服务上实现-JWT" class="headerlink" title="# 在微服务上实现 JWT"></a># 在微服务上实现 JWT</h3><p>另外一种加密并保障我们的微服务通信安全的方式是使用 <code>json web token</code> 协议，我们将在本系列后面的文章中讲到🚉。</p><h2 id="构建微服务"><a href="#构建微服务" class="headerlink" title="# 构建微服务"></a># 构建微服务</h2><p>到此为止我们已经知道了如何实现 <strong>HTTP/2</strong> 协议，接下来让我们继续构建<strong>影院目录服务</strong> 。我们会使用与<strong>电影服务</strong>一样的项目结构，让我们少讲话🗣多编码👨🏻‍💻👩🏻‍💻这就干起来。</p><p>在开始设计 API 之前，这次我们要先为数据库设计 <strong>Mongo Schemas</strong>，我们将使用到以下数据库：</p><ul><li>Locations（国家，州县和城市）</li><li>Cinemas（影院，放映计划，电影）</li></ul><h3 id="模型数据设计"><a href="#模型数据设计" class="headerlink" title="# 模型数据设计"></a># 模型数据设计</h3><p>本文重点关注于构建微服务，故不会在“模型数据设计”上花太多的时间，只会强调某些部分。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># posible collections for the cinemas db.</span><br><span class="line"># For locations </span><br><span class="line">- countries</span><br><span class="line">- states</span><br><span class="line">- cities</span><br><span class="line"># For cinemas</span><br><span class="line">- cinemas</span><br><span class="line">- cinemaRooms</span><br><span class="line">- schedules</span><br></pre></td></tr></table></figure><p>对于我们的 <strong>Locations</strong> 库来说，一个国家可以有多个州而一个州则对应一个国家，所以这是<strong>一对多</strong>的关系，对于州和城市来说也是一样的关系，让我们看一下关系图：</p><p><img src="https://img.zvz.im/imgs/2019/06/5c43c08b82f70617.png" alt=""></p><p><img src="https://img.zvz.im/imgs/2019/06/7de1fafcdbfff1a2.png" alt=""></p><p>这种关系还适用于很多情况。一个城市有多个电影院，一个电影院属于一个城市；一个放映室有许多放映计划，一个放映计划属于一个放映室，我们看一下它们之间的关系。</p><p><img src="https://img.zvz.im/imgs/2019/06/3f1a1b0ba2e94f39.png" alt=""></p><p>如果电影院数组或者放映计划数据增长比较有限，我们可以采用上图中的引用关系。假设一个放映室每天最多只有 5 个放映计划，我们也可以将放映计划文档直接嵌入到影院文档中去。</p><blockquote><p>内嵌数据模型允许应用将相关性数据片断存放在同一条数据库记录中。这样做可使得应用的常用操作需要更少的查询和更新。—— MongoDB Docs</p></blockquote><p><img src="https://img.zvz.im/imgs/2019/06/213cd97d135f56e1.png" alt=""></p><p>这就是我们数据库结构设计的最终结果。</p><h3 id="将数据导入数据库"><a href="#将数据导入数据库" class="headerlink" title="# 将数据导入数据库"></a># 将数据导入数据库</h3><p>我已经为刚才设计的数据库结构准备了一些样例数据，在 github 仓库的 <code>cinema-catalog-service/src/mock</code> 目录下有 4 个 JOSN 文件，你可以将它们导入到影院数据库中，不过首先我们找到数据库主服务器，之后执行以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">first we need to copy the files one by one or we can zip it and pass the zip file</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker <span class="built_in">cp</span> countries.json mongoNodeContainer:/tmp</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker <span class="built_in">cp</span> state.json mongoNodeContainer:/tmp</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker <span class="built_in">cp</span> city.json mongoNodeContainer:/tmp</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker <span class="built_in">cp</span> cinemas.json mongoNodeContainer:/tmp</span></span><br></pre></td></tr></table></figure><p>执行完上面的命令后，我们就可以把数据导入到数据库中了：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker <span class="built_in">exec</span> mongoNode&#123;number&#125; bash -c <span class="string">&#x27;mongoimport --db cinemas --collection countries --file /tmp/countries.json --jsonArray -u $MONGO_USER_ADMIN -p $MONGO_PASS_ADMIN --authenticationDatabase &quot;admin&quot;&#x27;</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker <span class="built_in">exec</span> mongoNode&#123;number&#125; bash -c <span class="string">&#x27;mongoimport --db cinemas --collection states --file /tmp/states.json --jsonArray -u $MONGO_USER_ADMIN -p $MONGO_PASS_ADMIN --authenticationDatabase &quot;admin&quot;&#x27;</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker <span class="built_in">exec</span> mongoNode&#123;number&#125; bash -c <span class="string">&#x27;mongoimport --db cinemas --collection cities --file /tmp/cities.json --jsonArray -u $MONGO_USER_ADMIN -p $MONGO_PASS_ADMIN --authenticationDatabase &quot;admin&quot;&#x27;</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker <span class="built_in">exec</span> mongoNode&#123;number&#125; bash -c <span class="string">&#x27;mongoimport --db cinemas --collection cinemas --file /tmp/cinemas.json --jsonArray -u $MONGO_USER_ADMIN -p $MONGO_PASS_ADMIN --authenticationDatabase &quot;admin&quot;&#x27;</span></span></span><br></pre></td></tr></table></figure><p>现在我们已经设计好了数据库结构，而且数据也已导入可以查询了，那么我们现在开始为<strong>影院目录服务</strong>设计 API，有一种定义路由的方法是用一句话把它们表达出来，如下：</p><ul><li>我们需要一个城市能够显示所有可用的电影院。</li><li>我们需要这些电影院展示电影上映信息。</li><li>我们需要电影的首映信息并展示放映计划。</li><li>我们需要放映计划并查看是否有座位可供订票。</li></ul><p>我们假设 <strong>Cinépolis</strong> IT 部门的其他开发小组在做其他的增删改查操作，而交给我们的任务只是查询读取数据，我们还假设一些 <strong>Cinépolis</strong> 影院的操作人员已经为影院排好了放映计划，这样一来我们的任务只是取获取这些计划而已。</p><p><strong>影院目录服务</strong>只专注于处理影院和放映计划两方面的数据，没有其它功能，之前我们提到的 <strong>locations</strong> 数据集合，是另一个微服务负责处理的，不过显示影院和放映计划时还是要依赖位置信息的。</p><p>现在我们已经确认了需求边界，可以创建我们的 RAML 文件了，如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#%RAML 1.0</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">Cinema</span> <span class="string">Catalog</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">version:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">baseUri:</span> <span class="string">/</span></span><br><span class="line"><span class="attr">uses:</span></span><br><span class="line">  <span class="attr">object:</span> <span class="string">types.raml</span></span><br><span class="line">  <span class="attr">stack:</span> <span class="string">../movies-service/api.raml</span></span><br><span class="line"></span><br><span class="line"><span class="attr">types:</span></span><br><span class="line">  <span class="attr">Cinemas:</span> <span class="string">object.Cinema</span> []</span><br><span class="line">  <span class="attr">Movies:</span> <span class="string">stack.MoviePremieres</span></span><br><span class="line">  <span class="attr">Schedules:</span> <span class="string">object.Schedule</span> []</span><br><span class="line"></span><br><span class="line"><span class="attr">traits:</span></span><br><span class="line">  <span class="attr">FilterByLocation:</span></span><br><span class="line">    <span class="attr">queryParameters:</span></span><br><span class="line">      <span class="attr">city:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">string</span></span><br><span class="line"></span><br><span class="line"><span class="attr">resourceTypes:</span></span><br><span class="line">  <span class="attr">GET:</span></span><br><span class="line">    <span class="attr">get:</span></span><br><span class="line">      <span class="attr">responses:</span></span><br><span class="line">        <span class="attr">200:</span></span><br><span class="line">          <span class="attr">body:</span></span><br><span class="line">            <span class="attr">application/json:</span></span><br><span class="line">              <span class="attr">type:</span> <span class="string">&lt;&lt;item&gt;&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">/cinemas:</span></span><br><span class="line">  <span class="attr">type:</span>  &#123; <span class="attr">GET:</span> &#123;<span class="attr">item :</span> <span class="string">Cinemas</span> &#125; &#125;</span><br><span class="line">  <span class="attr">get:</span></span><br><span class="line">    <span class="attr">is:</span> [<span class="string">FilterByLocation</span>]</span><br><span class="line">  <span class="attr">description:</span> <span class="string">we</span> <span class="string">already</span> <span class="string">have</span> <span class="string">the</span> <span class="string">location</span> <span class="string">defined</span> <span class="string">to</span> <span class="string">display</span> <span class="string">the</span> <span class="string">cinemas</span></span><br><span class="line"></span><br><span class="line">  <span class="string">/cinemas/&#123;cinema_id&#125;:</span></span><br><span class="line">    <span class="attr">type:</span>  &#123; <span class="attr">GET:</span> &#123;<span class="attr">item :</span> <span class="string">Movies</span> &#125; &#125;</span><br><span class="line">    <span class="attr">description:</span> <span class="string">we</span> <span class="string">have</span> <span class="string">selected</span> <span class="string">the</span> <span class="string">cinema</span> <span class="string">to</span> <span class="string">display</span> <span class="string">the</span> <span class="string">movie</span> <span class="string">premieres</span></span><br><span class="line"></span><br><span class="line">    <span class="string">/cinemas/&#123;cinema_id&#125;/&#123;movie_id&#125;:</span></span><br><span class="line">      <span class="attr">type:</span>  &#123; <span class="attr">GET:</span> &#123;<span class="attr">item :</span> <span class="string">Schedules</span> &#125; &#125;</span><br><span class="line">      <span class="attr">description:</span> <span class="string">we</span> <span class="string">have</span> <span class="string">selceted</span> <span class="string">a</span> <span class="string">movie</span> <span class="string">to</span> <span class="string">display</span> <span class="string">the</span> <span class="string">schedules</span></span><br></pre></td></tr></table></figure><p>我们已经实现了上面四句话需求中的三句，第 4 条需求是在电影院订票，不过它是<strong>订票服务</strong>负责的，所以请继续关注「用 NodeJS 打造影院微服务」系列的后续文章。</p><p>现在我们可以继续开发<strong>影院目录服务</strong>了，它的结构与配置和<strong>电影服务</strong>基本一样，所以先看一下 API 的 <strong>repository.js</strong> 文件。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// more code above</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getCinemasByCity</span> = (<span class="params">cityId</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> cinemas = []</span><br><span class="line">      <span class="keyword">const</span> query = &#123;<span class="attr">city_id</span>: cityId&#125;</span><br><span class="line">      <span class="keyword">const</span> projection = &#123;<span class="attr">_id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="number">1</span>&#125;</span><br><span class="line">      <span class="comment">// example of making a find query to mongoDB, </span></span><br><span class="line">      <span class="comment">// passign a query and projection objects.</span></span><br><span class="line">      <span class="keyword">const</span> cursor = db.<span class="title function_">collection</span>(<span class="string">&#x27;cinemas&#x27;</span>).<span class="title function_">find</span>(query, projection)</span><br><span class="line">      <span class="keyword">const</span> <span class="title function_">addCinema</span> = (<span class="params">cinema</span>) =&gt; &#123;</span><br><span class="line">        cinemas.<span class="title function_">push</span>(cinema)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">const</span> <span class="title function_">sendCinemas</span> = (<span class="params">err</span>) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">          <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;An error occured fetching cinemas, err: &#x27;</span> + err))</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">resolve</span>(cinemas)</span><br><span class="line">      &#125;</span><br><span class="line">      cursor.<span class="title function_">forEach</span>(addCinema, sendCinemas)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">getCinemaById</span> = (<span class="params">cinemaId</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> query = &#123;<span class="attr">_id</span>: <span class="keyword">new</span> <span class="title class_">ObjectID</span>(cinemaId)&#125;</span><br><span class="line">      <span class="keyword">const</span> projection = &#123;<span class="attr">_id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="number">1</span>, <span class="attr">cinemaPremieres</span>: <span class="number">1</span>&#125;</span><br><span class="line">      <span class="keyword">const</span> <span class="title function_">response</span> = (<span class="params">err, cinema</span>) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">          <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;An error occuered retrieving a cinema, err: &#x27;</span> + err))</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">resolve</span>(cinema)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// example of using findOne method from mongodb, </span></span><br><span class="line">      <span class="comment">// we do this because we only need one record.</span></span><br><span class="line">      db.<span class="title function_">collection</span>(<span class="string">&#x27;cinemas&#x27;</span>).<span class="title function_">findOne</span>(query, projection, response)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">getCinemaScheduleByMovie</span> = (<span class="params">options</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> match = &#123; <span class="attr">$match</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;city_id&#x27;</span>: options.<span class="property">cityId</span>,</span><br><span class="line">        <span class="string">&#x27;cinemaRooms.schedules.movie_id&#x27;</span>: options.<span class="property">movieId</span></span><br><span class="line">      &#125;&#125;</span><br><span class="line">      <span class="keyword">const</span> project = &#123; <span class="attr">$project</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;name&#x27;</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="string">&#x27;cinemaRooms.schedules.time&#x27;</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="string">&#x27;cinemaRooms.name&#x27;</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="string">&#x27;cinemaRooms.format&#x27;</span>: <span class="number">1</span></span><br><span class="line">      &#125;&#125;</span><br><span class="line">      <span class="keyword">const</span> unwind = [&#123; <span class="attr">$unwind</span>: <span class="string">&#x27;$cinemaRooms&#x27;</span> &#125;, &#123; <span class="attr">$unwind</span>: <span class="string">&#x27;$cinemaRooms.schedules&#x27;</span> &#125;]</span><br><span class="line">      <span class="keyword">const</span> group = [&#123; <span class="attr">$group</span>: &#123;</span><br><span class="line">        <span class="attr">_id</span>: &#123;</span><br><span class="line">          <span class="attr">name</span>: <span class="string">&#x27;$name&#x27;</span>,</span><br><span class="line">          <span class="attr">room</span>: <span class="string">&#x27;$cinemaRooms.name&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">schedules</span>: &#123; <span class="attr">$addToSet</span>: <span class="string">&#x27;$cinemaRooms.schedules.time&#x27;</span> &#125;</span><br><span class="line">      &#125;&#125;, &#123; <span class="attr">$group</span>: &#123;</span><br><span class="line">        <span class="attr">_id</span>: <span class="string">&#x27;$_id.name&#x27;</span>,</span><br><span class="line">        <span class="attr">schedules</span>: &#123;</span><br><span class="line">          <span class="attr">$addToSet</span>: &#123;</span><br><span class="line">            <span class="attr">room</span>: <span class="string">&#x27;$_id.room&#x27;</span>,</span><br><span class="line">            <span class="attr">schedules</span>: <span class="string">&#x27;$schedules&#x27;</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;&#125;]</span><br><span class="line">      <span class="keyword">const</span> <span class="title function_">sendSchedules</span> = (<span class="params">err, result</span>) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">          <span class="title function_">reject</span>(<span class="string">&#x27;An error has occured fetching schedules by movie, err: &#x27;</span> + err)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">resolve</span>(result)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// example of using a aggregation method from mongoDB</span></span><br><span class="line">      <span class="comment">// we difine our pipline above, we are using also ES6 spread operator</span></span><br><span class="line">      db.<span class="title function_">collection</span>(<span class="string">&#x27;cinemas&#x27;</span>).<span class="title function_">aggregate</span>([match, project, ...unwind, ...group], sendSchedules)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>想要查看完整版 <strong>repository.js</strong> 文件，你可以去 github 仓库的 <em>step-2</em> 分支里去找。</p><p>此文件中定义了三个函数：</p><ul><li><strong>getCinemasByCity</strong>: 通过此函数我们可以获取到城市中所有可用的电影院，我们传入 city_id 参数以获取电影院信息，可用来调用下一个函数。</li><li><strong>getCinemaById</strong>: 此函数可以通过 cinema_id 查询到电影院的名称，id，以及正在上映的电影，返回结果可以帮助我们最终获取到电影的放映计划。</li><li><strong>getCinemaScheduleByMovie</strong>: 这个函数可以为我们提供城中所有影院关于某电影的放映计划。</li></ul><p>为了展示当前影院的放映计划，我们可能还需要一个函数，或者我们可以修改一下 <strong>getCinemaById</strong> 方法，如果你乐意做个小练习，这是个不错的挑战，由于我已经提供了所有需要的信息，所以这应该不会太难。</p><p>下面我们要看 API 文件 <strong>cinema-catalog.js</strong>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span></span><br><span class="line"><span class="keyword">const</span> status = <span class="built_in">require</span>(<span class="string">&#x27;http-status&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="function">(<span class="params">app, options</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123;repo&#125; = options</span><br><span class="line"></span><br><span class="line">  app.<span class="title function_">get</span>(<span class="string">&#x27;/cinemas&#x27;</span>, <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">    repo.<span class="title function_">getCinemasByCity</span>(req.<span class="property">query</span>.<span class="property">cityId</span>)</span><br><span class="line">      .<span class="title function_">then</span>(<span class="function"><span class="params">cinemas</span> =&gt;</span> &#123;</span><br><span class="line">        res.<span class="title function_">status</span>(status.<span class="property">OK</span>).<span class="title function_">json</span>(cinemas)</span><br><span class="line">      &#125;)</span><br><span class="line">      .<span class="title function_">catch</span>(next)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  app.<span class="title function_">get</span>(<span class="string">&#x27;/cinemas/:cinemaId&#x27;</span>, <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">    repo.<span class="title function_">getCinemaById</span>(req.<span class="property">params</span>.<span class="property">cinemaId</span>)</span><br><span class="line">      .<span class="title function_">then</span>(<span class="function"><span class="params">cinema</span> =&gt;</span> &#123;</span><br><span class="line">        res.<span class="title function_">status</span>(status.<span class="property">OK</span>).<span class="title function_">json</span>(cinema)</span><br><span class="line">      &#125;)</span><br><span class="line">      .<span class="title function_">catch</span>(next)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  app.<span class="title function_">get</span>(<span class="string">&#x27;/cinemas/:cityId/:movieId&#x27;</span>, <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> params = &#123;</span><br><span class="line">      <span class="attr">cityId</span>: req.<span class="property">params</span>.<span class="property">cityId</span>,</span><br><span class="line">      <span class="attr">movieId</span>: req.<span class="property">params</span>.<span class="property">movieId</span></span><br><span class="line">    &#125;</span><br><span class="line">    repo.<span class="title function_">getCinemaScheduleByMovie</span>(params)</span><br><span class="line">      .<span class="title function_">then</span>(<span class="function"><span class="params">schedules</span> =&gt;</span> &#123;</span><br><span class="line">        res.<span class="title function_">status</span>(status.<span class="property">OK</span>).<span class="title function_">json</span>(schedules)</span><br><span class="line">      &#125;)</span><br><span class="line">      .<span class="title function_">catch</span>(next)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如你所见，这里我们实现了服务的入口，和我们在 <strong>RAML</strong> 文件中定义的一样，根据路由调用 <code>repository.js</code> 中的不同方法。</p><p>在第一个路由中，我们使用 <code>req.query.cityId</code> 的值作为城市的 <code>city_id</code> 查询数据库获取到影院信息，另一个路由中，我们通过 <code>req.params</code> 得到 <code>cinemaId</code> 和 <code>movieId</code> 的值，来查询放映计划 <code>schedules</code> 😎。</p><p>最后，我们看一下 <code>cinema-catalog.spec.js</code> 这个测试文件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/* eslint-env mocha */</span></span><br><span class="line"><span class="keyword">const</span> request = <span class="built_in">require</span>(<span class="string">&#x27;supertest&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> server = <span class="built_in">require</span>(<span class="string">&#x27;../server/server&#x27;</span>)</span><br><span class="line">process.<span class="property">env</span>.<span class="property">NODE</span> = <span class="string">&#x27;test&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">describe</span>(<span class="string">&#x27;Movies API&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> app = <span class="literal">null</span></span><br><span class="line">  <span class="keyword">const</span> testCinemasCity = [&#123;</span><br><span class="line">    <span class="string">&#x27;_id&#x27;</span>: <span class="string">&#x27;588ac3a02d029a6d15d0b5c4&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Plaza Morelia&#x27;</span></span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    <span class="string">&#x27;_id&#x27;</span>: <span class="string">&#x27;588ac3a02d029a6d15d0b5c5&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Las Americas&#x27;</span></span><br><span class="line">  &#125;]</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> testCinemaId = &#123;</span><br><span class="line">    <span class="string">&#x27;_id&#x27;</span>: <span class="string">&#x27;588ac3a02d029a6d15d0b5c4&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Plaza Morelia&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;cinemaPremieres&#x27;</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;title&#x27;</span>: <span class="string">&#x27;Assasins Creed&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;runtime&#x27;</span>: <span class="number">115</span>,</span><br><span class="line">        <span class="string">&#x27;plot&#x27;</span>: <span class="string">&#x27;Lorem ipsum dolor sit amet&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;poster&#x27;</span>: <span class="string">&#x27;link to poster...&#x27;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;2&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;title&#x27;</span>: <span class="string">&#x27;Aliados&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;runtime&#x27;</span>: <span class="number">124</span>,</span><br><span class="line">        <span class="string">&#x27;plot&#x27;</span>: <span class="string">&#x27;Lorem ipsum dolor sit amet&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;poster&#x27;</span>: <span class="string">&#x27;link to poster...&#x27;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;3&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;title&#x27;</span>: <span class="string">&#x27;xXx: Reactivado&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;runtime&#x27;</span>: <span class="number">107</span>,</span><br><span class="line">        <span class="string">&#x27;plot&#x27;</span>: <span class="string">&#x27;Lorem ipsum dolor sit amet&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;poster&#x27;</span>: <span class="string">&#x27;link to poster...&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> testSchedulesMovie = [&#123;</span><br><span class="line">    <span class="string">&#x27;_id&#x27;</span>: <span class="string">&#x27;Plaza Morelia&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;schedules&#x27;</span>: [&#123;</span><br><span class="line">      <span class="string">&#x27;room&#x27;</span>: <span class="number">2.0</span>,</span><br><span class="line">      <span class="string">&#x27;schedules&#x27;</span>: [ <span class="string">&#x27;10:15&#x27;</span> ]</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">      <span class="string">&#x27;room&#x27;</span>: <span class="number">1.0</span>,</span><br><span class="line">      <span class="string">&#x27;schedules&#x27;</span>: [ <span class="string">&#x27;6:55&#x27;</span>, <span class="string">&#x27;4:35&#x27;</span>, <span class="string">&#x27;10:15&#x27;</span> ]</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">      <span class="string">&#x27;room&#x27;</span>: <span class="number">3.0</span>,</span><br><span class="line">      <span class="string">&#x27;schedules&#x27;</span>: [ <span class="string">&#x27;10:15&#x27;</span> ]</span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    <span class="string">&#x27;_id&#x27;</span>: <span class="string">&#x27;Las Americas&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;schedules&#x27;</span>: [ &#123;</span><br><span class="line">      <span class="string">&#x27;room&#x27;</span>: <span class="number">2.0</span>,</span><br><span class="line">      <span class="string">&#x27;schedules&#x27;</span>: [ <span class="string">&#x27;3:25&#x27;</span>, <span class="string">&#x27;10:15&#x27;</span> ]</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">      <span class="string">&#x27;room&#x27;</span>: <span class="number">1.0</span>,</span><br><span class="line">      <span class="string">&#x27;schedules&#x27;</span>: [ <span class="string">&#x27;12:15&#x27;</span>, <span class="string">&#x27;10:15&#x27;</span> ]</span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;]</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> testRepo = &#123;</span><br><span class="line">    <span class="title function_">getCinemasByCity</span> (location) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(location)</span><br><span class="line">      <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(testCinemasCity)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">getCinemaById</span> (cinemaId) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(cinemaId)</span><br><span class="line">      <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(testCinemaId)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">getCinemaScheduleByMovie</span> (cinemaId, movieId) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(cinemaId, movieId)</span><br><span class="line">      <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(testSchedulesMovie)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">beforeEach</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> server.<span class="title function_">start</span>(&#123;</span><br><span class="line">      <span class="attr">port</span>: <span class="number">3000</span>,</span><br><span class="line">      <span class="attr">repo</span>: testRepo</span><br><span class="line">    &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">serv</span> =&gt;</span> &#123;</span><br><span class="line">      app = serv</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="title function_">afterEach</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    app.<span class="title function_">close</span>()</span><br><span class="line">    app = <span class="literal">null</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="title function_">it</span>(<span class="string">&#x27;can return cinemas by location&#x27;</span>, <span class="function">(<span class="params">done</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> location = &#123;</span><br><span class="line">      <span class="attr">city</span>: <span class="string">&#x27;588ababf2d029a6d15d0b5bf&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">request</span>(app)</span><br><span class="line">      .<span class="title function_">get</span>(<span class="string">`/cinemas?cityId=<span class="subst">$&#123;location.city&#125;</span>`</span>)</span><br><span class="line">      .<span class="title function_">expect</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">        res.<span class="property">body</span>.<span class="property">should</span>.<span class="title function_">containEql</span>(testCinemasCity[<span class="number">0</span>])</span><br><span class="line">        res.<span class="property">body</span>.<span class="property">should</span>.<span class="title function_">containEql</span>(testCinemasCity[<span class="number">1</span>])</span><br><span class="line">      &#125;)</span><br><span class="line">      .<span class="title function_">expect</span>(<span class="number">200</span>, done)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="title function_">it</span>(<span class="string">&#x27;can get movie premiers by cinema&#x27;</span>, <span class="function">(<span class="params">done</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">request</span>(app)</span><br><span class="line">    .<span class="title function_">get</span>(<span class="string">&#x27;/cinemas/588ac3a02d029a6d15d0b5c4&#x27;</span>)</span><br><span class="line">    .<span class="title function_">expect</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">      res.<span class="property">body</span>.<span class="property">should</span>.<span class="title function_">containEql</span>(testCinemaId)</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">expect</span>(<span class="number">200</span>, done)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="title function_">it</span>(<span class="string">&#x27;can get schedules by cinema and movie&#x27;</span>, <span class="function">(<span class="params">done</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">request</span>(app)</span><br><span class="line">      .<span class="title function_">get</span>(<span class="string">&#x27;/cinemas/588ababf2d029a6d15d0b5bf/1&#x27;</span>)</span><br><span class="line">      .<span class="title function_">expect</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">        res.<span class="property">body</span>.<span class="property">should</span>.<span class="title function_">containEql</span>(testSchedulesMovie[<span class="number">0</span>])</span><br><span class="line">        res.<span class="property">body</span>.<span class="property">should</span>.<span class="title function_">containEql</span>(testSchedulesMovie[<span class="number">1</span>])</span><br><span class="line">      &#125;)</span><br><span class="line">      .<span class="title function_">expect</span>(<span class="number">200</span>, done)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>最终我们可以构建一个 <code>cinema-catalog-service</code> 的 docker 镜像，并使其在容器中运行。我们将使用和 <strong>movies service</strong> 一样的 <code>dockerfile</code> ，为了使操作过程更加自动化一些，我们创建了一个 bash 脚本 <code>start-service.sh</code> 如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env bash</span></span><br><span class="line"><span class="built_in">eval</span> `docker-machine <span class="built_in">env</span> manager1`</span><br><span class="line">docker build -t catalog-service .</span><br><span class="line">docker run --name catalog-service -p 3000:3000 --env-file <span class="built_in">env</span> -d catalog-service</span><br></pre></td></tr></table></figure><p>由于我们的服务会不断增加，所以需要注意可供服务使用的端口，这次我们使用 3000 端口，另外我会使用一个<strong>环境文件</strong>使我们的 <strong>NodeJS</strong> 服务开始使用 <strong>process.env</strong> 配置，我们的环境文件看起来如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">DB=cinemas</span><br><span class="line">DB_USER=cristian</span><br><span class="line">DB_PASS=cristianPassword2017</span><br><span class="line">DB_REPLS=rs1</span><br><span class="line">DB_SERVERS=&#x27;192.168.99.100:27017 192.168.99.101:27017 192.168.99.102:27017&#x27;</span><br><span class="line">PORT=3000</span><br></pre></td></tr></table></figure><p>在 devOps 的世界中，这被认为是最好的做法。</p><p>最后只要执行我们的 bash 小脚本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">execute our script</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">bash &lt; start-service.sh</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">check running docker contianers</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker ps</span></span><br></pre></td></tr></table></figure><p>应该可以看到类似下图的情况：</p><p><img src="https://img.zvz.im/imgs/2019/06/9306e91bf244845c.png" alt=""></p><p>我们还可以在 chrome 浏览器中测一下我们的服务，验证 <strong>HTTP/2</strong> 协议能正常工作，而且服务也是正常运行的。</p><p><img src="https://img.zvz.im/imgs/2019/06/80065700ac28226e.png" alt=""></p><p>我们还可以找点乐子，使用 <strong>JMeter</strong> 进行压力测试，压测文件也在 github 仓库中的 <strong>integration-test/</strong> 目录下。</p><p><img src="https://img.zvz.im/imgs/2019/06/15b430ee5d0b7082.png" alt=""></p><p><img src="https://img.zvz.im/imgs/2019/06/89fcb6d89df7cf8a.gif" alt=""></p><h2 id="总结时间"><a href="#总结时间" class="headerlink" title="# 总结时间"></a># 总结时间</h2><p>我们都做了什么。。。</p><p><img src="https://img.zvz.im/imgs/2019/06/f142eea98b22201f.png" alt=""></p><p>我们已经完成了图中的这些微服务，你可能会说在<strong>影院目录服务</strong>中我们还没有调用<strong>电影服务</strong>。的确如此，我们至此只实现了服务的 <strong>GET</strong> 请求处理。而在<strong>影院目录服务</strong>中调用<strong>电影服务</strong>时使用 <strong>POST</strong> 请求，是为了给影院输入上映的电影，以便制作放映计划，由于我们本次的任务只是 <strong>CRUD</strong> 操作中的 <strong>R</strong> 读操作，所以我们还没有看到这个交互。不过在本系列的后续文章中，我们会在微服务中实现更多的 CRUD 操作，请保持耐心和好奇心 :D 。</p><p>那么本章中我们做了什么 ¿ 🤔 ?，我们学习了 <strong>HTTP/2</strong> 协议并且在<strong>微服务</strong>中实现了它。我们还看到了如何<strong>设计一个 MongoDB 模型</strong>，虽然并不深入但是我突出了这个部分，并详细描绘了<strong>影院目录服务</strong>设计中发生了什么，然后我们用 <strong>RAML</strong> 设计了 API 接口，接着实现 API 服务，之后做了相应的<strong>单元测试</strong>，最后我们把这些都组装起来完成了微服务。</p><p>其次我们使用了与之前的<strong>微服务</strong>一样的 <strong>dockerfile</strong>，并构建了一个脚本来自动化此过程，我们还介绍了如何使用环境文件，并且在 <strong>Docker</strong> 容器中使用 <code>environment variables</code>，在完成这些之后，作为<strong>集成测试</strong>的补充，我还向你们展示了如何使用 JMeter 进行<strong>压力测试</strong>。</p><p>虽然我们可能见过许多 <strong>NodeJS</strong> 开发的项目，不过仍然还有许多东西值得我们去学习和实践。本文只是一个小小的展示，我希望它展示出了一些有趣而有用的东西，使你在工作中能够运用 <strong>Docker 和 NodeJS</strong> 的相关技术。</p><p>翻译自：<a href="https://medium.com/@cramirez92/build-a-nodejs-cinema-microservice-and-deploying-it-with-docker-part-2-e05cc7b126e0">Build a NodeJS cinema microservice and deploying it with docker (part 2)</a></p><p><a href="https://log.zvz.im/2017/05/24/nodejs-cinema-microservice-part1/">系列文章 - Part 1</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文是「使用 NodeJS 构建影院微服务」系列的第二篇文章。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;第一章快速回顾&quot;&gt;&lt;a href=&quot;#第一章快速回顾&quot; class=&quot;headerlink&quot; title=&quot;## 第一章快速回顾&quot;&gt;&lt;/a&gt;## 第一章快速回顾&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;我们讲了&lt;strong&gt;什么是微服务&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;我们对比了&lt;strong&gt;微服务&lt;/strong&gt;的&lt;strong&gt;利&lt;/strong&gt;与&lt;strong&gt;弊&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;我们设计了一个&lt;strong&gt;影院微服务的架构&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;我们使用 &lt;strong&gt;RAML&lt;/strong&gt; 定义了&lt;strong&gt;电影服务 API&lt;/strong&gt; 的技术规格&lt;/li&gt;
&lt;li&gt;我们使用 &lt;strong&gt;NodeJS 和 ExpressJS&lt;/strong&gt; 开发了 &lt;strong&gt;电影服务 API&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;我们针对 API 做了&lt;strong&gt;单元测试&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;我们将 API 组成一个服务，并使我们的&lt;strong&gt;电影服务&lt;/strong&gt;运行在 &lt;strong&gt;Docker&lt;/strong&gt; 容器中&lt;/li&gt;
&lt;li&gt;我们对运行在 &lt;strong&gt;Docker&lt;/strong&gt; 中的&lt;strong&gt;电影服务&lt;/strong&gt;做了&lt;strong&gt;集成测试&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果你还没有阅读过第一篇文章，你可以&lt;a href=&quot;https://log.zvz.im/2017/05/24/nodejs-cinema-microservice-part1/&quot;&gt;去这里看看&lt;/a&gt;👀。&lt;/p&gt;
&lt;p&gt;在本篇中我们将继续构建我们的&lt;strong&gt;影院微服务&lt;/strong&gt;，这次我们将进行&lt;strong&gt;影院目录服务&lt;/strong&gt;的开发，以完成下图中的功能。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img.zvz.im/imgs/2019/06/f142eea98b22201f.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="Nodejs" scheme="http://log.zvz.im/tags/Nodejs/"/>
    
  </entry>
  
  <entry>
    <title>用 NodeJS 打造影院微服务并部署到 docker 上 — Part 1</title>
    <link href="http://log.zvz.im/2017/05/24/nodejs-cinema-microservice-part1/"/>
    <id>http://log.zvz.im/2017/05/24/nodejs-cinema-microservice-part1/</id>
    <published>2017-05-24T21:58:41.000Z</published>
    <updated>2025-07-03T18:06:35.827Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img.zvz.im/imgs/2019/06/1212f2b3d00c4c80.png" alt=""></p><p>本文是「使用 NodeJS 构建影院微服务」系列的第一篇。此系列将会讲述了如何构建<strong>NodeJS 微服务</strong>并将它们部署到<strong>Docker Swarm 集群</strong>上。</p><p>本文将向你展示，如何构建<strong>微服务</strong>，以及如何将其部署到<strong>Docker</strong>容器中。我们会完成一个简单的 NodeJS 服务，并以 MongoDB 作为后端存储。</p><p>本文将使用到以下技术：</p><ul><li>NodeJS 7.2.0 版本</li><li>MongoDB 3.4.1</li><li>Docker for Mac 1.12.6</li></ul><p>为了理解文中内容，你最好了解以下知识：</p><ul><li>NodeJS 的基础知识</li><li>Docker 的基础知识（并且已安装了 docker）</li><li>MongoDB 的基础知识（并且有可运行的数据库服务）</li></ul><p>我强烈建议大家参考我以前的文章<a href="https://medium.com/@cramirez92/how-to-deploy-a-mongodb-replica-set-using-docker-6d0b9ac00e49">「如何在 Docker 上部署 mongoDB 集群」</a>，部署好数据库服务并将其运行起来。<br><span id="more"></span></p><h2 id="什么是微服务"><a href="#什么是微服务" class="headerlink" title="# 什么是微服务"></a># 什么是微服务</h2><blockquote><p>微服务是一个独立可用的单元，它可以与其它微服务一起，构成一个大的应用系统。通过将一个应用划分为更小的单元，可使得这些小的单元更加独立、易于部署、且易于扩展，而且这些小单元可以由不同团队的开发，使用不同语言进行开发，并且单独进行测试。—— <a href="https://medium.com/@cramirez92/how-to-deploy-a-mongodb-replica-set-using-docker-6d0b9ac00e49">Max Stoiber</a></p><p>微服务架构意味着你的系统由许多小的、独立的应用组成。它们运行在自己的内存空间中，而且独立部署，能够扩展部署到多台机器上。—— <a href="https://medium.com/javascript-scene/10-interview-questions-every-javascript-developer-should-know-6fa6bdf5ad95#.gl46xectt">Eric Elliot</a></p></blockquote><h3 id="微服务的优点"><a href="#微服务的优点" class="headerlink" title="微服务的优点"></a>微服务的优点</h3><ul><li>应用启动更快，开发效率更高，部署也更加快速。</li><li>每个服务可以独立于其它服务进行部署——这样更容易部署新版本</li><li>更容易组织大规模开发，而且有性能优势。</li><li>可以避免与技术栈长期捆绑。当开发新服务时，你可以选用新的技术栈。</li><li>微服务一般都有更好的组织结构，因为每个微服务都有特定的使命，且与其它服务无关。</li><li>无耦合的服务更容易重新组合配置，可以服务于不同的应用系统（比如，同时服务于 web 客户端以及公共 API）。</li></ul><h3 id="微服务的缺点"><a href="#微服务的缺点" class="headerlink" title="微服务的缺点"></a>微服务的缺点</h3><ul><li>开发者必须处理分布式系统带来的额外复杂性。</li><li>部署更加复杂。在生产环境中，部署并管理一个由许多不同服务组成的系统，操作起来更复杂。</li><li>在你构建微服务架构的过程中，可能会发现许多在设计初期未能预料到的功能点被切割分散到了各处。</li></ul><h2 id="如何用-NodeJS-构建微服务"><a href="#如何用-NodeJS-构建微服务" class="headerlink" title="# 如何用 NodeJS 构建微服务"></a># 如何用 NodeJS 构建微服务</h2><p><strong>微服务</strong>可以利用许多<strong>简单，目的单一，易于使用的</strong>组件构建应用，使得软件质量更好，迭代速度更快。甚至已有的整体架构系统也可以采用<a href="https://blog.risingstack.com/why-you-should-start-using-microservices/">微服务模式</a>进行转换，不过我们的问题是如何用 <strong>NodeJS</strong> 来构建一个微服务？</p><p>Javascript 是当前最流行编程语言，拥有丰富的开源模块生态系统。 对于一个微服务来说，我们想要构建一套 <strong>API</strong>，我应该用哪些模块，库，或者框架呢？我在 Quora 上搜索到了一个类似的问题：<a href="https://www.quora.com/Which-Node-js-framework-is-better-for-building-a-RESTful-api">构建 RESTful api 应该使用哪个 Node.js 框架？</a></p><p>问题的答案中有一位用户给出了一条非常有用的答案，他提供了一个 NB 的<a href="http://nodeframework.com/">网站</a>，里面展示了我们可以用来构建 API 的所有框架和库，这样你就可以自己做选择了。本文中我们将使用 <strong>ExpressJS</strong> 来构建我们的 API 和微服务。</p><p>现在我们不再空谈，开始动手编码，学习如何解决这个实际问题吧 👨🏻‍💻👨🏼‍🎨🖥。</p><h2 id="我们的微服务架构"><a href="#我们的微服务架构" class="headerlink" title="# 我们的微服务架构"></a># 我们的微服务架构</h2><p><img src="https://img.zvz.im/imgs/2019/06/3a80c5deba7da702.png" alt=""></p><p>假设我们在 <strong>Cinépolis</strong>（一个墨西哥电影院）的 IT 部门工作。他们派给我们一个任务，让我们重构票务和零售店系统，将原有的一体化系统改为微服务架构。</p><p>作为「使用 NodeJS 构建影院微服务」系列的第一部分，我们将关注点放在<strong>电影目录服务(movies catalog service)</strong>上。</p><p>在架构图中，我们可以看到有三种不同的设备使用到微服务。POS（售卖点），手机/平板，以及电脑。POS 和手机/平板有单独的应用（用 electron 开发），并且直接访问微服务。而电脑端则通过网页应用访问微服务。</p><h2 id="构建微服务"><a href="#构建微服务" class="headerlink" title="# 构建微服务"></a># 构建微服务</h2><p>现在假设我们想在自己喜欢的电影院中去看某电影的首映。</p><p>首先，我们需要查看此影院中当前有哪些电影上映。下面这种图展示了微服务中是如何使用 REST 方式进行信息交流的。</p><p><img src="https://img.zvz.im/imgs/2019/06/f142eea98b22201f.png" alt=""></p><p>我们的<strong>电影服务（movies service）</strong> API 规格定义如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">#%RAML 1.0</span><br><span class="line">title: cinema</span><br><span class="line">version: v1</span><br><span class="line">baseUri: /</span><br><span class="line"></span><br><span class="line">types:</span><br><span class="line">  Movie:</span><br><span class="line">    properties:</span><br><span class="line">      id: string</span><br><span class="line">      title: string</span><br><span class="line">      runtime: number</span><br><span class="line">      format: string</span><br><span class="line">      plot: string</span><br><span class="line">      releaseYear: number</span><br><span class="line">      releaseMonth: number</span><br><span class="line">      releaseDay: number</span><br><span class="line">    example:</span><br><span class="line">      id: &quot;123&quot;</span><br><span class="line">      title: &quot;Assasins Creed&quot;</span><br><span class="line">      runtime: 115</span><br><span class="line">      format: &quot;IMAX&quot;</span><br><span class="line">      plot: &quot;Lorem ipsum dolor sit amet&quot;</span><br><span class="line">      releaseYear : 2017</span><br><span class="line">      releaseMonth: 1</span><br><span class="line">      releaseDay: 6</span><br><span class="line"></span><br><span class="line">  MoviePremieres:</span><br><span class="line">    type: Movie []</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">resourceTypes:</span><br><span class="line">  Collection:</span><br><span class="line">    get:</span><br><span class="line">      responses:</span><br><span class="line">        200:</span><br><span class="line">          body:</span><br><span class="line">            application/json:</span><br><span class="line">              type: &lt;&lt;item&gt;&gt;</span><br><span class="line"></span><br><span class="line">/movies:</span><br><span class="line">  /premieres:</span><br><span class="line">    type:  &#123; Collection: &#123;item : MoviePremieres &#125; &#125;</span><br><span class="line"></span><br><span class="line">  /&#123;id&#125;:</span><br><span class="line">    type:  &#123; Collection: &#123;item : Movie &#125; &#125;</span><br></pre></td></tr></table></figure><blockquote><p> 如果你不知道 <strong>RAML</strong> 是什么，这儿有一篇很好的<a href="http://apiworkbench.com/docs/">入门介绍</a>。</p></blockquote><p>此 API 项目的目录结构如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="string">api/</span>                  <span class="comment"># our apis</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">config/</span>               <span class="comment"># config for the app</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">mock/</span>                 <span class="comment"># not necessary just for data examples</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">repository/</span>           <span class="comment"># abstraction over our db</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">server/</span>               <span class="comment"># server setup code</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">package.json</span>          <span class="comment"># dependencies</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">index.js</span>              <span class="comment"># main entrypoint of the app</span></span><br></pre></td></tr></table></figure><p>让我们开始编码。首先看一下这个 <code>repository</code> 。这是我们进行数据库查询的地方。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// repository.js</span></span><br><span class="line"><span class="meta">&#x27;use strict&#x27;</span></span><br><span class="line"><span class="comment">// factory function, that holds an open connection to the db,</span></span><br><span class="line"><span class="comment">// and exposes some functions for accessing the data.</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">repository</span> = (<span class="params">db</span>) =&gt; &#123;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// since this is the movies-service, we already know</span></span><br><span class="line">  <span class="comment">// that we are going to query the `movies` collection</span></span><br><span class="line">  <span class="comment">// in all of our functions.</span></span><br><span class="line">  <span class="keyword">const</span> collection = db.<span class="title function_">collection</span>(<span class="string">&#x27;movies&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">getMoviePremiers</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> movies = []</span><br><span class="line">      <span class="keyword">const</span> currentDay = <span class="keyword">new</span> <span class="title class_">Date</span>()</span><br><span class="line">      <span class="keyword">const</span> query = &#123;</span><br><span class="line">        <span class="attr">releaseYear</span>: &#123;</span><br><span class="line">          <span class="attr">$gt</span>: currentDay.<span class="title function_">getFullYear</span>() - <span class="number">1</span>,</span><br><span class="line">          <span class="attr">$lte</span>: currentDay.<span class="title function_">getFullYear</span>()</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">releaseMonth</span>: &#123;</span><br><span class="line">          <span class="attr">$gte</span>: currentDay.<span class="title function_">getMonth</span>() + <span class="number">1</span>,</span><br><span class="line">          <span class="attr">$lte</span>: currentDay.<span class="title function_">getMonth</span>() + <span class="number">2</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">releaseDay</span>: &#123;</span><br><span class="line">          <span class="attr">$lte</span>: currentDay.<span class="title function_">getDate</span>()</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">const</span> cursor = collection.<span class="title function_">find</span>(query)</span><br><span class="line">      <span class="keyword">const</span> <span class="title function_">addMovie</span> = (<span class="params">movie</span>) =&gt; &#123;</span><br><span class="line">        movies.<span class="title function_">push</span>(movie)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">const</span> <span class="title function_">sendMovies</span> = (<span class="params">err</span>) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">          <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;An error occured fetching all movies, err:&#x27;</span> + err))</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">resolve</span>(movies)</span><br><span class="line">      &#125;</span><br><span class="line">      cursor.<span class="title function_">forEach</span>(addMovie, sendMovies)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">getMovieById</span> = (<span class="params">id</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> projection = &#123; <span class="attr">_id</span>: <span class="number">0</span>, <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">title</span>: <span class="number">1</span>, <span class="attr">format</span>: <span class="number">1</span> &#125;</span><br><span class="line">      <span class="keyword">const</span> <span class="title function_">sendMovie</span> = (<span class="params">err, movie</span>) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">          <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">`An error occured fetching a movie with id: <span class="subst">$&#123;id&#125;</span>, err: <span class="subst">$&#123;err&#125;</span>`</span>))</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">resolve</span>(movie)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// fetch a movie by id -- mongodb syntax</span></span><br><span class="line">      collection.<span class="title function_">findOne</span>(&#123;<span class="attr">id</span>: id&#125;, projection, sendMovie)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// this will close the database connection</span></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">disconnect</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    db.<span class="title function_">close</span>()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="title function_">create</span>(&#123;</span><br><span class="line">    getAllMovies,</span><br><span class="line">    getMoviePremiers,</span><br><span class="line">    getMovieById,</span><br><span class="line">    disconnect</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">connect</span> = (<span class="params">connection</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!connection) &#123;</span><br><span class="line">      <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;connection db not supplied!&#x27;</span>))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="title function_">repository</span>(connection))</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// this only exports a connected repo</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;, &#123;connect&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// movie-service-repo.js</span></span><br></pre></td></tr></table></figure><p>你可能注意到了，我们向唯一暴露的 <strong>connect</strong>(connection) 方法传入了一个 <code>connection</code> 对象，这儿你可以看到 javascript 最强大之处的<strong>“闭包”</strong>，这个仓库对象返回了一个闭包，其中所有的方法都能访问到 <code>db</code> 和 <code>collection</code> 对象， <code>db</code>  对象保持着数据库连接。这里我们对所连接数据库的类型进行了抽象，repository 对象并不知道使用的是哪一种数据库，本文中我们使用的是 <strong>MongoDB</strong>，它也不知道连接的数据库是单例还是集群，不过只要我们使用 mongodb 的语法，我们就能使用 repository 中的方法，我们还可以使用 <a href="https://medium.com/@cramirez92/s-o-l-i-d-the-first-5-priciples-of-object-oriented-design-with-javascript-790f6ac9b9fa#.ubs2g1ozf">solid principles</a> 中的<em>依赖反转方式</em>，将 mongo 语法拆分到另一个文件中，而只调用数据库操作接口（比如使用 mongoose 模型）。</p><p>我们还有一个 <code>repository/repository.spec.js</code> 文件用于测试这个模块，以后我将会讲到测试的部分，你可以在 <a href="https://github.com/Crizstian/cinema-microservice">github 仓库的 step-1 分支</a>中找到它。</p><p>接下来我们看一下 <code>server.js</code> 文件。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> morgan = <span class="built_in">require</span>(<span class="string">&#x27;morgan&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> helmet = <span class="built_in">require</span>(<span class="string">&#x27;helmet&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> movieAPI = <span class="built_in">require</span>(<span class="string">&#x27;../api/movies&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">start</span> = (<span class="params">options</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// we need to verify if we have a repository added and a server port</span></span><br><span class="line">    <span class="keyword">if</span> (!options.<span class="property">repo</span>) &#123;</span><br><span class="line">      <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;The server must be started with a connected repository&#x27;</span>))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!options.<span class="property">port</span>) &#123;</span><br><span class="line">      <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;The server must be started with an available port&#x27;</span>))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// let&#x27;s init a express app, and add some middlewares</span></span><br><span class="line">    <span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line">    app.<span class="title function_">use</span>(<span class="title function_">morgan</span>(<span class="string">&#x27;dev&#x27;</span>))</span><br><span class="line">    app.<span class="title function_">use</span>(<span class="title function_">helmet</span>())</span><br><span class="line">    app.<span class="title function_">use</span>(<span class="function">(<span class="params">err, req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Something went wrong!, err:&#x27;</span> + err))</span><br><span class="line">      res.<span class="title function_">status</span>(<span class="number">500</span>).<span class="title function_">send</span>(<span class="string">&#x27;Something went wrong!&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// we add our API&#x27;s to the express app</span></span><br><span class="line">    <span class="title function_">movieAPI</span>(app, options)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// finally we start the server, and return the newly created server </span></span><br><span class="line">    <span class="keyword">const</span> server = app.<span class="title function_">listen</span>(options.<span class="property">port</span>, <span class="function">() =&gt;</span> <span class="title function_">resolve</span>(server))</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;, &#123;start&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// movie-service-server.js</span></span><br></pre></td></tr></table></figure><p>这里我们实例化了一个新的 express 应用，验证我们是否提供了仓库对象以及和服务端口参数，然后使用了一些中间件，比如用于日志的 <code>morgan</code> ，用于安全的 <code>helmet</code> ，以及一个 <code>错误处理</code> 函数，最后对外提供了一个 start 方法，用于启动服务😎。</p><blockquote><p>Helmet 包括了多达 11 个模块全部是用于阻止针对用户的恶意攻击。</p></blockquote><p>如果你想加强你的微服务的安全性，你可以看一下<a href="https://nodesource.com/blog/nine-security-tips-to-keep-express-from-getting-pwned/?utm_source=nodeweekly&amp;utm_medium=email">这篇文章</a>。</p><p>既然我们的 server 要使用到 movieAPI，那就让我们继续看一下 <code>movies.js</code> 。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span></span><br><span class="line"><span class="keyword">const</span> status = <span class="built_in">require</span>(<span class="string">&#x27;http-status&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="function">(<span class="params">app, options</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123;repo&#125; = options</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// here we get all the movies </span></span><br><span class="line">  app.<span class="title function_">get</span>(<span class="string">&#x27;/movies&#x27;</span>, <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">    repo.<span class="title function_">getAllMovies</span>().<span class="title function_">then</span>(<span class="function"><span class="params">movies</span> =&gt;</span> &#123;</span><br><span class="line">      res.<span class="title function_">status</span>(status.<span class="property">OK</span>).<span class="title function_">json</span>(movies)</span><br><span class="line">    &#125;).<span class="title function_">catch</span>(next)</span><br><span class="line">  &#125;)</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// here we retrieve only the premieres</span></span><br><span class="line">  app.<span class="title function_">get</span>(<span class="string">&#x27;/movies/premieres&#x27;</span>, <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">    repo.<span class="title function_">getMoviePremiers</span>().<span class="title function_">then</span>(<span class="function"><span class="params">movies</span> =&gt;</span> &#123;</span><br><span class="line">      res.<span class="title function_">status</span>(status.<span class="property">OK</span>).<span class="title function_">json</span>(movies)</span><br><span class="line">    &#125;).<span class="title function_">catch</span>(next)</span><br><span class="line">  &#125;)</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// here we get a movie by id</span></span><br><span class="line">  app.<span class="title function_">get</span>(<span class="string">&#x27;/movies/:id&#x27;</span>, <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">    repo.<span class="title function_">getMovieById</span>(req.<span class="property">params</span>.<span class="property">id</span>).<span class="title function_">then</span>(<span class="function"><span class="params">movie</span> =&gt;</span> &#123;</span><br><span class="line">      res.<span class="title function_">status</span>(status.<span class="property">OK</span>).<span class="title function_">json</span>(movie)</span><br><span class="line">    &#125;).<span class="title function_">catch</span>(next)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// movies-service-movies.js</span></span><br></pre></td></tr></table></figure><p>这里我们为 API 定义了路由，并根据路由调用仓库对象的不同方法。你可以注意到，这里是直接调用仓库对象的接口的，我们在实践着著名的「面向接口编程，而不是面向实现编程」箴言（coding for an interface not to an implementation），因为 express 路由并不知道数据库对象的存在，也不知道数据库查询的逻辑等等，它只是调用了仓库对象的方法用于处理所有的数据库相关业务。</p><p>我们所有的代码都有对应的单元测试，让我们看一下 <code>movies.js</code> 的测试代码。</p><blockquote><p>你可以将测试代码当作你所构建应用的保护措施。它们不仅在你的本地机器上执行，还会在持续集成服务中执行，以保证失败的构建不会被推送到生成环境中。—— <a href="https://medium.com/@RisingStack">Trace by RisingStack</a></p></blockquote><p>为了写单元测试，所有的依赖项都必须进行伪造，也就是说我们为要测试的模块提供伪造的依赖项。现在看下我们的 <code>标准测试文件</code> 长什么样子。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* eslint-env mocha */</span></span><br><span class="line"><span class="keyword">const</span> request = <span class="built_in">require</span>(<span class="string">&#x27;supertest&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> server = <span class="built_in">require</span>(<span class="string">&#x27;../server/server&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="title function_">describe</span>(<span class="string">&#x27;Movies API&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> app = <span class="literal">null</span></span><br><span class="line">  <span class="keyword">let</span> testMovies = [&#123;</span><br><span class="line">    <span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;3&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;title&#x27;</span>: <span class="string">&#x27;xXx: Reactivado&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;format&#x27;</span>: <span class="string">&#x27;IMAX&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;releaseYear&#x27;</span>: <span class="number">2017</span>,</span><br><span class="line">    <span class="string">&#x27;releaseMonth&#x27;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">&#x27;releaseDay&#x27;</span>: <span class="number">20</span></span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    <span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;4&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;title&#x27;</span>: <span class="string">&#x27;Resident Evil: Capitulo Final&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;format&#x27;</span>: <span class="string">&#x27;IMAX&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;releaseYear&#x27;</span>: <span class="number">2017</span>,</span><br><span class="line">    <span class="string">&#x27;releaseMonth&#x27;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">&#x27;releaseDay&#x27;</span>: <span class="number">27</span></span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    <span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;title&#x27;</span>: <span class="string">&#x27;Assasins Creed&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;format&#x27;</span>: <span class="string">&#x27;IMAX&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;releaseYear&#x27;</span>: <span class="number">2017</span>,</span><br><span class="line">    <span class="string">&#x27;releaseMonth&#x27;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">&#x27;releaseDay&#x27;</span>: <span class="number">6</span></span><br><span class="line">  &#125;]</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> testRepo = &#123;</span><br><span class="line">    <span class="title function_">getAllMovies</span> () &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(testMovies)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">getMoviePremiers</span> () &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(testMovies.<span class="title function_">filter</span>(<span class="function"><span class="params">movie</span> =&gt;</span> movie.<span class="property">releaseYear</span> === <span class="number">2017</span>))</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">getMovieById</span> (id) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(testMovies.<span class="title function_">find</span>(<span class="function"><span class="params">movie</span> =&gt;</span> movie.<span class="property">id</span> === id))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">beforeEach</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> server.<span class="title function_">start</span>(&#123;</span><br><span class="line">      <span class="attr">port</span>: <span class="number">3000</span>,</span><br><span class="line">      <span class="attr">repo</span>: testRepo</span><br><span class="line">    &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">serv</span> =&gt;</span> &#123;</span><br><span class="line">      app = serv</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="title function_">afterEach</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    app.<span class="title function_">close</span>()</span><br><span class="line">    app = <span class="literal">null</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="title function_">it</span>(<span class="string">&#x27;can return all movies&#x27;</span>, <span class="function">(<span class="params">done</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">request</span>(app)</span><br><span class="line">      .<span class="title function_">get</span>(<span class="string">&#x27;/movies&#x27;</span>)</span><br><span class="line">      .<span class="title function_">expect</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">        res.<span class="property">body</span>.<span class="property">should</span>.<span class="title function_">containEql</span>(&#123;</span><br><span class="line">          <span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;title&#x27;</span>: <span class="string">&#x27;Assasins Creed&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;format&#x27;</span>: <span class="string">&#x27;IMAX&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;releaseYear&#x27;</span>: <span class="number">2017</span>,</span><br><span class="line">          <span class="string">&#x27;releaseMonth&#x27;</span>: <span class="number">1</span>,</span><br><span class="line">          <span class="string">&#x27;releaseDay&#x27;</span>: <span class="number">6</span></span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">      .<span class="title function_">expect</span>(<span class="number">200</span>, done)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="title function_">it</span>(<span class="string">&#x27;can get movie premiers&#x27;</span>, <span class="function">(<span class="params">done</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">request</span>(app)</span><br><span class="line">    .<span class="title function_">get</span>(<span class="string">&#x27;/movies/premiers&#x27;</span>)</span><br><span class="line">    .<span class="title function_">expect</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">      res.<span class="property">body</span>.<span class="property">should</span>.<span class="title function_">containEql</span>(&#123;</span><br><span class="line">        <span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;title&#x27;</span>: <span class="string">&#x27;Assasins Creed&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;format&#x27;</span>: <span class="string">&#x27;IMAX&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;releaseYear&#x27;</span>: <span class="number">2017</span>,</span><br><span class="line">        <span class="string">&#x27;releaseMonth&#x27;</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="string">&#x27;releaseDay&#x27;</span>: <span class="number">6</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">expect</span>(<span class="number">200</span>, done)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="title function_">it</span>(<span class="string">&#x27;returns 200 for an known movie&#x27;</span>, <span class="function">(<span class="params">done</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">request</span>(app)</span><br><span class="line">      .<span class="title function_">get</span>(<span class="string">&#x27;/movies/1&#x27;</span>)</span><br><span class="line">      .<span class="title function_">expect</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">        res.<span class="property">body</span>.<span class="property">should</span>.<span class="title function_">containEql</span>(&#123;</span><br><span class="line">          <span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;title&#x27;</span>: <span class="string">&#x27;Assasins Creed&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;format&#x27;</span>: <span class="string">&#x27;IMAX&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;releaseYear&#x27;</span>: <span class="number">2017</span>,</span><br><span class="line">          <span class="string">&#x27;releaseMonth&#x27;</span>: <span class="number">1</span>,</span><br><span class="line">          <span class="string">&#x27;releaseDay&#x27;</span>: <span class="number">6</span></span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">      .<span class="title function_">expect</span>(<span class="number">200</span>, done)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//movie-service-movie.spec.js</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* eslint-env mocha */</span></span><br><span class="line"><span class="keyword">const</span> server = <span class="built_in">require</span>(<span class="string">&#x27;./server&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="title function_">describe</span>(<span class="string">&#x27;Server&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">it</span>(<span class="string">&#x27;should require a port to start&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> server.<span class="title function_">start</span>(&#123;</span><br><span class="line">      <span class="attr">repo</span>: &#123;&#125;</span><br><span class="line">    &#125;).<span class="property">should</span>.<span class="property">be</span>.<span class="title function_">rejectedWith</span>(<span class="regexp">/port/</span>)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="title function_">it</span>(<span class="string">&#x27;should require a repository to start&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> server.<span class="title function_">start</span>(&#123;</span><br><span class="line">      <span class="attr">port</span>: &#123;&#125;</span><br><span class="line">    &#125;).<span class="property">should</span>.<span class="property">be</span>.<span class="title function_">rejectedWith</span>(<span class="regexp">/repository/</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// movie-service-server.spec.js</span></span><br></pre></td></tr></table></figure><p>如你所见，我们伪造了 <code>movies API</code> 的依赖项，我们验证了 server 对象需要服务端口和仓库对象。</p><p>你可在文本的 github 仓库中找到所有的测试文件。</p><p>让我们接下来看如何创建<strong>仓库模块</strong>中的 <code>数据库连接对象（db connection object）</code> ，在我们的规划中每个微服务都有自己的数据库，但是只会使用一个 <strong>mongoDB 集群服务</strong>，只是每个微服务都会使用自己的库。</p><p>下面是我们使用 <strong>NodeJS</strong> 连接 <strong>MongoDB</strong> 的数据库配置。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">MongoClient</span> = <span class="built_in">require</span>(<span class="string">&#x27;mongodb&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// here we create the url connection string that the driver needs</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getMongoURL</span> = (<span class="params">options</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> url = options.<span class="property">servers</span></span><br><span class="line">    .<span class="title function_">reduce</span>(<span class="function">(<span class="params">prev, cur</span>) =&gt;</span> prev + <span class="string">`<span class="subst">$&#123;cur.ip&#125;</span>:<span class="subst">$&#123;cur.port&#125;</span>,`</span>, <span class="string">&#x27;mongodb://&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;url.substr(<span class="number">0</span>, url.length - <span class="number">1</span>)&#125;</span>/<span class="subst">$&#123;options.db&#125;</span>`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// mongoDB function to connect, open and authenticate</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">connect</span> = (<span class="params">options, mediator</span>) =&gt; &#123;</span><br><span class="line">  mediator.<span class="title function_">once</span>(<span class="string">&#x27;boot.ready&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title class_">MongoClient</span>.<span class="title function_">connect</span>( <span class="title function_">getMongoURL</span>(options), &#123;</span><br><span class="line">        <span class="attr">db</span>: options.<span class="title function_">dbParameters</span>(),</span><br><span class="line">        <span class="attr">server</span>: options.<span class="title function_">serverParameters</span>(),</span><br><span class="line">        <span class="attr">replset</span>: options.<span class="title function_">replsetParameters</span>(options.<span class="property">repl</span>)</span><br><span class="line">      &#125;, <span class="function">(<span class="params">err, db</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">          mediator.<span class="title function_">emit</span>(<span class="string">&#x27;db.error&#x27;</span>, err)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        db.<span class="title function_">admin</span>().<span class="title function_">authenticate</span>(options.<span class="property">user</span>, options.<span class="property">pass</span>, <span class="function">(<span class="params">err, result</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            mediator.<span class="title function_">emit</span>(<span class="string">&#x27;db.error&#x27;</span>, err)</span><br><span class="line">          &#125;</span><br><span class="line">          mediator.<span class="title function_">emit</span>(<span class="string">&#x27;db.ready&#x27;</span>, db)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;, &#123;connect&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// mongodb-relicaset.js</span></span><br></pre></td></tr></table></figure><p>虽然可能还有其它更好的实现方式，不过我们基本上这样就可以与 mongoDB 集群建立连接了。</p><p>如你缩减，我们传入了一个 <code>options</code> 对象，它包含所有 mongo 连接需要的参数，我们还传入了一个 <code>event - mediator</code> 对象，当我们通过数据库连接验证时，它会喷出一个 <code>db</code> 对象。</p><blockquote><p><strong>注意*</strong> 这里我之所以使用了一个 event-emitter object 是因为使用 promise 方式时，当通过连接验证后，不知道什么原因它不能返回 db 对象，流程无法走下去——所以你可以挑战一下，尝试使用 promise 方式做一个实现，看看到底出了什么问题。</p></blockquote><p>既然我们用到了 <code>options</code> 参数，那么让我们看下它来自哪里，所以下一个文件是 <code>config.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// simple configuration file</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// database parameters</span></span><br><span class="line"><span class="keyword">const</span> dbSettings = &#123;</span><br><span class="line">  <span class="attr">db</span>: process.<span class="property">env</span>.<span class="property">DB</span> || <span class="string">&#x27;movies&#x27;</span>,</span><br><span class="line">  <span class="attr">user</span>: process.<span class="property">env</span>.<span class="property">DB_USER</span> || <span class="string">&#x27;cristian&#x27;</span>,</span><br><span class="line">  <span class="attr">pass</span>: process.<span class="property">env</span>.<span class="property">DB_PASS</span> || <span class="string">&#x27;cristianPassword2017&#x27;</span>,</span><br><span class="line">  <span class="attr">repl</span>: process.<span class="property">env</span>.<span class="property">DB_REPLS</span> || <span class="string">&#x27;rs1&#x27;</span>,</span><br><span class="line">  <span class="attr">servers</span>: (process.<span class="property">env</span>.<span class="property">DB_SERVERS</span>) ? process.<span class="property">env</span>.<span class="property">DB_SERVERS</span>.<span class="title function_">split</span>(<span class="string">&#x27; &#x27;</span>) : [</span><br><span class="line">    <span class="string">&#x27;192.168.99.100:27017&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;192.168.99.101:27017&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;192.168.99.102:27017&#x27;</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">dbParameters</span>: <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">    <span class="attr">w</span>: <span class="string">&#x27;majority&#x27;</span>,</span><br><span class="line">    <span class="attr">wtimeout</span>: <span class="number">10000</span>,</span><br><span class="line">    <span class="attr">j</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">readPreference</span>: <span class="string">&#x27;ReadPreference.SECONDARY_PREFERRED&#x27;</span>,</span><br><span class="line">    <span class="attr">native_parser</span>: <span class="literal">false</span></span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="attr">serverParameters</span>: <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">    <span class="attr">autoReconnect</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">poolSize</span>: <span class="number">10</span>,</span><br><span class="line">    <span class="attr">socketoptions</span>: &#123;</span><br><span class="line">      <span class="attr">keepAlive</span>: <span class="number">300</span>,</span><br><span class="line">      <span class="attr">connectTimeoutMS</span>: <span class="number">30000</span>,</span><br><span class="line">      <span class="attr">socketTimeoutMS</span>: <span class="number">30000</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="attr">replsetParameters</span>: <span class="function">(<span class="params">replset = <span class="string">&#x27;rs1&#x27;</span></span>) =&gt;</span> (&#123;</span><br><span class="line">    <span class="attr">replicaSet</span>: replset,</span><br><span class="line">    <span class="attr">ha</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">haInterval</span>: <span class="number">10000</span>,</span><br><span class="line">    <span class="attr">poolSize</span>: <span class="number">10</span>,</span><br><span class="line">    <span class="attr">socketoptions</span>: &#123;</span><br><span class="line">      <span class="attr">keepAlive</span>: <span class="number">300</span>,</span><br><span class="line">      <span class="attr">connectTimeoutMS</span>: <span class="number">30000</span>,</span><br><span class="line">      <span class="attr">socketTimeoutMS</span>: <span class="number">30000</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// server parameters</span></span><br><span class="line"><span class="keyword">const</span> serverSettings = &#123;</span><br><span class="line">  <span class="attr">port</span>: process.<span class="property">env</span>.<span class="property">PORT</span> || <span class="number">3000</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;, &#123; dbSettings, serverSettings &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// movie-service-config.js</span></span><br></pre></td></tr></table></figure><p>以上就是我们的配置文件，绝大多数时候，配置代码都是硬编码的，不过你可以看到有些属性使用了环境变量作为一个可选项。使用环境变量被认为是实践范式，因为这样在可以文件中隐藏数据库认证信息及服务器参数等。</p><p>最终，<code>movies-service</code>  API 的最后一步就是把所有这些模块集合到 <code>index.js</code> 中。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span></span><br><span class="line"><span class="comment">// we load all the depencies we need</span></span><br><span class="line"><span class="keyword">const</span> &#123;<span class="title class_">EventEmitter</span>&#125; = <span class="built_in">require</span>(<span class="string">&#x27;events&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> server = <span class="built_in">require</span>(<span class="string">&#x27;./server/server&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> repository = <span class="built_in">require</span>(<span class="string">&#x27;./repository/repository&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> config = <span class="built_in">require</span>(<span class="string">&#x27;./config/&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> mediator = <span class="keyword">new</span> <span class="title class_">EventEmitter</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// verbose logging when we are starting the server</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;--- Movies Service ---&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Connecting to movies repository...&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// log unhandled execpetions</span></span><br><span class="line">process.<span class="title function_">on</span>(<span class="string">&#x27;uncaughtException&#x27;</span>, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Unhandled Exception&#x27;</span>, err)</span><br><span class="line">&#125;)</span><br><span class="line">process.<span class="title function_">on</span>(<span class="string">&#x27;uncaughtRejection&#x27;</span>, <span class="function">(<span class="params">err, promise</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Unhandled Rejection&#x27;</span>, err)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// event listener when the repository has been connected</span></span><br><span class="line">mediator.<span class="title function_">on</span>(<span class="string">&#x27;db.ready&#x27;</span>, <span class="function">(<span class="params">db</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> rep</span><br><span class="line">  repository.<span class="title function_">connect</span>(db)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">repo</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Repository Connected. Starting Server&#x27;</span>)</span><br><span class="line">      rep = repo</span><br><span class="line">      <span class="keyword">return</span> server.<span class="title function_">start</span>(&#123;</span><br><span class="line">        <span class="attr">port</span>: config.<span class="property">serverSettings</span>.<span class="property">port</span>,</span><br><span class="line">        repo</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">app</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Server started succesfully, running on port: <span class="subst">$&#123;config.serverSettings.port&#125;</span>.`</span>)</span><br><span class="line">      app.<span class="title function_">on</span>(<span class="string">&#x27;close&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        rep.<span class="title function_">disconnect</span>()</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">mediator.<span class="title function_">on</span>(<span class="string">&#x27;db.error&#x27;</span>, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">error</span>(err)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// we load the connection to the repository</span></span><br><span class="line">config.<span class="property">db</span>.<span class="title function_">connect</span>(config.<span class="property">dbSettings</span>, mediator)</span><br><span class="line"><span class="comment">// init the repository connection, and the event listener will handle the rest</span></span><br><span class="line">mediator.<span class="title function_">emit</span>(<span class="string">&#x27;boot.ready&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// movie-service-index.js</span></span><br></pre></td></tr></table></figure><p>这里我们集成了所有的电影 API 服务，并且设置了一个简单的错误处理过程，之后我们加载配置文件，连接数据仓库，最终启动服务。</p><p>到此为止我们已经完成了所有 API 开发相关的工作，你可以在代码库的 <a href="https://github.com/Crizstian/cinema-microservice/tree/step-1">step-1 分支</a> 找到源码。</p><p>如果你到 github 仓库去看一下，你会发现以下这些命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">npm install          <span class="comment"># setup node dependencies  </span></span><br><span class="line">npm <span class="built_in">test</span>             <span class="comment"># unit test with mocha  </span></span><br><span class="line">npm start            <span class="comment"># starts the service  </span></span><br><span class="line">npm run node-debug   <span class="comment"># run the server in debug mode </span></span><br><span class="line">npm run chrome-debug <span class="comment"># debug the node with chrome</span></span><br><span class="line">npm run lint         <span class="comment"># lint the code with standard</span></span><br></pre></td></tr></table></figure><p>我们可以使用 <code>npm start</code> 命令启动我们的第一个微服务，并在本地运行，这可不是文章标题所声称的运行在 docker 中🤔。</p><p>不过首先我们要做的，是拥有 <a href="https://medium.com/@cramirez92/how-to-deploy-a-mongodb-replica-set-using-docker-6d0b9ac00e49#.xln0x0owy">“用 docker 创建一个 mongoDB 集群”</a> 这篇文章中的 <strong>Docker</strong> 环境，如果你还没有，那么你需要一些额外的步骤为微服务创建一个数据库。这儿还有些命令是用来测试我们的电影服务的。</p><p>首先我们创建一个 <strong>Dockerfile</strong> 将我们的 <strong>NodeJS 微服务</strong> Docker 化。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Node v7 as the base image to support ES6</span></span><br><span class="line"><span class="keyword">FROM</span> node:<span class="number">7.2</span>.<span class="number">0</span></span><br><span class="line"><span class="comment"># Create a new user to our new container and avoid the root user</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> useradd --user-group --create-home --shell /bin/false nupp &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    apt-get clean</span></span><br><span class="line"><span class="keyword">ENV</span> HOME=/home/nupp</span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> package.json npm-shrinkwrap.json <span class="variable">$HOME</span>/app/</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> src/ <span class="variable">$HOME</span>/app/src</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">chown</span> -R nupp:nupp <span class="variable">$HOME</span>/* /usr/local/</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> <span class="variable">$HOME</span>/app</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> npm cache clean &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    npm install --silent --progress=<span class="literal">false</span> --production</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">chown</span> -R nupp:nupp <span class="variable">$HOME</span>/*</span></span><br><span class="line"><span class="keyword">USER</span> nupp</span><br><span class="line"></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">3000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;npm&quot;</span>, <span class="string">&quot;start&quot;</span>]</span></span><br></pre></td></tr></table></figure><p>我们用 NodeJS 镜像作为我们的基础镜像，然后创建一个用户避免使用 root 账户，之后我们把源码拷贝到镜像中再安装依赖库，对外暴露一个端口号，最后实例化我们的电影服务。</p><p>接下来使用下面的命令构建我们的 docker 镜像：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker build -t moives-service .</span></span><br></pre></td></tr></table></figure><p>先分析一下这条构建指令。</p><ol><li><code>docker build</code> 告诉 docker 引擎我们要创建一个新的镜像。</li><li><code>-t moives-service</code> 将这个镜像打上 <code>movies-service</code> 标签。以后我们就可以用标签引用这个镜像。</li><li><code>.</code> 表示在当前目录寻找 <code>Dockerfile</code> 。</li></ol><p>在看到一些命令行输出之后，包含我们的 NodeJS 应用的镜像就准备好了，现在我们就可以用下面的命令运行这个镜像了：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker run --name movie-service -p 3000:3000 -e DB_SERVERS=<span class="string">&quot;192.168.99.100:27017 192.168.99.101:27017 192.168.99.100:27017&quot;</span> -d movies-service</span></span><br></pre></td></tr></table></figure><p>命令中我们传入了一个环境变量，用来提供 mongoDB 集群的服务器地址，这儿只是做一个演示，实际可以有更好操作的方式，比如从 env 文件中读取配置。</p><p>现在我们的 docker 容器已经运行起来了，我们可以执行 <code>docker-machine ip machine-name</code> 获取微服务的 ip 地址，这样我们微服务就已经准备就绪，可以对其进行集成测试了。</p><p>以下是我们的测试代码，它会进行一个接口调用检测。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* eslint-env mocha */</span></span><br><span class="line"><span class="keyword">const</span> supertest = <span class="built_in">require</span>(<span class="string">&#x27;supertest&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="title function_">describe</span>(<span class="string">&#x27;movies-service&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> api = <span class="title function_">supertest</span>(<span class="string">&#x27;http://192.168.99.100:3000&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="title function_">it</span>(<span class="string">&#x27;returns a 200 for a collection of movies&#x27;</span>, <span class="function">(<span class="params">done</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">    api.<span class="title function_">get</span>(<span class="string">&#x27;/movies/premiers&#x27;</span>)</span><br><span class="line">      .<span class="title function_">expect</span>(<span class="number">200</span>, done)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// movies-service-integration.test.js</span></span><br></pre></td></tr></table></figure><h2 id="总结时间"><a href="#总结时间" class="headerlink" title="总结时间"></a>总结时间</h2><p>最后回顾一下我们都做了什么事情。</p><p><img src="https://img.zvz.im/imgs/2019/06/f142eea98b22201f.png" alt=""></p><p>我们已经完成了以上信息交互中的第一个部分，构建了<strong>电影服务</strong>使得我们可以在电影院查询电影首映时间，使用 NodeJS 实现了<strong>电影服务</strong>的 API，我们先用一个 <strong>RAML</strong> 文件进行 <strong>API 设计</strong>，然后开始构建我们的 <strong>API</strong>，并且进行了相应的<strong>单元测试</strong>，最后把所有的代码整合成我们的<strong>微服务</strong>，使我们的电影服务可以启动起来。</p><p>之后我们把我们的<strong>微服务</strong>打包进 <strong>Docker</strong> 容器，使我们能对其进行一些<strong>集成测试。</strong></p><p>虽然我们可能见过许多 <strong>NodeJS</strong> 开发的项目，不过仍然还有许多东西值得我们去学习和实践。本文只是一个小小的展示，我希望它展示出了一些有趣而有用的东西，使你在工作中能够运用 <strong>Docker 和 NodeJS</strong> 的相关技术。</p><h2 id="Github-上的完整代码"><a href="#Github-上的完整代码" class="headerlink" title="Github 上的完整代码"></a>Github 上的完整代码</h2><p>你可以在 Github 上找到本文的完整代码 <a href="https://github.com/Crizstian/cinema-microservice">Crizstian/cinema-microservice</a>。</p><p>翻译自：<a href="https://medium.com/@cramirez92/build-a-nodejs-cinema-microservice-and-deploying-it-with-docker-part-1-7e28e25bfa8b">Build a NodeJS cinema microservice and deploying it with docker — part 1</a></p><p><a href="https://log.zvz.im/2017/05/24/nodejs-cinema-microservice-part2/">系列文章 - Part 2</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://img.zvz.im/imgs/2019/06/1212f2b3d00c4c80.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;本文是「使用 NodeJS 构建影院微服务」系列的第一篇。此系列将会讲述了如何构建&lt;strong&gt;NodeJS 微服务&lt;/strong&gt;并将它们部署到&lt;strong&gt;Docker Swarm 集群&lt;/strong&gt;上。&lt;/p&gt;
&lt;p&gt;本文将向你展示，如何构建&lt;strong&gt;微服务&lt;/strong&gt;，以及如何将其部署到&lt;strong&gt;Docker&lt;/strong&gt;容器中。我们会完成一个简单的 NodeJS 服务，并以 MongoDB 作为后端存储。&lt;/p&gt;
&lt;p&gt;本文将使用到以下技术：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;NodeJS 7.2.0 版本&lt;/li&gt;
&lt;li&gt;MongoDB 3.4.1&lt;/li&gt;
&lt;li&gt;Docker for Mac 1.12.6&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;为了理解文中内容，你最好了解以下知识：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;NodeJS 的基础知识&lt;/li&gt;
&lt;li&gt;Docker 的基础知识（并且已安装了 docker）&lt;/li&gt;
&lt;li&gt;MongoDB 的基础知识（并且有可运行的数据库服务）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我强烈建议大家参考我以前的文章&lt;a href=&quot;https://medium.com/@cramirez92/how-to-deploy-a-mongodb-replica-set-using-docker-6d0b9ac00e49&quot;&gt;「如何在 Docker 上部署 mongoDB 集群」&lt;/a&gt;，部署好数据库服务并将其运行起来。&lt;br&gt;
    
    </summary>
    
    
      <category term="Nodejs" scheme="http://log.zvz.im/tags/Nodejs/"/>
    
  </entry>
  
  <entry>
    <title>为什么柯里化有用</title>
    <link href="http://log.zvz.im/2017/03/23/why-curry-helps/"/>
    <id>http://log.zvz.im/2017/03/23/why-curry-helps/</id>
    <published>2017-03-23T15:11:23.000Z</published>
    <updated>2025-07-03T18:06:35.828Z</updated>
    
    <content type="html"><![CDATA[<p>写一段可以无限被重用的代码，对于程序员来说无异于黄粱美梦。代码表达清晰是因为代码要表达需求，代码易于重用……好吧，只是因为你要重复使用它。两者不可得兼，你还能奢求更多么？</p><p><a href="https://npmjs.org/package/curry">柯里化</a>可以帮上忙。</p><h2 id="什么是柯里化，为何它如此美味？"><a href="#什么是柯里化，为何它如此美味？" class="headerlink" title="什么是柯里化，为何它如此美味？"></a>什么是柯里化，为何它如此美味？</h2><p>通常， JavaScript 函数看起来都像这样：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> add = <span class="keyword">function</span>(<span class="params">a, b</span>)&#123; <span class="keyword">return</span> a + b &#125;</span><br><span class="line"><span class="title function_">add</span>(<span class="number">1</span>, <span class="number">2</span>) <span class="comment">//= 3</span></span><br></pre></td></tr></table></figure><p>它接受一些参数，然后有一个返回值。我可以使用过多（多余的参数会被忽略）或过少（会给出奇怪的返回值）的参数调用它：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">add</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="string">&#x27;IGNORE ME&#x27;</span>) <span class="comment">//= 3</span></span><br><span class="line"><span class="title function_">add</span>(<span class="number">1</span>) <span class="comment">//= NaN</span></span><br></pre></td></tr></table></figure><p>柯里化可以使一个多参数函数转化为一系列单参数函数。比如，柯里化后的加法函数：<br><span id="more"></span></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> curry = <span class="built_in">require</span>(<span class="string">&#x27;curry&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> add = <span class="title function_">curry</span>(<span class="keyword">function</span>(<span class="params">a, b</span>)&#123; <span class="keyword">return</span> a + b &#125;)</span><br><span class="line"><span class="keyword">var</span> add100 = <span class="title function_">add</span>(<span class="number">100</span>)</span><br><span class="line"><span class="title function_">add100</span>(<span class="number">1</span>) <span class="comment">//= 101</span></span><br></pre></td></tr></table></figure><p>柯里化后的多参数函数可以如下调用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sum3 = <span class="title function_">curry</span>(<span class="keyword">function</span>(<span class="params">a, b, c</span>)&#123; <span class="keyword">return</span> a + b + c &#125;)</span><br><span class="line"><span class="title function_">sum3</span>(<span class="number">1</span>)(<span class="number">2</span>)(<span class="number">3</span>) <span class="comment">//= 6</span></span><br></pre></td></tr></table></figure><p>这样的写法在 JavaScript 中可能有点丑，所以<a href="https://npmjs.org/package/curry">柯里化</a>也允许你一次传入都个参数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sum3 = <span class="title function_">curry</span>(<span class="keyword">function</span>(<span class="params">a, b, c</span>)&#123; <span class="keyword">return</span> a + b + c &#125;)</span><br><span class="line"><span class="title function_">sum3</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>) <span class="comment">//= 6</span></span><br><span class="line"><span class="title function_">sum3</span>(<span class="number">1</span>)(<span class="number">2</span>, <span class="number">3</span>) <span class="comment">//= 6</span></span><br><span class="line"><span class="title function_">sum3</span>(<span class="number">1</span>, <span class="number">2</span>)(<span class="number">3</span>) <span class="comment">//= 6</span></span><br></pre></td></tr></table></figure><h2 id="这样又如何？"><a href="#这样又如何？" class="headerlink" title="这样又如何？"></a>这样又如何？</h2><p>如果你对于那些经常使用柯里化函数的语言很熟（比如<a href="http://learnyouahaskell.com/">Haskell</a>），可能看不出来这样做会带来什么好处。在我的理解中，主要有以下两点好处：</p><ul><li>小片断的函数可以被配置，并很容易得到重用，且代码整洁；</li><li>代码中彻头彻尾只用函数。</li></ul><h3 id="小片断函数"><a href="#小片断函数" class="headerlink" title="小片断函数"></a>小片断函数</h3><p>举一个比较明显的例子；从一个集合中获取所有成员的 id：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> objects = [&#123; <span class="attr">id</span>: <span class="number">1</span> &#125;, &#123; <span class="attr">id</span>: <span class="number">2</span> &#125;, &#123; <span class="attr">id</span>: <span class="number">3</span> &#125;]</span><br><span class="line">objects.<span class="title function_">map</span>(<span class="keyword">function</span>(<span class="params">o</span>)&#123; <span class="keyword">return</span> o.<span class="property">id</span> &#125;)</span><br></pre></td></tr></table></figure><p>如果你正在厘清第二行代码的真实逻辑，让我帮你把它择出来吧：</p><blockquote><p>MAP over OBJECTS to get IDS（遍历所有对象获取它们的 ID 值）</p></blockquote><p>从函数定义的形式来看，只是这一行就有很多垃圾代码。让我们将其整理干净：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> get = <span class="title function_">curry</span>(<span class="keyword">function</span>(<span class="params">property, object</span>)&#123; <span class="keyword">return</span> object[property] &#125;)</span><br><span class="line">objects.<span class="title function_">map</span>(<span class="title function_">get</span>(<span class="string">&#x27;id&#x27;</span>)) <span class="comment">//= [1, 2, 3]</span></span><br></pre></td></tr></table></figure><p>现在我们可以照着代码讲出真实的逻辑了 - 遍历所有对象获取它们的 ID 值。我们创建的<em>get</em> 方法是一个<strong>可部分配置的方法</strong>。</p><p>如果我们想要重用‘从一组对象中获取 id ’这个功能怎么办？最直接的办法就是：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> getIDs = <span class="keyword">function</span>(<span class="params">objects</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> objects.<span class="title function_">map</span>(<span class="title function_">get</span>(<span class="string">&#x27;id&#x27;</span>))</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">getIDs</span>(objects) <span class="comment">//= [1, 2, 3]</span></span><br></pre></td></tr></table></figure><p>嗯，看起来我们又丢掉了优雅简练，退回到杂乱无章的编码风格了。那我们该怎么办呢？额 - 如果 map 方法可以在还没有数据的时候，用一个函数进行部分配置的话？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> map = <span class="title function_">curry</span>(<span class="keyword">function</span>(<span class="params">fn, value</span>)&#123; <span class="keyword">return</span> value.<span class="title function_">map</span>(fn) &#125;)</span><br><span class="line"><span class="keyword">var</span> getIDs = <span class="title function_">map</span>(<span class="title function_">get</span>(<span class="string">&#x27;id&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="title function_">getIDs</span>(objects) <span class="comment">//= [1, 2, 3]</span></span><br></pre></td></tr></table></figure><p>看起来，如果我们以柯里化函数作为基础构建模块，我们就可以使用它们很容易得创造出全新的功能函数。更让人兴奋的是，代码看起来更能体现你的业务逻辑。</p><h3 id="连成串的函数"><a href="#连成串的函数" class="headerlink" title="连成串的函数"></a>连成串的函数</h3><p>使用这种方式写代码还有另一个好处，它鼓励函数的使用；而不是类的方法。虽然类的方法是很美好的 —— 允许多态，代码可读性高 —— 但它们并不总适合所有的工作，比如拥有大量异步调用的时候。</p><p>下面的例子中，我们会从服务器端获取数据，再将其进行处理。数据形式如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;user&quot;</span>: <span class="string">&quot;hughfdjackson&quot;</span>,</span><br><span class="line">    <span class="string">&quot;posts&quot;</span>: [</span><br><span class="line">        &#123; <span class="string">&quot;title&quot;</span>: <span class="string">&quot;why curry?&quot;</span>, <span class="string">&quot;contents&quot;</span>: <span class="string">&quot;...&quot;</span> &#125;,</span><br><span class="line">        &#123; <span class="string">&quot;title&quot;</span>: <span class="string">&quot;prototypes: the short(est possible) story&quot;</span>, <span class="string">&quot;contents&quot;</span>: <span class="string">&quot;...&quot;</span> &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你的任务是得到该用户所有文章的标题。现在开始！</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">fetchFromServer</span>()</span><br><span class="line">    .<span class="title function_">then</span>(<span class="title class_">JSON</span>.<span class="property">parse</span>)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">data</span>)&#123; <span class="keyword">return</span> data.<span class="property">posts</span> &#125;)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">posts</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> posts.<span class="title function_">map</span>(<span class="keyword">function</span>(<span class="params">post</span>)&#123; <span class="keyword">return</span> post.<span class="property">title</span> &#125;)</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><p>好吧，这不公平，是我催得太急了。（我还帮你写了上面这些代码 —— 你也许能更加优雅地解决这个问题，可能我已经跑题了）</p><p>由于承诺链（ chains of promises ）（也许你更喜欢称其为回调函数）基本都是与函数一起使用的，你无法简单直接地遍历数据，直到它先从服务器返回并被（无论视觉上或头脑中的）一团乱麻包裹住。</p><p>让我们再次出发，这回我们使用已经定义过的方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">fetchFromServer</span>()</span><br><span class="line">    .<span class="title function_">then</span>(<span class="title class_">JSON</span>.<span class="property">parse</span>)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="title function_">get</span>(<span class="string">&#x27;posts&#x27;</span>))</span><br><span class="line">    .<span class="title function_">then</span>(<span class="title function_">map</span>(<span class="title function_">get</span>(<span class="string">&#x27;title&#x27;</span>)))</span><br></pre></td></tr></table></figure><p>Ok，很少的逻辑，轻松地表达；如果没有柯里化函数我们是无法如此容易地做到的。</p><h2 id="简而言之"><a href="#简而言之" class="headerlink" title="简而言之"></a>简而言之</h2><p><a href="https://npmjs.org/package/curry">柯里化</a>能给予你一种令人垂涎的表达能力。</p><p>我建议你立刻开始使用它。如果你已经熟稔于此，那么你一定会发现它的 API 接口直接好用。如果还没有，那么你应当与你的同事一起好好考虑一下了。</p><blockquote><p>翻译自：<a href="https://hughfdjackson.com/javascript/why-curry-helps/">Why Curry Helps</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;写一段可以无限被重用的代码，对于程序员来说无异于黄粱美梦。代码表达清晰是因为代码要表达需求，代码易于重用……好吧，只是因为你要重复使用它。两者不可得兼，你还能奢求更多么？&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://npmjs.org/package/curry&quot;&gt;柯里化&lt;/a&gt;可以帮上忙。&lt;/p&gt;
&lt;h2 id=&quot;什么是柯里化，为何它如此美味？&quot;&gt;&lt;a href=&quot;#什么是柯里化，为何它如此美味？&quot; class=&quot;headerlink&quot; title=&quot;什么是柯里化，为何它如此美味？&quot;&gt;&lt;/a&gt;什么是柯里化，为何它如此美味？&lt;/h2&gt;&lt;p&gt;通常， JavaScript 函数看起来都像这样：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; add = &lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;a, b&lt;/span&gt;)&amp;#123; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; a + b &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title function_&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;//= 3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;它接受一些参数，然后有一个返回值。我可以使用过多（多余的参数会被忽略）或过少（会给出奇怪的返回值）的参数调用它：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title function_&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;#x27;IGNORE ME&amp;#x27;&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;//= 3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title function_&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;//= NaN&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;柯里化可以使一个多参数函数转化为一系列单参数函数。比如，柯里化后的加法函数：&lt;br&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="http://log.zvz.im/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>OpenCV 入门：Node.js 计算机视觉处理</title>
    <link href="http://log.zvz.im/2017/03/20/node-opencv/"/>
    <id>http://log.zvz.im/2017/03/20/node-opencv/</id>
    <published>2017-03-20T19:21:42.000Z</published>
    <updated>2025-07-03T18:06:35.827Z</updated>
    
    <content type="html"><![CDATA[<p>在这篇 OpenCV 入门文章中，我将会向大家展示如何使用 Node.js 进行计算机视觉处理。并且结合实例讲解使用 OpenCV 这个开源库进行图像处理的基础方法。</p><p>目前，我正在完成我的硕士论文，其中使用到了 React Native，神经网络，和 OpenCV 计算机视觉库。请允许我向你们展示一些我在使用 OpenCV 过程中学习到的一些东西。</p><blockquote><p>计算机视觉是计算机科学中的一个领域，主要专注于使用不同的算法从图像和视频中获取数据。</p></blockquote><p>计算机视觉在许多领域得到了广泛地应用，例如安全摄像头的运动跟踪，控制车辆进行自动驾驶，从图片或视频中识别或搜索对象。</p><p>要实现计算机视觉算法是一件非常繁复的工作，不过幸好有 <a href="http://opencv.org/">OpenCV</a> 这个非常好的开源库，此库起源于 1999 年，并一直发展到现在。</p><p>OpenCV 官方支持 C，C ++，Python 和 Java。幸运的是，由 Peter Braden 领导的一群 Javascript 程序员开发了一个 Javascript 的 OpenCV 接口库，名为 <a href="https://github.com/peterbraden/node-opencv">node-opencv</a>。</p><p>利用该接口库，我们可以实现用于图像分析的 Node.js 应用。此库目前还没有实现所有的 OpenCV 特性 - 特别是 OpenCV 3 的一些特性 - 不过已经基本够用了。<br><span id="more"></span></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>要在 Node.js 中使用 OpenCV 库，你得先进行全局安装。在 MacOS 上，你可以通过 <a href="http://brew.sh/">Homebrew</a> 来安装。在这篇文章中我安装并使用的是 OpenCV 的 2.4 版本。</p><blockquote><p>译者注：由于译者实际使用的是 OpenCV 3.2.0 版本，故在边缘侦测部分的代码相对于原文有所修改。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">brew tap homebrew/science</span><br><span class="line">brew install opencv</span><br></pre></td></tr></table></figure><p>如果你使用的是其它的操作系统，这里有 <a href="http://docs.opencv.org/2.4/doc/tutorials/introduction/linux_install/linux_install.html#linux-installation">Linux</a> 和 <a href="http://docs.opencv.org/2.4/doc/tutorials/introduction/windows_install/windows_install.html#windows-installation">Windows</a> 版本的教程。在成功安装之后，我们就可以在 Node.js 项目中安装 node-opencv 了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save opencv</span><br></pre></td></tr></table></figure><p>有时安装会失败（它是开源项目，还没有到达最终完成的阶段），不过你应该可以在<a href="https://github.com/peterbraden/node-opencv">该项目的 GitHub 页面</a>上找到对应的解决办法。</p><h2 id="OpenCV-基础"><a href="#OpenCV-基础" class="headerlink" title="OpenCV 基础"></a>OpenCV 基础</h2><h3 id="加载及保存图片-矩阵"><a href="#加载及保存图片-矩阵" class="headerlink" title="加载及保存图片 + 矩阵"></a>加载及保存图片 + 矩阵</h3><p>OpenCV 的最基本功能是加载和保存图像。你可以通过下面的方法调用这些功能：<strong>cv#readImage()</strong> 和 <strong>Maritx#save()</strong>；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> cv = <span class="built_in">require</span>(<span class="string">&#x27;opencv&#x27;</span>);</span><br><span class="line"></span><br><span class="line">cv.<span class="title function_">readImage</span>(<span class="string">&#x27;./img/myImage.jpg&#x27;</span>, <span class="keyword">function</span>(<span class="params">err, img</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="keyword">throw</span> err;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> width = im.<span class="title function_">width</span>();</span><br><span class="line">  <span class="keyword">const</span> height = im.<span class="title function_">height</span>();</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (width &lt; <span class="number">1</span> || height &lt; <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Image has no size&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// do some cool stuff with img</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// save img</span></span><br><span class="line">  img.<span class="title function_">save</span>(<span class="string">&#x27;./img/myNewImage.jpg&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><img src="https://img.zvz.im/imgs/2019/06/c1afacfcbce536d3.jpg" alt=""></p><p>承载加载图片数据的对象，是 OpenCV 使用的一个基本数据结构 - 矩阵。所有载入和生成的图像都是用矩阵来描述的，矩阵中的每一个元素都对应图像的一个像素。矩阵的大小由载入图像的大小决定。在 Node.js 中你可以使用特定参数调用 new Matrix() 构造方法来生成一个矩阵。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> cv.<span class="title class_">Matrix</span>(rows, cols);</span><br><span class="line"><span class="keyword">new</span> cv.<span class="title class_">Matrix</span>(rows, cols, type, fillValue);</span><br></pre></td></tr></table></figure><h3 id="修改图像"><a href="#修改图像" class="headerlink" title="修改图像"></a>修改图像</h3><p>变换图像颜色是一个基础方法。例如，我们可以调用 <strong>Matrix#convertGrayscale()</strong> 得到一个灰度图片。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">img.<span class="title function_">convertGrayScale</span>();</span><br><span class="line">img.<span class="title function_">save</span>(<span class="string">&#x27;./img/myGrayscaleImg.jpg&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src="https://img.zvz.im/imgs/2019/06/470560edbd5675be.jpg" alt=""></p><p>在进行边缘探测时经常会用到这个方法。</p><p>我们可以使用 <strong>Matrix#convertHSVscale()</strong> 方法将图像转换为 HSV 圆柱坐标表示（HSV cylindrical-coordinate representation ）。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">img.<span class="title function_">convertHSVscale</span>();</span><br><span class="line">img.<span class="title function_">save</span>(<span class="string">&#x27;./img/myHSVscaleImg.jpg&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src="https://img.zvz.im/imgs/2019/06/2d1840e7761522b8.jpg" alt=""></p><p>我们可以使用 <strong>Matrix#crop(x, y, width, height)</strong> 方法来裁剪图片，并指定其中的参数。</p><p>这个方法并不会改变当前的图像，而是返回一个全新的图像。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> croppedImg = img.<span class="title function_">crop</span>(<span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>, <span class="number">1000</span>);</span><br><span class="line">croppedImg.<span class="title function_">save</span>(<span class="string">&#x27;./img/croppedImg&#x27;</span>);</span><br></pre></td></tr></table></figure><p>如果我们想要将图像对象赋值给另一个变量，可以使用 <strong>Matrix#copy()</strong> 方法返回一个新的图片对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> newImg = img.<span class="title function_">copy</span>();</span><br></pre></td></tr></table></figure><p>这样，我们可以用一些基础的 Matrix 方法进行工作了。我们还能找到各种模糊和滤镜方法来进行图片编辑。你可以在 GitHub 项目里的 <a href="https://github.com/peterbraden/node-opencv/blob/976788c411cdff098247c40a17082c0ddaeaaadd/src/Matrix.cc">Matrix.cc</a> 文件中找到 Matrix 对象实现的所有方法。</p><h3 id="腐蚀和膨胀"><a href="#腐蚀和膨胀" class="headerlink" title="腐蚀和膨胀"></a>腐蚀和膨胀</h3><p>腐蚀和膨胀是数学形态学（ mathematical morphology ）的基本方法。我将结合下面的图像修改操作来解释它们是如何工作的。（译者注：具体数学定义可<a href="http://media.cs.tsinghua.edu.cn/~ahz/digitalimageprocess/chapter08/chapt08_ahz.htm">参考此文</a>）</p><p><img src="https://img.zvz.im/imgs/2019/06/c2316008cb739a25.jpg" alt=""></p><p>二进制图像 A 通过结构元素 B 的膨胀定义如下</p><p><img src="https://img.zvz.im/imgs/2019/06/97dd7ea051bb7cbb.jpg" alt=""></p><p>OpenCV 有一个 <strong>Matrix#dilate(iterations, structEl)</strong> 方法，其中的 <strong>iterations</strong> 参数指定膨胀的量，<strong>structEl</strong> 参数是用于膨胀的结构元素（默认为 3X3）。</p><p>我们可以用此参数调用膨胀方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">img.<span class="title function_">dilate</span>(<span class="number">3</span>);</span><br></pre></td></tr></table></figure><p>OpenCV 调用膨胀方法时如下。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cv::<span class="built_in">dilate</span>(self-&gt;mat, self-&gt;mat, sturctEl, cv::<span class="built_in">Point</span>(<span class="number">-1</span>, <span class="number">-1</span>), <span class="number">3</span>);</span><br></pre></td></tr></table></figure><p>调用过此方法后，我们可以得到如下修改过的图像。</p><p><img src="https://img.zvz.im/imgs/2019/06/e4af008c72801d71.jpg" alt=""></p><p>二进制图像 A 通过结构元素 B 的腐蚀定义如下</p><p><img src="https://img.zvz.im/imgs/2019/06/6c51dfe0d4de36c5.jpg" alt=""></p><p>在 OpenCV 中，我们可以调用 <strong>Martix#erode(iterations, structEl)</strong> 方法，和前面的膨胀方法相似。</p><p>我们可以这样调用它：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">img.<span class="title function_">erode</span>(<span class="number">3</span>);</span><br></pre></td></tr></table></figure><p>同样我们可以得到一个腐蚀过的图像。</p><p><img src="https://img.zvz.im/imgs/2019/06/c200eeb23703b2c0.jpg" alt=""></p><h3 id="边缘侦测"><a href="#边缘侦测" class="headerlink" title="边缘侦测"></a>边缘侦测</h3><p>关于边缘侦测，我们可以使用「坎尼边缘探测算法」。该算法起源于 1986 年，并且一个非常流行，被称作「最佳探测器」。算法规定了边缘侦测中三个重要的标准，列举如下：</p><ol><li>边缘侦测要保证低错误率；</li><li>良好的边缘定位 - 探测到的边缘和实际边缘像素差必须最小；</li><li>图像的边缘只能被标记一次；</li></ol><p>在使用「坎尼边缘探测算法」前，我们可以先将图像转为灰度格式，通常这样做可以让我们获得更好的结果。接下来，我们可以通过高斯模糊滤镜消除图像上的噪点，它需要一个向量作为高斯核大小的参数（which receives a parameter as a field - Gaussian kernel size）。再调用这两个方法处理过后，我们可以在坎尼边缘侦测时获得更好更准确的结果。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">im.<span class="title function_">convertGrayscale</span>();</span><br><span class="line">im.<span class="title function_">gaussianBlur</span>([<span class="number">3</span>, <span class="number">3</span>]);</span><br></pre></td></tr></table></figure><p><img src="https://img.zvz.im/imgs/2019/06/470560edbd5675be.jpg" alt=""></p><p>图像现已准备就绪，可以开始使用坎尼边缘侦测算法了。此算法接收两个参数：<strong>lowThreshold</strong> 和 <strong>highThreshold</strong> 。</p><p>这两个阈值帮你将所有像素划分为三组。</p><ul><li>如果梯度像素（ gradient pixel ）的值比 <strong>highThreshold</strong> 高，则该像素被标记为强边缘像素（ strong edge pixels ）。</li><li>如果梯度像素的值介于高低阈值间，则该像素被标记为弱边缘像素（ weak edge pixels ）。</li><li>如果梯度像素的值比低阈值还低，那这些像素就完全被抑制。</li></ul><p>并不存在一个针对所有图像都有效的通用阈值设定。<strong>你需要针对每个图像设定合适的阈值</strong>。不过存在一些方法可以预测合适的阈值，但是我不会在此文中具体说明。</p><p>在调用 Canny Edge 方法后，我们还会调用一次膨胀方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> lowThresh = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">const</span> highThresh = <span class="number">150</span>;</span><br><span class="line"><span class="keyword">const</span> iterations = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">img.<span class="title function_">canny</span>(lowThresh, highThresh);</span><br><span class="line">img.<span class="title function_">dilate</span>(iterations);</span><br></pre></td></tr></table></figure><p>经过以上步骤，我们就有了一张被分析过的图像。从这张图像上，我们可以选出所有的轮廓线，只需调用 <strong>Matrix#findContours()</strong> 方法，再将其写入到一个新的图像中。</p><blockquote><p>译者注：此处代码根据 <a href="https://github.com/peterbraden/node-opencv/blob/master/examples/contours.js">https://github.com/peterbraden/node-opencv/blob/master/examples/contours.js</a> 进行了部分调整。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">WHITE</span> = [<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>];</span><br><span class="line"><span class="keyword">let</span> contours = img.<span class="title function_">findContours</span>();</span><br><span class="line"><span class="keyword">var</span> all = <span class="keyword">new</span> cv.<span class="title class_">Matrix</span>(height, width);</span><br><span class="line">all.<span class="title function_">drawAllContours</span>(contours, <span class="variable constant_">WHITE</span>);</span><br><span class="line"></span><br><span class="line">all.<span class="title function_">save</span>(<span class="string">&#x27;./img/allContoursImg.jpg&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src="https://img.zvz.im/imgs/2019/06/07508d8ffe2c236e.jpg" alt=""></p><p>膨胀过后的图像</p><p><img src="https://img.zvz.im/imgs/2019/06/246848b1793b0f98.jpg" alt=""></p><p>未进行膨胀的图像</p><p>在图片中我们可以看到所有通过坎尼边缘侦测到的轮廓。</p><p>如果我们只要选出最大的轮廓，可以使用下面的代码：循环每个轮廓，找出最大的那个。可以使用 <strong>Matrix#drawContour</strong> 方法将其画出来。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">GREEN</span> = [<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>];</span><br><span class="line"><span class="keyword">let</span> contours = img.<span class="title function_">contours</span>();</span><br><span class="line"><span class="keyword">let</span> largestContourImg;</span><br><span class="line"><span class="keyword">let</span> largestArea = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">let</span> largestAreaIndex;</span><br><span class="line"></span><br><span class="line">largestContourImg = <span class="keyword">new</span> cv.<span class="title class_">Matrix</span>(height, width);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; contours.<span class="title function_">size</span>(); i ++) &#123;</span><br><span class="line">  <span class="keyword">if</span> (contours.<span class="title function_">area</span>(i) &gt; largestArea) &#123;</span><br><span class="line">    largestArea = contours.<span class="title function_">area</span>(i);</span><br><span class="line">    largestAreaIndex = i;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> lineType = <span class="number">8</span>;</span><br><span class="line"><span class="keyword">const</span> maxLevel = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">const</span> thickness = <span class="number">1</span>;</span><br><span class="line">largestContourImg.<span class="title function_">drawContour</span>(contours, largestAreaIndex, <span class="variable constant_">GREEN</span>, thickness, lineType, maxLevel, [<span class="number">0</span>, <span class="number">0</span>]);</span><br></pre></td></tr></table></figure><p><img src="https://img.zvz.im/imgs/2019/06/df9ace1263c0476b.jpg" alt=""></p><p>如果想要多一些轮廓线，比如大于特定值的所有轮廓，我们只需要将 <strong>Matrix#drawContour()</strong> 方法挪到 for 循环中同时更改一下 <strong>if</strong> 条件即可。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">GREEN</span> = [<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>];</span><br><span class="line"><span class="keyword">const</span> lineType = <span class="number">8</span>;</span><br><span class="line"><span class="keyword">const</span> maxLevel = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">const</span> thickness = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> contours = img.<span class="title function_">contours</span>();</span><br><span class="line"><span class="keyword">let</span> largestContourImg;</span><br><span class="line"><span class="keyword">let</span> largestArea = <span class="number">500</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">let</span> i = <span class="number">0</span>; i &lt; contours.<span class="title function_">size</span>(); i ++) &#123;</span><br><span class="line">  <span class="keyword">if</span> (contours.<span class="title function_">area</span>(i) &gt; largestArea) &#123;</span><br><span class="line">    largestContourImg.<span class="title function_">drawContour</span>(contours, i, <span class="variable constant_">GREEN</span>, thickness, lineType, maxLevel, [<span class="number">0</span>, <span class="number">0</span>]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img.zvz.im/imgs/2019/06/88e343ab79695efc.jpg" alt=""></p><h3 id="多边形近似"><a href="#多边形近似" class="headerlink" title="多边形近似"></a>多边形近似</h3><p>多边形近似（ Polygon approximation ）可以用来做许多事情。最简单的就是使用 <strong>Contours#boundingRect(index)</strong> 方法在对象周围画上一个矩形框。此方法是属于 Contours 对象的。对图像进行坎尼边缘侦测后，调用 <strong>Martix#findContours()</strong> 方法就可以得到 Contours 对象（上一个例子中我们讲过的）。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> bound = contours.<span class="title function_">boundingRect</span>(largestAreaIndex);</span><br><span class="line">largestContourImg.<span class="title function_">rectangle</span>([bound.<span class="property">x</span>, bound.<span class="property">y</span>], [bound.<span class="property">width</span>, bound.<span class="property">height</span>], <span class="variable constant_">WHITE</span>, <span class="number">2</span>);</span><br></pre></td></tr></table></figure><p><img src="https://img.zvz.im/imgs/2019/06/4f73351216c0607f.jpg" alt=""></p><p>第二种使用多边形近似的方法是通过调用 <strong>Contours#approxPolyDP()</strong> 方法获得指定精确的多边形。通过调用 <strong>Contours#cornerCount(index)</strong> 方法，可以获取到多边形顶角的数量。下面附上了两种使用不同级别精度获取到的图像。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> poly;</span><br><span class="line"><span class="keyword">let</span> <span class="variable constant_">RED</span> = [<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>];</span><br><span class="line"><span class="keyword">let</span> arcLength = contours.<span class="title function_">arcLength</span>(largestAreaIndex, <span class="literal">true</span>);</span><br><span class="line">contours.<span class="title function_">approxPolyDP</span>(largestAreaIndex, arcLength * <span class="number">0.05</span>, <span class="literal">true</span>);</span><br><span class="line">poly.<span class="title function_">drawContour</span>(contours, largestAreaIndex, <span class="variable constant_">RED</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// number of corners</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(contours.<span class="title function_">cornerCount</span>(largestAreaIndex));</span><br></pre></td></tr></table></figure><p><img src="https://img.zvz.im/imgs/2019/06/cb6d4e52603a38f1.jpg" alt=""></p><p><img src="https://img.zvz.im/imgs/2019/06/36f55bf3133a2346.jpg" alt=""></p><p>使用 <strong>Contours#minAreaRect()</strong> 方法获取一个旋转过的面积最小的近似矩形也很有意思。</p><p>在项目中我使用它来判断一个特定的物件旋转到正确位置后的角度。下面一个例子，我们会对 <strong>largestContourImg</strong> 增加一个旋转过的矩形，并且打印出该矩形的旋转角度。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> rect = contours.<span class="title function_">minAreaRect</span>(largestAreaIndex);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i ++) &#123;</span><br><span class="line">  largestContourImg.<span class="title function_">line</span>([rect.<span class="property">points</span>[i].<span class="property">x</span>, rect.<span class="property">points</span>[i].<span class="property">y</span>], [rect.<span class="property">points</span>[(i+<span class="number">1</span>)%<span class="number">4</span>].<span class="property">x</span>, rect.<span class="property">points</span>[(i+<span class="number">1</span>)%<span class="number">4</span>].<span class="property">y</span>], <span class="variable constant_">RED</span>, <span class="number">3</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// angle of polygon</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(rect.<span class="property">angle</span>)</span><br></pre></td></tr></table></figure><p><img src="https://img.zvz.im/imgs/2019/06/a65f66ec8a92d4c0.jpg" alt=""></p><h3 id="无裁剪图片旋转"><a href="#无裁剪图片旋转" class="headerlink" title="无裁剪图片旋转"></a>无裁剪图片旋转</h3><p>有一件事情是我需要解决，而 OpenCV 没有实现的。这件事就是旋转图像的同时，保证图像不会被裁剪掉。旋转图像是很简单的。</p><blockquote><p>译者注：译者使用 opencv 3.2.0 版本进行测试，发现 opencv 的旋转功能不会发现本文描述的图片被裁剪的状况。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">img.<span class="title function_">rotate</span>(<span class="number">90</span>);</span><br></pre></td></tr></table></figure><p>只是我们会得到如下的结果：</p><p><img src="https://img.zvz.im/imgs/2019/06/69ffacfce4d67078.jpg" alt=""></p><p><strong>怎样才能做到既旋转了图片又不会被裁剪呢？</strong>在旋转之前，我们先生成一个 8 位 3 通道的矩阵 <strong>bgImg</strong> ，其边长等于原图对角线的长度。</p><p>然后，我们计算出图像在新的 <strong>bgImg</strong> 矩阵中摆放的位置，使其能够被完整放入 <strong>bgImg</strong> 中。在 <strong>bgImg</strong> 中，我们使用计算出来的值调用 <strong>Matrix#rotate(angle)</strong> 方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> rect = contours.<span class="title function_">minAreaRect</span>(largestAreaIndex);</span><br><span class="line"><span class="keyword">let</span> diagonal = <span class="title class_">Math</span>.<span class="title function_">round</span>(<span class="title class_">Math</span>.<span class="title function_">sqrt</span>(<span class="title class_">Math</span>.<span class="title function_">pow</span>(im.<span class="title function_">size</span>()[<span class="number">1</span>], <span class="number">2</span>) + <span class="title class_">Math</span>.<span class="title function_">pow</span>(im.<span class="title function_">size</span>()[<span class="number">0</span>], <span class="number">2</span>)));</span><br><span class="line"><span class="keyword">let</span> bgImg = <span class="keyword">new</span> cv.<span class="title class_">Matrix</span>(diagonal, diagonal, cv.<span class="property">Constants</span>.<span class="property">CV_8UC3</span>, [<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>]);</span><br><span class="line"><span class="keyword">let</span> offsetX = (diagonal - im.<span class="title function_">size</span>()[<span class="number">1</span>]) / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">let</span> offsetY = (diagonal - im.<span class="title function_">size</span>()[<span class="number">0</span>]) / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable constant_">IMG_ORIGINAL</span>.<span class="title function_">copyTo</span>(bgImg, offsetX, offsetY);</span><br><span class="line">bgImg.<span class="title function_">rotate</span>(rect.<span class="property">angle</span> + <span class="number">90</span>);</span><br><span class="line"></span><br><span class="line">bgImg.<span class="title function_">save</span>(<span class="string">&#x27;./img/rotatedImg.jpg&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src="https://img.zvz.im/imgs/2019/06/4010207470c71e31.png" alt=""></p><p>然后，我们可以对新的旋转图片使用坎尼边缘侦测方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">GREEN</span> = [<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>];;</span><br><span class="line"><span class="keyword">let</span> rotatedContour = <span class="keyword">new</span> cv.<span class="title class_">Matrix</span>(diagonal, diagonal);</span><br><span class="line">bgImg.<span class="title function_">canny</span>(lowThresh, highThresh);</span><br><span class="line">bgImg.<span class="title function_">dilate</span>(nIters);</span><br><span class="line"><span class="keyword">let</span> contours = bgImg.<span class="title function_">findContours</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; contours.<span class="title function_">size</span>(); i++) &#123;</span><br><span class="line">  <span class="keyword">if</span> (contours.<span class="title function_">area</span>(i) &gt; largestArea) &#123;</span><br><span class="line">    largestArea = contours.<span class="title function_">area</span>(i);</span><br><span class="line">    largestAreaIndex = i;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">rotatedContour.<span class="title function_">drawContour</span>(contours, largestAreaIndex, <span class="variable constant_">GREEN</span>, thickness, lineType);</span><br><span class="line">rotatedContour.<span class="title function_">save</span>(<span class="string">&#x27;./img/rotatedImgContour.jpg&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src="https://img.zvz.im/imgs/2019/06/0f82295326f2c5fd.png" alt=""></p><p>还有许多操作图片的方法。比如，很实用的去除背景功能 - 不过本文就暂不做介绍了。</p><h3 id="物体侦测"><a href="#物体侦测" class="headerlink" title="物体侦测"></a>物体侦测</h3><p>实际上我工作时，我的程序会处理植物图像，并不会使用人脸，汽车或其它物件的识别器。</p><blockquote><p>即便如此，我还是决定在本文中提一下面部识别，因为它更能够提现 OpenCV 的强大技术。</p></blockquote><p>对于载入的图像，我们可以使用 <strong>Matrix#detectObject()</strong> 方法，该方法接受一个「级联分类器」（ cascade classifier ）路径作为参数。<strong>OpenCV 自带一些预先训练好的分类器，可以用来侦测数字，面部，眼睛，耳朵，猫咪等等。</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">cv.<span class="title function_">readImage</span>(<span class="string">&#x27;./img/face.jpg&#x27;</span>, <span class="keyword">function</span>(<span class="params">err, im</span>)&#123;  </span><br><span class="line">  <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">  <span class="keyword">if</span> (im.<span class="title function_">width</span>() &lt; <span class="number">1</span> || im.<span class="title function_">height</span>() &lt; <span class="number">1</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Image has no size&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  im.<span class="title function_">detectObject</span>(<span class="string">&#x27;./data/haarcascade_frontalface_alt2.xml&#x27;</span>, &#123;&#125;, <span class="keyword">function</span>(<span class="params">err, faces</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; faces.<span class="property">length</span>; i++)&#123;</span><br><span class="line">      <span class="keyword">var</span> face = faces[i];</span><br><span class="line">      im.<span class="title function_">ellipse</span>(face.<span class="property">x</span> + face.<span class="property">width</span> / <span class="number">2</span>, face.<span class="property">y</span> + face.<span class="property">height</span> / <span class="number">2</span>, face.<span class="property">width</span> / <span class="number">2</span>, face.<span class="property">height</span> / <span class="number">2</span>, [<span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>], <span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    im.<span class="title function_">save</span>(<span class="string">&#x27;./img/face-detection.jpg&#x27;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Image saved.&#x27;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><img src="https://img.zvz.im/imgs/2019/06/2b7a99d9ea52c2d6.png" alt=""></p><blockquote><p>译者注：译者找了个照片试了一下，发现会有误认的情况。。。不知道是否有方法提高准确度。</p></blockquote><p><strong>本文中，我讲了一些 OpenCV 库在 Node.js 中的有趣特性。</strong>虽然 OpenCV 没有官方的 Node.js 接口挺令人失望的，还好有这个 node-opencv 库，尽管有些功能没有实现，API 也不是很稳定，但是瑕不掩瑜。</p><p>如果你想要在工作中使用此类库，你应当研究一下 <a href="https://github.com/peterbraden/node-opencv">node-opencv</a> 代码库中的 .cc 文件，因为此类库目前还没有一个完整的文档。</p><p>直接去读代码当然是最好的，我也很喜欢这样做；但是类库中有些返回值与 OpenCV 官方不一致和区别的地方，还是让我不那么爽。<strong>希望这个类库能够快快发展，我也会尽我所能贡献一些代码。</strong></p><blockquote><p>译者注：修改了边缘侦测部分的代码后，译者发现类库 API 与官方不一致的问题有所改善。</p></blockquote><blockquote><p>翻译自：<a href="https://community.risingstack.com/opencv-tutorial-computer-vision-with-node-js/">OpenCV tutorial: Computer vision with Node.js</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在这篇 OpenCV 入门文章中，我将会向大家展示如何使用 Node.js 进行计算机视觉处理。并且结合实例讲解使用 OpenCV 这个开源库进行图像处理的基础方法。&lt;/p&gt;
&lt;p&gt;目前，我正在完成我的硕士论文，其中使用到了 React Native，神经网络，和 OpenCV 计算机视觉库。请允许我向你们展示一些我在使用 OpenCV 过程中学习到的一些东西。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;计算机视觉是计算机科学中的一个领域，主要专注于使用不同的算法从图像和视频中获取数据。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;计算机视觉在许多领域得到了广泛地应用，例如安全摄像头的运动跟踪，控制车辆进行自动驾驶，从图片或视频中识别或搜索对象。&lt;/p&gt;
&lt;p&gt;要实现计算机视觉算法是一件非常繁复的工作，不过幸好有 &lt;a href=&quot;http://opencv.org/&quot;&gt;OpenCV&lt;/a&gt; 这个非常好的开源库，此库起源于 1999 年，并一直发展到现在。&lt;/p&gt;
&lt;p&gt;OpenCV 官方支持 C，C ++，Python 和 Java。幸运的是，由 Peter Braden 领导的一群 Javascript 程序员开发了一个 Javascript 的 OpenCV 接口库，名为 &lt;a href=&quot;https://github.com/peterbraden/node-opencv&quot;&gt;node-opencv&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;利用该接口库，我们可以实现用于图像分析的 Node.js 应用。此库目前还没有实现所有的 OpenCV 特性 - 特别是 OpenCV 3 的一些特性 - 不过已经基本够用了。&lt;br&gt;
    
    </summary>
    
    
      <category term="Nodejs" scheme="http://log.zvz.im/tags/Nodejs/"/>
    
      <category term="opencv" scheme="http://log.zvz.im/tags/opencv/"/>
    
  </entry>
  
</feed>
